#!/usr/bin/env python3

import os
import sys
import subprocess
import json
from pathlib import Path


def read_tests_config():
    """Read the test configurations from tests_to_run.txt."""
    config_file = Path(__file__).parent / "tests_to_run.txt"
    tests = []
    
    if not config_file.exists():
        print(f"Error: {config_file} not found")
        return tests
    
    with open(config_file, 'r') as f:
        for line_num, line in enumerate(f, 1):
            line = line.strip()
            if not line or line.startswith('#'):
                continue
            
            parts = line.split()
            if len(parts) < 2:
                print(f"Warning: Invalid line {line_num} in tests_to_run.txt: {line}")
                continue
            
            yaml_file = parts[0]
            history_file = parts[1]
            error_message = ' '.join(parts[2:]) if len(parts) > 2 else None
            
            tests.append({
                'yaml_file': yaml_file,
                'history_file': history_file,
                'error_message': error_message,
                'line_num': line_num
            })
    
    return tests


def print_json_output(test_config):
    """Print the JSON output files generated by the test."""
    yaml_file = test_config['yaml_file']
    history_file = test_config['history_file']
    error_message = test_config['error_message']
    
    # Generate the expected base filename (same logic as run_test.py)
    yaml_name = Path(yaml_file).stem
    history_name = Path(history_file).stem
    base_filename = f"{yaml_name}_{history_name}"
    
    if error_message:
        base_filename += "_errors"
    
    output_dir = Path(__file__).parent / "test_outputs"
    
    # Print the main response JSON
    response_file = output_dir / f"{base_filename}_response.json"
    if response_file.exists():
        try:
            with open(response_file, 'r') as f:
                response_data = json.load(f)
            print("\n📝 WORKFLOW_CHAT RESPONSE:")
            print(json.dumps(response_data, indent=2))
        except Exception as e:
            print(f"\n❌ Could not read response file: {e}")
    
    # Print the YAML output if it exists - check both .json and .yaml extensions
    yaml_json_file = output_dir / f"{base_filename}_response_yaml.json"
    yaml_yaml_file = output_dir / f"{base_filename}_response_yaml.yaml"
    
    if yaml_json_file.exists():
        try:
            with open(yaml_json_file, 'r') as f:
                yaml_data = json.load(f)
            # The YAML content should be a string inside the JSON
            if yaml_data and isinstance(yaml_data, str) and yaml_data.strip():
                print("\n📄 GENERATED YAML:")
                print(yaml_data)
            elif yaml_data and yaml_data is not None:
                print("\n📄 GENERATED YAML:")
                print(json.dumps(yaml_data, indent=2))
            else:
                print("\n📄 GENERATED YAML: None (workflow_chat provided only text description)")
        except Exception as e:
            print(f"\n❌ Could not read YAML JSON file: {e}")
    elif yaml_yaml_file.exists():
        try:
            with open(yaml_yaml_file, 'r') as f:
                yaml_content = f.read()
            if yaml_content.strip():
                print("\n📄 GENERATED YAML:")
                print(yaml_content)
            else:
                print("\n📄 GENERATED YAML: Empty file")
        except Exception as e:
            print(f"\n❌ Could not read YAML file: {e}")
    else:
        print("\n📄 GENERATED YAML: File not found")
    
    # Print usage information
    usage_file = output_dir / f"{base_filename}_usage.json"
    if usage_file.exists():
        try:
            with open(usage_file, 'r') as f:
                usage_data = json.load(f)
            print("\n📊 TOKEN USAGE:")
            print(json.dumps(usage_data, indent=2))
        except Exception as e:
            print(f"\n❌ Could not read usage file: {e}")


def run_single_test(test_config):
    """Run a single test using run_test.py."""
    yaml_file = test_config['yaml_file']
    history_file = test_config['history_file']
    error_message = test_config['error_message']
    
    # Build the command
    cmd = [
        sys.executable,
        "run_test.py",
        "--existing_yaml", yaml_file,
        "--history", history_file
    ]
    
    if error_message:
        cmd.extend(["--errors", error_message])
    
    print(f"Running: {' '.join(cmd)}")
    print("-" * 80)
    
    try:
        # Run the test and capture output
        result = subprocess.run(
            cmd, 
            cwd=Path(__file__).parent,
            text=True,
            capture_output=False  # Let output go directly to console
        )
        
        print("-" * 80)
        
        # If test succeeded, print the JSON output
        if result.returncode == 0:
            print_json_output(test_config)
        
        return result.returncode == 0, None
        
    except Exception as e:
        error_msg = f"Failed to run test: {str(e)}"
        print(f"ERROR: {error_msg}")
        print("-" * 80)
        return False, error_msg


def main():
    """Main function to run all tests."""
    print("Reading test configurations...")
    tests = read_tests_config()
    
    if not tests:
        print("No tests found to run.")
        sys.exit(1)
    
    print(f"Found {len(tests)} test(s) to run.\n")
    
    # Track results
    results = []
    
    for i, test_config in enumerate(tests, 1):
        print(f"TEST {i}/{len(tests)}: {test_config['yaml_file']} + {test_config['history_file']}")
        if test_config['error_message']:
            print(f"  With errors: {test_config['error_message']}")
        print()
        
        success, error = run_single_test(test_config)
        
        results.append({
            'test_num': i,
            'config': test_config,
            'success': success,
            'error': error
        })
        
        print()
    
    # Summary
    print("=" * 80)
    print("TEST SUMMARY")
    print("=" * 80)
    
    successful_tests = sum(1 for r in results if r['success'])
    failed_tests = len(results) - successful_tests
    
    print(f"Total tests: {len(results)}")
    print(f"Successful: {successful_tests}")
    print(f"Failed: {failed_tests}")
    print()
    
    if failed_tests > 0:
        print("FAILED TESTS:")
        for result in results:
            if not result['success']:
                config = result['config']
                print(f"  Test {result['test_num']}: {config['yaml_file']} + {config['history_file']}")
                if result['error']:
                    print(f"    Error: {result['error']}")
        sys.exit(1)
    else:
        print("All tests passed!")


if __name__ == "__main__":
    main() 