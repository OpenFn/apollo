[
  {
    "question": "what is state",
    "fullResult": {
      "response": "In OpenFn, `state` is the core data object that flows through your workflow. It contains:\n\n- `state.data` - The main data payload (usually from your input or previous operations)\n- `state.references` - Array of results from previous operations in the workflow\n- `state.configuration` - Your credential/connection settings (handled securely by OpenFn)\n\nYou can access and modify state in your job code:\n\n```js\nfn(state => {\n  console.log(state.data); // Your input data\n  console.log(state.references); // Previous operation results\n  \n  // Modify state\n  state.data.newField = 'hello';\n  \n  return state; // Always return state\n});\n```\n\nState is passed between each operation in your job, allowing data to flow through your workflow pipeline.",
      "suggested_code": null,
      "history": [
        {
          "role": "user",
          "content": "what is state"
        },
        {
          "role": "assistant",
          "content": "In OpenFn, `state` is the core data object that flows through your workflow. It contains:\n\n- `state.data` - The main data payload (usually from your input or previous operations)\n- `state.references` - Array of results from previous operations in the workflow\n- `state.configuration` - Your credential/connection settings (handled securely by OpenFn)\n\nYou can access and modify state in your job code:\n\n```js\nfn(state => {\n  console.log(state.data); // Your input data\n  console.log(state.references); // Previous operation results\n  \n  // Modify state\n  state.data.newField = 'hello';\n  \n  return state; // Always return state\n});\n```\n\nState is passed between each operation in your job, allowing data to flow through your workflow pipeline."
        }
      ],
      "usage": {
        "cache_creation_input_tokens": 12540,
        "cache_read_input_tokens": 0,
        "input_tokens": 523,
        "output_tokens": 221
      },
      "meta": {
        "rag": {
          "search_results": [
            {
              "text": "Our runtime converts each factoryinto an actual function, saves all the functions into an array, and calls them\nsequentially, passing in the latest state object to each one.\n\n\n\nThe OpenFn runtime knows how to handle an operation at the top scope, it can run\nit as part of the pipeline and handle state appropriately. However, the runtime\ndoes not know how to deal with a nested operation like above.\n\nBest practices dictate you should build each discrete operation of the pipeline\nat the top-level, passing state between them naturally via the pipeline. This\nmeans you should never need to nest an operation. However, if you ever find\nyourself in a situation where you absolutely need to use a nested operation, you\nshould pass state into it directly, for example:",
              "metadata": {
                "doc_title": "job-writing-guide",
                "docs_type": "general_docs"
              },
              "score": 0.805786133
            },
            {
              "text": "---\ntitle: Javascript Tips\nsidebar_label: Javascript Tips\n---\n\nOpenFn supports all modern JavaScript features.\n\nThis section highlights some useful JavaScript features and operators which\nmight help make your code cleaner. This is not meant to be an exhaustive guide,\njust a pointer to some good techniques on some of the newer aspects of the\nlanguage.### Using the `fn(...)` operation from the common adaptor\n\nWe recommend using the `fn(...)` operation to manipulate state and apply custom\nJavaScript to transform, manipulate, and clean data before sending to target\napplications.```js\nfn(state => {\n  //call state to edit\n  //add your custom javascript here to manipulate state\n  return state; //always return state\n});```",
              "metadata": {
                "doc_title": "javascript",
                "docs_type": "general_docs"
              },
              "score": 0.801879883
            },
            {
              "text": "When your job runs, it will be evaluated in a Javascript engine and follow theusual rules of Javsacript. That is to say: each statement will be executed in\nsequence (forget about asynchronous functions for a moment!).\n\nThe first statement, `get('/some-data)`, calls OpenFn's `get` function and\npasses it a string. `get` then returns another function which will be executed\nlater.\n\nThe second statement, `post('/some-other-data', state.data)` does something\nsimilar. It calls the `post` function, passing in a string and whatever sits on\n`state.data`, and returns a function to be executed later. But the two arguments\nhave already been resolved to values.\n\nCalling an operation is a bit like declaring a contract: you specify what you\nwant to happen, and in what order, and what the terms of the contact are. Then\nOpenFn will go off and fulfill the terms of that contract for you.\n\nThe problem is that when you specify the terms of the contract, you don't have\nall the values to hand. We don't know what `state.data` is yet. So we need to",
              "metadata": {
                "doc_title": "job-writing-guide",
                "docs_type": "general_docs"
              },
              "score": 0.799377501
            },
            {
              "text": "The preferred way in\nmodern OpenFn is to use an inline-function:```js\nget('/some-data');\npost('/some-other-data', (state) => state.data);```\n\nThis passes a _function_ into the `post` operator, instead of a value\n\nWhen the `post()` call actually executes, the first thing it'll do is resolve\nany function into arguments into values. It does this by calling the function,\npassing in the latest state, and using the return as the value.\n\nThese lazy functions are incredibly powerful. Using them effectively is the key\nto writing good OpenFn jobs.## The Lazy State Operator\n\n:::tip Experimental Feature\n\nThe Lazy State operator is new to OpenFn as of April 2024. It is still\nconsidered an experimental feature. But it works great, and we encourage you to\nuse it!\n\nIf you've got any feedback, issues or suggestions around the Lazy State\nOperator, we'd love to hear from you on\n[Community](https://community.openfn.org)! Or you can raise an issue on\n[GitHub](https://github.com/openfn/kit/issues).\n\n:::\n\nThe Lazy State Operator is a shorthand syntax that makes it easier to read state\nwhen passing data into an operation.\n\nInstead of writing `state.data` to access something on state, you can use `$`,\nlike this:",
              "metadata": {
                "doc_title": "job-writing-guide",
                "docs_type": "general_docs"
              },
              "score": 0.79550159
            },
            {
              "text": "[swisstph](/img/swisstph.png)## GovStack\n\nOpenFn is compliant with\n[GovStack's standard specification](https://govstack.gitbook.io/bb-workflow/2-description)\nfor workflow engines.## Pricinciples for Digital Development\n\nOpenFn was designed for the social sector and has been actively prioritizing the\n[Principles of Digital Development](https://digitalprinciples.org/) since its\ninception.\n\nOpenFn solutions are:\n\n- **interoperable** (connect any application);\n- **reusable** (utilize existing OpenFn configurations as templates, or easily\n  share, copy, and modify your own configurations; see docs.openfn.org/library);\n- **sustainable** (flexible implementation options with no lock-in);\n- **scalable** (OpenFn leverages enterprise-grade tech to handle high data\n  volumes and provides a range of deployment options to ensure total solution\n  ownership on any server);\n- **promote open standards and open access** (through our open-source software,\n  documentation, and features to help users implement open standards in their\n  information exchange solutions), and\n- **address privacy & security**.",
              "metadata": {
                "doc_title": "standards",
                "docs_type": "general_docs"
              },
              "score": 0.790161133
            }
          ],
          "search_results_sections": [
            "standards",
            "javascript",
            "job-writing-guide"
          ],
          "search_queries": [
            {
              "query": "what is state in OpenFn",
              "doc_type": null
            }
          ],
          "config_version": 1,
          "prompts_version": 1,
          "usage": {
            "needs_docs": {
              "input_tokens": 153,
              "output_tokens": 4,
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 0,
              "cache_creation": {
                "ephemeral_5m_input_tokens": 0,
                "ephemeral_1h_input_tokens": 0
              },
              "service_tier": "standard"
            },
            "generate_queries": {
              "input_tokens": 329,
              "output_tokens": 27,
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 0,
              "cache_creation": {
                "ephemeral_5m_input_tokens": 0,
                "ephemeral_1h_input_tokens": 0
              },
              "service_tier": "standard"
            }
          }
        }
      }
    }
  },
  {
    "question": "what does $ mean",
    "fullResult": {
      "response": "In OpenFn job code, `$` is the **lazy state operator**. It's a shorthand way to reference data from the state object.\n\nInstead of writing `state.data.something`, you can use `$.data.something`. The `$` ensures the value is resolved at the correct time during job execution.\n\nExamples:\n```js\n// These are equivalent:\nget($.data.url)\nget(state => state.data.url)\n\n// Access nested data:\nget($.patient.id)\n\n// Use in string templates:\nget(`/patients/${$.patient.id}`)\n\n// Use in operations:\ncreate('Account', {\n  name: $.customer.name,\n  email: $.customer.email\n})\n```\n\nKey points:\n- `$` can only be used to **read** from state, not assign to it\n- It can only be used inside function arguments (like operation parameters)\n- It's syntactic sugar that gets converted to `state => state` during compilation\n\nThink of `$` as a path pointing to your state data that gets resolved automatically at runtime.",
      "suggested_code": null,
      "history": [
        {
          "role": "user",
          "content": "what does $ mean"
        },
        {
          "role": "assistant",
          "content": "In OpenFn job code, `$` is the **lazy state operator**. It's a shorthand way to reference data from the state object.\n\nInstead of writing `state.data.something`, you can use `$.data.something`. The `$` ensures the value is resolved at the correct time during job execution.\n\nExamples:\n```js\n// These are equivalent:\nget($.data.url)\nget(state => state.data.url)\n\n// Access nested data:\nget($.patient.id)\n\n// Use in string templates:\nget(`/patients/${$.patient.id}`)\n\n// Use in operations:\ncreate('Account', {\n  name: $.customer.name,\n  email: $.customer.email\n})\n```\n\nKey points:\n- `$` can only be used to **read** from state, not assign to it\n- It can only be used inside function arguments (like operation parameters)\n- It's syntactic sugar that gets converted to `state => state` during compilation\n\nThink of `$` as a path pointing to your state data that gets resolved automatically at runtime."
        }
      ],
      "usage": {
        "cache_creation_input_tokens": 13849,
        "cache_read_input_tokens": 1295,
        "input_tokens": 529,
        "output_tokens": 278
      },
      "meta": {
        "rag": {
          "search_results": [
            {
              "text": "If so, move to Q3!### 3. Is what you're asking for going to produce the effect you desire?\n\nThis is a tricky one, and may involve the engineering team. (In fact, this is\noften when engineering gets called in. There's a \"bug\", and before we take a\nlook at any code we need to figure out if what's being asked for—the\nspecification—will actually produce the desired outcomes.)### 4. Does the expression implement what you're asking for?\n\nSo we're _certain_ that the spec will produce the effect we want? OK, great...\nnow let's look at the job expression. Does the job expression implement the\nspec? How can you prove (with logs, assertions, etc.) that it does? Don't move\non until you're certain of this, or certain that it _can't_, given the adaptor\nyou're using!\n\n:::info Time check\n\nN.B., a change to the job expression takes as little as a couple of minutes.\n\n:::",
              "metadata": {
                "doc_title": "troubleshooting",
                "docs_type": "general_docs"
              },
              "score": 0.746337831
            },
            {
              "text": "In\naddition to the scores, we also provide two quick visual indicators:### Scrolls 📜 are from core contributors\n\nJobs with scrolls next to them have been manually added or edited by a core\ncontributor to this repo. Think of them as official examples. In _most cases_\nthis means that the spells... errr, scripts you see in there are great places to\nstart.### Sparkles ✨ are scoring over 75\n\nJobs with sparkles next to them are currently scoring over 75. That's all. We\ncan't vouch for them, but they might be more useful than jobs without sparkles.### How to interpret a score\n\nEverything you see here has been shared because _someone_ thought it might help\nthe broader community. If a job has a high score it's because our model thinks\nit might be helpful, too! This might be a good time to review rule #1 and rule\n#2 about models/algorithms.\n\n1. All models are wrong.\n2. But some models are useful.\n\nWe hope this one is useful. In conclusion, **the higher the score, the more\nuseful the job _might_ be.**",
              "metadata": {
                "doc_title": "library-intro",
                "docs_type": "adaptor_docs"
              },
              "score": 0.718048215
            },
            {
              "text": "Instead of writing `state.data` to access something on state, you can use `$`,\nlike this:```js\nget($.data.url);```\n\nThe `$` ensures that the value passed to the operation will be resolved at the\ncorrect time. Think of it like passing a path to some part of state, rather than\npassing the value of that path.\n\nWhat's nice about this is that you can basically ignore the previous section\nentirely and not think too much about state evaluation. Just read from `$` like\nyour state object and the OpenFn runtime will resolve the value correctly at\nrun-time.\n\nThe `$` symbol is really just syntactic sugar for `(state) => state` (in most\ncases, we just do a string replace when compiling your code). These two\nstatements behave in exactly the same way:```js\nget($.data.url);\nget((state) => state.data.url);",
              "metadata": {
                "doc_title": "job-writing-guide",
                "docs_type": "general_docs"
              },
              "score": 0.74319464
            },
            {
              "text": "Basic usage is simply to pass state into an operation:```js\nupsert('patient', $.data.patients[0]);```\n\nYou can use it inside an object (so long as that object is passed to an\noperation):```js\ncreate('agent', {\n  name: $.patient.name,\n  country: $.patient.country,\n});```\n\nYou can use it inside a string template:```js\nget(`/patients/${$.patient.id}`);```\n\nOr inside other expressions, like concatenation:```js\ncreate({\n  name: $.patients[0].first_name + ' ' + $.patients[0].last_name,\n});```\n\nOr mathematics:```js\ncreate({\n  profit: $.report.revenue - $.report.expenses,\n});```\n\nYou can use it when mapping data structures:```js\ncreate('user', {\n  countryCode: countries[$.location.country],\n});```\n\nAnd you can use it in nested operations like, with `each()`:```js\neach($.data.patients,\n  post(`patients/${$.data.patient.id}`, $.data.patient)\n);```### $ is not state\n\nThe `$` operator is **not** an alias for `state`.\n\nIt cannot be used in place of the `state` variable. It cannot be assigned to, or\nbe on the left hand side of an assignment, and can only be used inside an\nargument to a function\n\nThis also means that Lazy State Operator can only be used to READ from state. It\ncannot be used to assign to state directly.\n\nThese examples are all errors:",
              "metadata": {
                "doc_title": "job-writing-guide",
                "docs_type": "general_docs"
              },
              "score": 0.736236632
            },
            {
              "text": "---\nsidebar_label: Job Writing Guide\ntitle: Job Writing Guide\n---\n\nWorkflow automation and data integration in OpenFn is realised through the\ncreation of Jobs.\n\nThis guide will walk you through key concepts and best practices for job\nwriting. It is suitable for new coders and experienced JavaScript programmers.\nIn fact, even if you're an experienced JavaScript developer, there are a number\nof key patterns in the OpenFn ecosystem which it is important to learn.\n\n:::tip\n\nIf you're writing jobs on the platform app (Lightning), you can use the [AI Assistant](/documentation/build/ai-assistant) to help you. You'll find it in the Inspector.\n\n:::\n\nA Job is a bunch of JavaScript code which performs a particular task, like\nfetching data from Salesforce or converting some JSON data to FHIR standard.\n\nEach job uses exactly one Adaptor (often called a \"connector\") to perform its\ntask. The Adaptor provides a collection of helper functions (Operations) which",
              "metadata": {
                "doc_title": "job-writing-guide",
                "docs_type": "general_docs"
              },
              "score": 0.723693907
            }
          ],
          "search_results_sections": [
            "job-writing-guide",
            "troubleshooting",
            "library-intro"
          ],
          "search_queries": [
            {
              "query": "what does $ mean in job expressions",
              "doc_type": null
            }
          ],
          "config_version": 1,
          "prompts_version": 1,
          "usage": {
            "needs_docs": {
              "input_tokens": 155,
              "output_tokens": 4,
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 0,
              "cache_creation": {
                "ephemeral_5m_input_tokens": 0,
                "ephemeral_1h_input_tokens": 0
              },
              "service_tier": "standard"
            },
            "generate_queries": {
              "input_tokens": 331,
              "output_tokens": 27,
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 0,
              "cache_creation": {
                "ephemeral_5m_input_tokens": 0,
                "ephemeral_1h_input_tokens": 0
              },
              "service_tier": "standard"
            }
          }
        }
      }
    }
  },
  {
    "question": "How do I download all items from a collection from a particular day? Like 29th\nmarch 2024? See my input for an example of what my keys look like",
    "fullResult": {
      "response": "Looking at your data structure where keys are in format `YYYYMMDD-ID`, you can fetch all items from March 29th, 2024 using the Collections adaptor with a pattern filter:\n\n```js\ncollections.get('my-collection', '20240329*');\n```\n\nThis will download all items where the key starts with `20240329` (March 29th, 2024).\n\nIf you need to process each item individually instead of loading them all at once, use `each()`:\n\n```js\ncollections.each('my-collection', '20240329*', (state, value, key) => {\n  console.log(`Processing ${key}:`, value);\n  // Process each item here\n  return state;\n});\n```\n\nThe `*` wildcard matches any characters after the date, so it will capture all records from that specific day regardless of the ID portion.",
      "suggested_code": null,
      "history": [
        {
          "role": "user",
          "content": "How do I download all items from a collection from a particular day? Like 29th\nmarch 2024? See my input for an example of what my keys look like"
        },
        {
          "role": "assistant",
          "content": "Looking at your data structure where keys are in format `YYYYMMDD-ID`, you can fetch all items from March 29th, 2024 using the Collections adaptor with a pattern filter:\n\n```js\ncollections.get('my-collection', '20240329*');\n```\n\nThis will download all items where the key starts with `20240329` (March 29th, 2024).\n\nIf you need to process each item individually instead of loading them all at once, use `each()`:\n\n```js\ncollections.each('my-collection', '20240329*', (state, value, key) => {\n  console.log(`Processing ${key}:`, value);\n  // Process each item here\n  return state;\n});\n```\n\nThe `*` wildcard matches any characters after the date, so it will capture all records from that specific day regardless of the ID portion."
        }
      ],
      "usage": {
        "cache_creation_input_tokens": 15379,
        "cache_read_input_tokens": 1295,
        "input_tokens": 694,
        "output_tokens": 251
      },
      "meta": {
        "rag": {
          "search_results": [
            {
              "text": "?= {};\n  state.resources[state.data.id] = mappedString;\n  return state;\n});```\n\nYou can also fetch multiple items with `get()`, which supports the same query\noptions as `each()`.\n\nBear in mind that all the items will be loaded into memory at once. For large\ndatasets and structures, this may cause problems.\n\nWhen bulk-loading with `get()`, state.data will be an array of items, and\n`state.data.cursor` will contain the cursor position from the server```js\ncollections.get('my-collection', '2024*').then(state => {\n  state.allRecords = state.data;\n  return state;\n});```### Remove data from a Collection\n\nYou can remove an individual value by key:```js\ncollections.remove('my-collection', 'commcare-fhir-value-mappings');```\n\nYou can also use patterns to delete multiple values at a time:```js\ncollections.remove('my-collection', '2024*');```## Filters, Limits & Cursors\n\nAs well as filtering keys with patterns, you can filter by created date:",
              "metadata": {
                "doc_title": "collections",
                "docs_type": "adaptor_docs"
              },
              "score": 0.75402838
            },
            {
              "text": "See below for helpful tips for your next\nSalesforce integration project.### Field API Names\n\nSalesforce **field API names** (unique names for each piece of metadata - e.g.,\n`PatientID__c`) should be referenced in OpenFn integrations, not **field\nlabels** (business-friendly label that the end user sees - e.g., `Patient ID`)\n![image](https://user-images.githubusercontent.com/80456839/128650593-343090da-7f12-468a-aa51-1f87f1cf9f34.png).\n\nTo view the Salesforce API field names, navigate to the Salesforce backend. Via\nthe web app, select `Setup` from the top naviagation menu to browse the\nSalesforce backend settings, metadata configuration, object and field names,\netc.\n\n- In the `Classic` view, search for `Object` in the left-hand `Setup` search box\n  without hitting Enter. From the quick results, select `Create -> Objects`.\n  This takes you to all the custom objects. Select an object and you'll see all\n  the fields and relationships on the object.\n- You can also easily view Salesforce API names via the front-end UI by\n  downloading the Chrome extension",
              "metadata": {
                "doc_title": "salesforce",
                "docs_type": "adaptor_docs"
              },
              "score": 0.811767459
            },
            {
              "text": "- As a fundraiser at an NGO, I would like to see all donor information tracked\n  in Salesforce so that I can better monitor fundraising activities, nurture\n  relationships with all funders, and manage campaigns.## APIs & Integration Options\n\nSalesforce has a rich ecosystem of developers and ready-made applications. See\nthe [Salesforce App Exchange](https://appexchange.salesforce.com/) for existing\napps and integrations custom-made for Salesforce. If existing applications do\nnot meet your functional or budget requirements, leverage Salesforce's robust\nAPIs to configure a custom integration.\n\n1. **APIs:** Salesforce has a robust set of RESTful APIs that support a wide\n   range of operations. For connecting with these APIs, including the\n   `Bulk API`, OpenFn has developed a robust API adaptor for quicker integration\n   setup - see\n   [`language-salesforce`](https://github.com/OpenFn/language-salesforce).\n2. **Webhook:** By configuring\n   [`Outbound Messages`](https://developer.salesforce.com/docs/atlas.en-us.api.meta/api/sforce_api_om_outboundmessaging_understanding.htm)\n   that can be sent via criteria-based `Workflow Rules`, Salesforce Admins can",
              "metadata": {
                "doc_title": "salesforce",
                "docs_type": "adaptor_docs"
              },
              "score": 0.844970703
            },
            {
              "text": "You might naively try something like this - but it won't work!```js\nget('/data'); // writes to state.data\nstate.data = state.data.filter(/* ... */); // This is invalid!```\n\nYou could use another operation, like `fn` or `each` - and often these work\ngreat!```js\nget('/data');\nfn(state => {\n  state.data = state.data.filter(/* ... */);\n  return state;\n});```\n\nBut you can also use a callback function, which is usually a bit neater:```js\nget('/data', {}, state => {\n  state.data = state.data.filter(/* ... */);\n  return state;\n});```\n\nWhatever your callback returns will be used as the input state for the next\noperation (or will be the final state for the job). So remember to ALWAYS return\nstate!\n\nBe mindful that some Adaptors will write internal information to state. So you\nshould usually `return { ... state }` rather than `return { data: state.data }`.\n\n:::tip\n\nRemember! Always return state from a callback.\n\n:::",
              "metadata": {
                "doc_title": "job-writing-guide",
                "docs_type": "general_docs"
              },
              "score": 0.760681152
            },
            {
              "text": "**Webhook:** By configuring\n   [`Outbound Messages`](https://developer.salesforce.com/docs/atlas.en-us.api.meta/api/sforce_api_om_outboundmessaging_understanding.htm)\n   that can be sent via criteria-based `Workflow Rules`, Salesforce Admins can   configure real-time notifications to be sent to OpenFn (or any endpoint URL)\n   when a specific event occurs. (E.g., every time a new `Contact` is created,\n   send an Outbound Message to OpenFn to trigger a data sync between that SF\n   `Contact` record and another data system.)## App Setup & Integration Tips\n\nSalesforce provides robust online documentation (see\n[Developer Docs](https://developer.salesforce.com/docs)) and tutorials (see\n[Trailheads](https://trailhead.salesforce.com/en?utm_campaign=13515883882&utm_content=125227478042&utm_medium=paid&utm_source=google_sem))\nfor learning about the platform. See below for helpful tips for your next\nSalesforce integration project.",
              "metadata": {
                "doc_title": "salesforce",
                "docs_type": "adaptor_docs"
              },
              "score": 0.803649902
            },
            {
              "text": "---\ntitle: Salesforce\n---## App Overview\n\n[Salesforce](https://www.salesforce.com/) is a cloud-based **customer\nrelationship management (CRM)** platform that hosts applications that customers\ncan access online. Beyond its core CRM product, Salesforce offers a customizable\nplatform for configuring relational databases, business automation, web portals,\nreporting tools, and robust applications for supporting a wide range of use\ncases.### Data Model\n\nAt its core, Salesforce is a relational database. It has some out-of-box or\n\"standard\" data tables and features, but can be easily extended to include\n\"custom\" metadata configuration and other app features.\n\nSalesforce data is stored in **individual records (rows)** and organized within\n**objects (tables)**. Record attributes are captured in **fields (columns)**.\nThe data model is configurable, but there are some standard objects that are\nprovided. Note that naming conventions for custom and standard metadata may\ndiffer (e.g., all \"custom\" field names include the suffix `__c` like\n`CustomField__c`).\n\nLearn more about how data is structured in Salesforce at the links below:\n\n- How data is organized in Salesforce:\n  https://help.salesforce.com/s/articleView?id=sf.basics_organize_data.htm&type=5\n- Salesforce objects: https://www.salesforcetutorial.com/salesforce-objects/",
              "metadata": {
                "doc_title": "salesforce",
                "docs_type": "adaptor_docs"
              },
              "score": 0.850830078
            },
            {
              "text": "See the `functions` and\n`examples` in the sidebar for more.```js\nfetchSubmissions(\n  'form123', //replace with the form id\n  {\n    date: 'Apr 18, 2024 6:26:21 AM', //if submission date filter not specified, the function will fetch submissions from ALL-TIME\n    status: 'approved|rejected', // add to filter by status; if not specified, the function will fetch submissions of ALL statuses\n  }\n);\n```## Configuring a Credential with API Access\n\nTo authenticate with the SurveyCTO API, your OpenFn Workflow will require a user\ncredential where the setting `Allow server API access` has been enabled. This\nsetting controls whether or not users in a given role can use the API to fetch\nforms and data from the server.\n[See SurveyCTO docs](https://docs.surveycto.com/04-monitoring-and-management/01-the-basics/00b.managing-user-roles.html)\non managing user roles.",
              "metadata": {
                "doc_title": "surveycto",
                "docs_type": "adaptor_docs"
              },
              "score": 0.758911133
            },
            {
              "text": "When bulk-loading with `get()`, state.data will be an array of items, and\n`state.data.cursor` will contain the cursor position from the server```js\ncollections.get('my-collection', '2024*').then(state => {\n  state.allRecords = state.data;\n  return state;\n});```### Remove data from a Collection\n\nYou can remove an individual value by key:```js\ncollections.remove('my-collection', 'commcare-fhir-value-mappings');```\n\nYou can also use patterns to delete multiple values at a time:```js\ncollections.remove('my-collection', '2024*');```## Filters, Limits & Cursors\n\nAs well as filtering keys with patterns, you can filter by created date:```js\ncollections.each(\n  'my-collection',\n  { key: '2024*', createdAfter: '20240601' },\n  (state, value, key) => {\n    console.log(value);\n  }\n);",
              "metadata": {
                "doc_title": "collections",
                "docs_type": "adaptor_docs"
              },
              "score": 0.756591856
            },
            {
              "text": "When bulk-loading with `get()`, state.data will be an array of items, and\n`state.data.cursor` will contain the cursor position from the server```js\ncollections.get('my-collection', '2024*').then(state => {\n  state.allRecords = state.data;\n  return state;\n});```### Remove data from a Collection\n\nYou can remove an individual value by key:```js\ncollections.remove('my-collection', 'commcare-fhir-value-mappings');```\n\nYou can also use patterns to delete multiple values at a time:```js\ncollections.remove('my-collection', '2024*');```## Filters, Limits & Cursors\n\nAs well as filtering keys with patterns, you can filter by created date:```js\ncollections.each(\n  'my-collection',\n  { key: '2024*', createdAfter: '20240601' },\n  (state, value, key) => {\n    console.log(value);\n  }\n);```\n\nYou can use `createdBefore` and `createdAfter` dates, which must be ISO 1806\nformatted strings. The `createdBefore` timestamp will match all dates less than\nor equal to ( {\n  // Write the cursor (if any) back to state for next time\n  state.cursor = state.data.cursor;\n  return state;\n});",
              "metadata": {
                "doc_title": "collections",
                "docs_type": "adaptor_docs"
              },
              "score": 0.763122559
            },
            {
              "text": "Learn more about how data is structured in Salesforce at the links below:\n\n- How data is organized in Salesforce:\n  https://help.salesforce.com/s/articleView?id=sf.basics_organize_data.htm&type=5\n- Salesforce objects: https://www.salesforcetutorial.com/salesforce-objects/## Integration Use Cases\n\nSalesforce may be used to manage an organization's programs, operations,\nfundraising, and more. Therefore integrations with 3rd-party apps is a common\nrequirement.\n\nExample user stories:\n\n- As a program or M&E manager working in areas with limited internet\n  connectivity, I would like to collect data on a mobile applicaiton that\n  supports offline data capture, but then sync the data collected to Salesforce\n  so that I can centrally monitor field activities and analyze data collected to\n  evaluate program impact.\n- As a fundraiser at an NGO, I would like to see all donor information tracked\n  in Salesforce so that I can better monitor fundraising activities, nurture\n  relationships with all funders, and manage campaigns.",
              "metadata": {
                "doc_title": "salesforce",
                "docs_type": "adaptor_docs"
              },
              "score": 0.844299436
            }
          ],
          "search_results_sections": [
            "collections",
            "surveycto",
            "salesforce",
            "job-writing-guide"
          ],
          "search_queries": [
            {
              "query": "salesforce",
              "doc_type": "adaptor_docs"
            },
            {
              "query": "get function filter by date",
              "doc_type": null
            }
          ],
          "config_version": 1,
          "prompts_version": 1,
          "usage": {
            "needs_docs": {
              "input_tokens": 187,
              "output_tokens": 4,
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 0,
              "cache_creation": {
                "ephemeral_5m_input_tokens": 0,
                "ephemeral_1h_input_tokens": 0
              },
              "service_tier": "standard"
            },
            "generate_queries": {
              "input_tokens": 363,
              "output_tokens": 45,
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 0,
              "cache_creation": {
                "ephemeral_5m_input_tokens": 0,
                "ephemeral_1h_input_tokens": 0
              },
              "service_tier": "standard"
            }
          }
        }
      }
    }
  },
  {
    "question": "How do I add my input data to a collection? Use the date and id for the key",
    "fullResult": {
      "response": "To add your input data to a collection using the date and id for the key, use this code:\n\n```js\ncollections.set('my-collection', item => `${item.date}-${item.id}`, $.data);\n```\n\nThis will:\n- Store each item from your input data array\n- Generate keys like `5901257-5901257` and `20240213-0183216`\n- Use the date and id properties from each item to create the key",
      "suggested_code": null,
      "history": [
        {
          "role": "user",
          "content": "How do I add my input data to a collection? Use the date and id for the key"
        },
        {
          "role": "assistant",
          "content": "To add your input data to a collection using the date and id for the key, use this code:\n\n```js\ncollections.set('my-collection', item => `${item.date}-${item.id}`, $.data);\n```\n\nThis will:\n- Store each item from your input data array\n- Generate keys like `5901257-5901257` and `20240213-0183216`\n- Use the date and id properties from each item to create the key"
        }
      ],
      "usage": {
        "cache_creation_input_tokens": 2732,
        "cache_read_input_tokens": 1295,
        "input_tokens": 637,
        "output_tokens": 163
      },
      "meta": {
        "rag": {
          "search_results": [
            {
              "text": "---\ntitle: OpenIMIS Adaptor\n---## About OpenIMIS\n\n[OpenIMIS (Open Insurance Management Information System)](https://openimis.org/) is an open-source software solution designed to manage health financing schemes such as health insurance, results-based financing, and universal health coverage.## Integration Options\n\nOpenIMIS supports 2 primary integration options with OpenFn:\n\n1. **Rest API:** OpenIMIS has a REST API that enables external services like OpenFn to pull data from OpenIMIS, or push data from external apps to OpenIMIS. This option is suited for scheduled, bulk syncs or workflows that must update data in OpenIMIS with external information. See [functions](/adaptors/packages/openimis-docs) for more on how to use this adaptor to work with the API.\n\n2. **Webhook:** OpenIMIS does not natively support webhooks as a standard feature. However, integrations and custom implementations can enable webhook-like behavior. More details can be found on the OpenMRS [documentation page​](https://wiki.openmrs.org/).",
              "metadata": {
                "doc_title": "openimis",
                "docs_type": "adaptor_docs"
              },
              "score": 0.784668
            },
            {
              "text": "More details can be found on the OpenMRS [documentation page​](https://wiki.openmrs.org/).## Authentication\n\nWhen integrating with OpenMRS via OpenFn, **Basic Authentication** is supported. See this adaptor's [Configuration docs](/adaptors/packages/openmrs-configuration-schema) for more on the required authentication parameters.\n\nSee platform docs on [managing credentials](documentation/manage-projects/manage-credentials) for how to configure a credential in OpenFn. If working locally or if using a Raw JSON credential type, then your configuration will look something like this:```\n{\n  \"instanceUrl\": \"http://openmrs.com/instance/url\",\n  \"password\":\"test\",\n  \"username\":\"test\"\n}\n```### Helpful Links\n\n1. [OpenMRS Developer Guide](https://openmrs.atlassian.net/wiki/spaces/docs/pages/25476048/Developer+Guide)\n2. Community Forums: [OpenMRS Talk](https://talk.openmrs.org/)",
              "metadata": {
                "doc_title": "openmrs",
                "docs_type": "adaptor_docs"
              },
              "score": 0.778442383
            },
            {
              "text": "---\ntitle: OpenMRS Adaptor\n---## About OpenMRS\n\n[OpenMRS (Open Medical Record System)](https://openmrs.org/) is an open-source platform designed to manage electronic medical records (EMRs) in low-resource environments. It provides a framework that allows developers to extend its core functionality through custom modules and APIs.## Integration Options\n\n**1. Rest API:** OpenMRS offers a REST API that enables external applications to interact with its database and perform bulk operations. This option is ideal for applications requiring scheduled or bulk synchronization with OpenMRS. Refer to the OpenMRS REST API [documentation](https://wiki.openmrs.org/) for detailed guidelines on endpoints and payload formats.\n\n**2. Webhook:** OpenMRS does not natively support webhooks as a standard feature. However, the platform is highly extensible and allows for customization through its module system. More details can be found on the OpenMRS [documentation page​](https://wiki.openmrs.org/).",
              "metadata": {
                "doc_title": "openmrs",
                "docs_type": "adaptor_docs"
              },
              "score": 0.83239758
            },
            {
              "text": "Detailed usage examples are provided below.### Set some data in a Collection\n\nThe Collection API allows you to set a JSON object (or any primitive JS value)\nunder a given key:```js\ncollections.set('my-collection', 'commcare-fhir-value-mappings', {\n  current_smoker: {\n    system: 'http://snomed.info/sct',\n    code: '77176002',\n    display: 'Smoker',\n  },\n  /* ... */\n});```\n\nYou can also pass an array of items for a batch-set. When setting multiple\nvalues, you need to set a key generator function to calculate a key for each\nitem, like this:```js\ncollections.set('my-favourite-footballer', value => value.id, [\n  {\n    id: 'player01',\n    name: 'Lamine Yamal',\n    /* other patient details */\n  },\n  {\n    id: 'player02',\n    name: 'Aitana Bonmati',\n    /* other patient details */\n  },\n  /* More patients {}, {} */\n]);",
              "metadata": {
                "doc_title": "collections",
                "docs_type": "adaptor_docs"
              },
              "score": 0.80670166
            },
            {
              "text": "ocumentation/manage-projects/manage-credentials) for how to configure a credential in OpenFn. If working locally or if using a Raw JSON credential type, then your configuration will look something like this:```\n{\n  \"instanceUrl\": \"http://openmrs.com/instance/url\",\n  \"password\":\"test\",\n  \"username\":\"test\"\n}\n```### Helpful Links\n\n1. [OpenMRS Developer Guide](https://openmrs.atlassian.net/wiki/spaces/docs/pages/25476048/Developer+Guide)\n2. Community Forums: [OpenMRS Talk](https://talk.openmrs.org/)### Implementation Examples\n\n1. OpenFn Prototype for Médecins Sans Frontières (MSF) LIME Project - OpenMRS -> DHIS2 sync: [https://github.com/OpenFn/openfn-lime](https://github.com/OpenFn/openfn-lime)",
              "metadata": {
                "doc_title": "openmrs",
                "docs_type": "adaptor_docs"
              },
              "score": 0.77911377
            },
            {
              "text": "**Example:** Set a number of values using each value's id property as a key```js\ncollections.set('my-collection', (item) => item.id, $.data)```\n**Example:** Set a number of values, generating an id from a string template```js\ncollections.set('my-collection', (item) => `${item.category}-${Date.now()}`, $.data)```\n**Example:** Set a single value with a static key```js\ncollections.set('my-collection', 'city-codes', { NY: 'New York', LDN: 'London' })\n```\n\n* * *##  Interfaces### QueryOptions\n\nQuery options. All dates should be parseable as ISO 8601 strings, see https://simple.wikipedia.org/wiki/ISO_8601\n\n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| key | `string` | key or key pattern to match against. Patterns support wildcards,  eg `2024-01*` |\n| createdBefore | `string` | matches values that were created before the start of the provided date |\n| createdAfter | `string` | matches values that were created after the end of the provided date |\n| limit | `number` | limit the maximum amount of results. If Infinity or unset, all items will be fetched. Default: Infnity. |\n| pageSize | `number` | specify the number of values downloaded per page (or chunk). Default 1000. |\n| cursor | `string` | set the cursor position to start searching from a specific index. |\n\n\n* * *",
              "metadata": {
                "doc_title": "collections",
                "docs_type": "adaptor_functions"
              },
              "score": 0.780151486
            },
            {
              "text": "When setting multiple\nvalues, you need to set a key generator function to calculate a key for each\nitem, like this:```js\ncollections.set('my-favourite-footballer', value => value.id, [\n  {\n    id: 'player01',\n    name: 'Lamine Yamal',\n    /* other patient details */\n  },\n  {\n    id: 'player02',\n    name: 'Aitana Bonmati',\n    /* other patient details */\n  },\n  /* More patients {}, {} */\n]);```\n\nThe key generator is a function which receives each of the values in the\nsupplied values array as an id (so, in the example above, it gets called with\nthe `player01` object, then the `player02` object, and so on). For each value,\nit should return a string key, under which it will be saved in the collection.\n\nYou can use Javascript template literals to easily generate key values which\ninclude a mixture of static and dynamic values:```js\ncollections.set(\n  'my-favourite-footballer',\n  value => `${value.createdDate}-${value.region}-${value.name}`\n  $.data\n),",
              "metadata": {
                "doc_title": "collections",
                "docs_type": "adaptor_docs"
              },
              "score": 0.785217404
            },
            {
              "text": "You can use Javascript template literals to easily generate key values which\ninclude a mixture of static and dynamic values:```js\ncollections.set(\n  'my-favourite-footballer',\n  value => `${value.createdDate}-${value.region}-${value.name}`\n  $.data\n),```\n\nIn this example, the `createdDate`, `region` and `name` properties will be read\nfrom each value and assembled into a key-string, separated by dashes. This\ntechnique creates keys that are easily sorted by date.### Getting data from a Collection\n\nTo retrieve multiple items from a Collection, we generally recommend using the\n`each()` function.\n\n`each()` will stream each value individually, greatly reducing the memory\noverhead of downloading a large amount of data to the client.```js\ncollections.each('my-collection', '2024*', (state, value, key) => {\n  console.log(value);\n  // No need to return state here\n});",
              "metadata": {
                "doc_title": "collections",
                "docs_type": "adaptor_docs"
              },
              "score": 0.79675293
            },
            {
              "text": "---\ntitle: OpenLMIS Adaptor\n---## About OpenLMIS\n\n[OpenLMIS (Open Logistics Management Information System)](https://openlmis.org/) is an open-source, electronic logistics management information system designed to improve the management and distribution of health commodities. It enables supply chain management, providing visibility and accuracy in inventory tracking, order management, and reporting.## Integration Options\n\n**Rest API:** OpenLMIS has a REST API that enables external services like OpenFn to pull data from OpenLMIS, or push data from external apps to OpenLMIS. This option is suited for scheduled, bulk syncs or workflows that must update data in OpenLMIS with external information. See [functions](/adaptors/packages/openlmis-docs) for more on how to use this adaptor to work with the API.",
              "metadata": {
                "doc_title": "openlmis",
                "docs_type": "adaptor_docs"
              },
              "score": 0.781921387
            },
            {
              "text": "The example below fetches values from the `openfn-patient-registrations`\ncollection and saves them onto state for further processing:```js\ncollections.get('openfn-patient-registrations', '2024*').then(state => {\n  state.registrationsThisYear = state.data;\n  return state;\n});```\n\nReturned items are written to state.data as an array of `[{ key, value }]`\npairs:```js\n{\n  \"data\": {\n    \"20240102-5901257\": {\n      \"name\": \"Tom Waits\",\n      \"id\": \"5901257\",\n    },\n    \"20240213-0183216\": {\n      \"name\": \"Billie Holiday\",\n      \"id\": \"0183216\",\n    }\n  }\n}```\n\nIf fetching a single item (i.e. no `*` in the key), it will be written directly\nto `state.data` with no key:```js\n{\n  \"data\": {\n    \"name\": \"Billie Holiday\",\n    \"id\": \"0183216\",\n  }\n}```\n\nEvery key permanently saves its creation date, so as well as fetching by\nkey-pattern, you can also filter keys by date. This example fetches all keys\ncreated before 30th September 2024:",
              "metadata": {
                "doc_title": "collections",
                "docs_type": "general_docs"
              },
              "score": 0.783447385
            }
          ],
          "search_results_sections": [
            "openlmis",
            "collections",
            "openmrs",
            "openimis"
          ],
          "search_queries": [
            {
              "query": "openmrs",
              "doc_type": "adaptor_docs"
            },
            {
              "query": "add data to collection using date and id as key",
              "doc_type": null
            }
          ],
          "config_version": 1,
          "prompts_version": 1,
          "usage": {
            "needs_docs": {
              "input_tokens": 171,
              "output_tokens": 4,
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 0,
              "cache_creation": {
                "ephemeral_5m_input_tokens": 0,
                "ephemeral_1h_input_tokens": 0
              },
              "service_tier": "standard"
            },
            "generate_queries": {
              "input_tokens": 347,
              "output_tokens": 51,
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 0,
              "cache_creation": {
                "ephemeral_5m_input_tokens": 0,
                "ephemeral_1h_input_tokens": 0
              },
              "service_tier": "standard"
            }
          }
        }
      }
    }
  },
  {
    "question": "can you fill out this code for me?",
    "fullResult": {
      "response": "Here's the completed code to create a FHIR patient and add it to a bundle:\n\n```js\nfn(state => {\n  const input = state.data;\n  \n  // Create a FHIR patient resource\n  state.patient = {\n    resourceType: 'Patient',\n    id: 'patient-001', // You may want to generate this dynamically\n    identifier: [\n      {\n        system: 'https://fhir.kemkes.go.id/id/nik',\n        value: input.nik || 'default-nik'\n      }\n    ],\n    name: [\n      {\n        use: 'official',\n        family: input.lastName || 'Unknown',\n        given: [input.firstName || 'Unknown']\n      }\n    ],\n    gender: input.gender || 'unknown',\n    birthDate: input.birthDate || null,\n    active: true\n  };\n  \n  return state;\n});\n\nfn(state => {\n  // Create a new FHIR bundle\n  state.bundle = {\n    resourceType: 'Bundle',\n    type: 'collection',\n    entry: []\n  };\n  \n  // Add the patient to the bundle\n  state.bundle.entry.push({\n    resource: state.patient,\n    request: {\n      method: 'POST',\n      url: 'Patient'\n    }\n  });\n  \n  return state;\n});\n```\n\nThis code:\n1. Creates a FHIR Patient resource using data from `state.data`\n2. Creates a FHIR Bundle\n3. Adds the patient to the bundle as an entry\n\nYou'll need to adjust the field mappings based on your actual input data structure.",
      "suggested_code": null,
      "history": [
        {
          "role": "user",
          "content": "can you fill out this code for me?"
        },
        {
          "role": "assistant",
          "content": "Here's the completed code to create a FHIR patient and add it to a bundle:\n\n```js\nfn(state => {\n  const input = state.data;\n  \n  // Create a FHIR patient resource\n  state.patient = {\n    resourceType: 'Patient',\n    id: 'patient-001', // You may want to generate this dynamically\n    identifier: [\n      {\n        system: 'https://fhir.kemkes.go.id/id/nik',\n        value: input.nik || 'default-nik'\n      }\n    ],\n    name: [\n      {\n        use: 'official',\n        family: input.lastName || 'Unknown',\n        given: [input.firstName || 'Unknown']\n      }\n    ],\n    gender: input.gender || 'unknown',\n    birthDate: input.birthDate || null,\n    active: true\n  };\n  \n  return state;\n});\n\nfn(state => {\n  // Create a new FHIR bundle\n  state.bundle = {\n    resourceType: 'Bundle',\n    type: 'collection',\n    entry: []\n  };\n  \n  // Add the patient to the bundle\n  state.bundle.entry.push({\n    resource: state.patient,\n    request: {\n      method: 'POST',\n      url: 'Patient'\n    }\n  });\n  \n  return state;\n});\n```\n\nThis code:\n1. Creates a FHIR Patient resource using data from `state.data`\n2. Creates a FHIR Bundle\n3. Adds the patient to the bundle as an entry\n\nYou'll need to adjust the field mappings based on your actual input data structure."
        }
      ],
      "usage": {
        "cache_creation_input_tokens": 12652,
        "cache_read_input_tokens": 1295,
        "input_tokens": 703,
        "output_tokens": 467
      },
      "meta": {
        "rag": {
          "search_results": [
            {
              "text": "Data was taken from the[Satusehate Postman Collection](https://www.postman.com/satusehat/satusehat-public/request/56uan96/encounter-create)```js\npost('Encounter', {\n  resourceType: 'Encounter',\n  status: 'arrived',\n  class: {\n    system: 'http://terminology.hl7.org/CodeSystem/v3-ActCode',\n    code: 'AMB',\n    display: 'ambulatory',\n  },\n  subject: {\n    reference: 'Patient/100000030009',\n    display: 'Budi Santoso',\n  },\n  participant: [\n    {\n      type: [\n        {\n          coding: [\n            {\n              system:\n                'http://terminology.hl7.org/CodeSystem/v3-ParticipationType',\n              code: 'ATND',\n              display: 'attender',\n            },\n          ],\n        },\n      ],\n      individual: {\n        reference: 'Practitioner/N10000001',\n        display: 'Dokter Bronsig',\n      },\n    },\n  ],\n  period: {\n    start: '2022-06-14T07:00:00+07:00',\n  },\n  location: [\n    {\n      location: {\n        reference: 'Location/b017aa54-f1df-4ec2-9d84-8823815d7228',\n        display:\n          'Ruang 1A, Poliklinik Bedah Rawat Jalan Terpadu, Lantai 2, Gedung G',\n      },\n    },\n  ],\n  statusHistory: [    {\n      status: 'arrived',\n      period: {\n        start: '2022-06-14T07:00:00+07:00',\n      },\n    },\n  ],\n  serviceProvider: {\n    reference: 'Organization/{{Org_id}}',\n  },\n  identifier: [\n    {\n      system: 'http://sys-ids.kemkes.go.id/encounter/{{Org_id}}',\n      value: 'P20240001',\n    },\n  ],\n});```\n\nCheckout Satusehat's\n[Postman Collection](https://www.postman.com/satusehat/satusehat-public/overview)\nfor more examples and resources.",
              "metadata": {
                "doc_title": "satusehat",
                "docs_type": "adaptor_docs"
              },
              "score": 0.74029547
            },
            {
              "text": "This option is suitable for scheduled workflows or those that need to update data in Satusehat with external information.## How to Extract or Modify Satusehat Data\n\n**See the available [helper functions](/adaptors/packages/satusehat-docs)** for\na full list of functions supported by this adaptor for extracting and/or\nmodifying Satusehat data.\n\nTo fetch data from Satusehat via OpenFn, you can:\n\n1. Configure a new workflow with a \"cron\" trigger and define the frequency of\n   your workflow (e.g., daily at 8:00AM)\n2. Add a \"Get data\" step linked to this Satusehat adaptor\n3. Edit the Step and open the Inspector (``) to write a basic job using this\n   adaptor's [GET](/adaptors/packages/satusehat-docs#get) to specify which data\n   you want to extract or \"pull\" from Satusehat\n\nSee [platform docs](/documentation/build/workflows) for more guidance on\nbuilding workflows.",
              "metadata": {
                "doc_title": "satusehat",
                "docs_type": "adaptor_docs"
              },
              "score": 0.751831055
            },
            {
              "text": "For example:```js\naddToBundle({\n  id: 'x',\n  resourceType: 'Patient',\n});```\n\nWill create a state object like this:```json\n{\n  \"bundle\": {\n    \"resourceType\": \"bundle\",\n    \"entry\": [\n      {\n        \"resource\": {\n          \"id\": \"x\",\n          \"resourceType\": \"Patient\"\n        },\n        \"request\": {\n          \"method\": \"PUT\",\n          \"url\": \"Patient/x\"\n        }\n      }\n    ]\n  }\n}```\n\nTo send the Bundle to the FHIR server defined in `state.configuration.baseURL`,\ncall `uploadBundle()`.\n\nYou can pass the name of a key on state to upload a specific bundle:```js\nuploadBundle('patients-bundle');```\n\nOr you can pass your own bundle object in directly:```js\nuploadBundle($.bundle);```## Builder Functions\n\nThe FHIR-4 adaptor provides builder functions which make it easier to define\nFHIR resources.\n\nBuilders provide short-hand properties and default values, reducing the\nboiler-plate needed to create FHIR resources. They also enable code-assist to be\nprovided by code editors.\n\nThe basic pattern is something like this:",
              "metadata": {
                "doc_title": "fhir-4",
                "docs_type": "adaptor_docs"
              },
              "score": 0.797210693
            },
            {
              "text": "Data was taken from the[Satusehate Postman Collection](https://www.postman.com/satusehat/satusehat-public/request/56uan96/encounter-create)```js\npost('Encounter', {\n  resourceType: 'Encounter',\n  status: 'arrived',\n  class: {\n    system: 'http://terminology.hl7.org/CodeSystem/v3-ActCode',\n    code: 'AMB',\n    display: 'ambulatory',\n  },\n  subject: {\n    reference: 'Patient/100000030009',\n    display: 'Budi Santoso',\n  },\n  participant: [\n    {\n      type: [\n        {\n          coding: [\n            {\n              system:\n                'http://terminology.hl7.org/CodeSystem/v3-ParticipationType',\n              code: 'ATND',\n              display: 'attender',\n            },\n          ],\n        },\n      ],\n      individual: {\n        reference: 'Practitioner/N10000001',\n        display: 'Dokter Bronsig',\n      },\n    },\n  ],\n  period: {\n    start: '2022-06-14T07:00:00+07:00',\n  },\n  location: [\n    {\n      location: {\n        reference: 'Location/b017aa54-f1df-4ec2-9d84-8823815d7228',\n        display:\n          'Ruang 1A, Poliklinik Bedah Rawat Jalan Terpadu, Lantai 2, Gedung G',\n      },\n    },\n  ],\n  statusHistory: [",
              "metadata": {
                "doc_title": "satusehat",
                "docs_type": "adaptor_docs"
              },
              "score": 0.78314209
            },
            {
              "text": "---\ntitle: Satusehat Adaptor\n---## About Satusehat\n\n[Satusehat](https://satusehat.kemkes.go.id/platform/docs/id/playbook/introduction/)\nis a health data exchange ecosystem that connects information systems or\napplications from all members of the Indonesian digital health ecosystem\nincluding health facilities, regulators, guarantors, and digital service\nproviders.\n\nSATUSEHAT uses HL7 [FHIR](https://www.hl7.org/fhir/) (Fast Healthcare\nInteroperability Resources) in implementing standard data models and Application\nProgramming Interfaces (APIs).\n\n:::info FHIR\n\nFHIR (Fast Healthcare Interoperability Resources) is a global (international)\nstandard that defines the data format and its elements (called \" resources \")\nand an application programming interface (API ) standard for information\nexchange\n\n:::\n\nThe following example shows a HTTP POST request to creating an `Encounter` FHIR\nresource. Data was taken from the",
              "metadata": {
                "doc_title": "satusehat",
                "docs_type": "adaptor_docs"
              },
              "score": 0.77545166
            },
            {
              "text": "Edit the Step and open the Inspector (``) to write a basic job using this\n   adaptor's [GET](/adaptors/packages/satusehat-docs#get) to specify which data\n   you want to extract or \"pull\" from Satusehat\n\nSee [platform docs](/documentation/build/workflows) for more guidance on\nbuilding workflows.## Authentication\n\n[See Satusehat docs](https://satusehat.kemkes.go.id/platform/docs/id/api-catalogue/authentication/)\nfor the latest on supported authentication methods.\n\nWhen integrating with Satusehat via OpenFn, there are 2 primary authentication\nmethods supported:\n\n1. Basic authentication (requires clientId + clientSecret), or\n2. Access token (requires access token created after authenticating in\n   Satusehat)\n\n**See this adaptor's\n[Configuration docs](/adaptors/packages/satusehat-configuration-schema) for more\non required authentication parameters.**\n\nSee platform docs\n[on managing credentials](/documentation/manage-projects/manage-credentials) for\nhow to configure a credential in OpenFn and see the below Satusehat credential\nexample.\n\n![Satusehat Cred](/img/satusehat_credential_edit.png)\n\nIf you're using the `Raw JSON` credential type, your configuration may look like\nthis:",
              "metadata": {
                "doc_title": "satusehat",
                "docs_type": "adaptor_docs"
              },
              "score": 0.741394103
            },
            {
              "text": "Data was taken from the[Satusehate Postman Collection](https://www.postman.com/satusehat/satusehat-public/request/56uan96/encounter-create)```js\npost('Encounter', {\n  resourceType: 'Encounter',\n  status: 'arrived',\n  class: {\n    system: 'http://terminology.hl7.org/CodeSystem/v3-ActCode',\n    code: 'AMB',\n    display: 'ambulatory',\n  },\n  subject: {\n    reference: 'Patient/100000030009',\n    display: 'Budi Santoso',\n  },\n  participant: [\n    {\n      type: [\n        {\n          coding: [\n            {\n              system:\n                'http://terminology.hl7.org/CodeSystem/v3-ParticipationType',\n              code: 'ATND',\n              display: 'attender',\n            },\n          ],\n        },\n      ],\n      individual: {\n        reference: 'Practitioner/N10000001',\n        display: 'Dokter Bronsig',\n      },\n    },\n  ],\n  period: {\n    start: '2022-06-14T07:00:00+07:00',\n  },\n  location: [\n    {\n      location: {\n        reference: 'Location/b017aa54-f1df-4ec2-9d84-8823815d7228',\n        display:\n          'Ruang 1A, Poliklinik Bedah Rawat Jalan Terpadu, Lantai 2, Gedung G',\n      },\n    },\n  ],\n  statusHistory: [    {\n      status: 'arrived',\n      period: {\n        start: '2022-06-14T07:00:00+07:00',\n      },\n    },\n  ],\n  serviceProvider: {\n    reference: 'Organization/{{Org_id}}',\n  },\n  identifier: [\n    {\n      system: 'http://sys-ids.kemkes.go.id/encounter/{{Org_id}}',\n      value: 'P20240001',\n    },\n  ],\n});```\n\nCheckout Satusehat's\n[Postman Collection](https://www.postman.com/satusehat/satusehat-public/overview)\nfor more examples and resources.## Mapping Satusehat URLs to Adaptor Functions\n\nThe Satusehat adaptor functions provide convenient HTTP method helpers - like\n[`get()`](/adaptors/packages/satusehat-docs#get).\n\nEach takes a path to a FHIR resource, relative to the baseURL in the\nconfiguration file, and a list of query parameters. Some helpers (like `post`)\nalso take a FHIR resource as a JSON object.\n\nFor example, a request to find an\n[encounter by subject](https://www.postman.com/satusehat/satusehat-public/request/ef2ilan/encounter-by-subject)\nrequires a URL like this:",
              "metadata": {
                "doc_title": "satusehat",
                "docs_type": "adaptor_docs"
              },
              "score": 0.795623899
            },
            {
              "text": "-schema) for more\non required authentication parameters.**\n\nSee platform docs\n[on managing credentials](/documentation/manage-projects/manage-credentials) for\nhow to configure a credential in OpenFn and see the below Satusehat credential\nexample.\n\n![Satusehat Cred](/img/satusehat_credential_edit.png)\n\nIf you're using the `Raw JSON` credential type, your configuration may look like\nthis:```json\n{\n  \"clientId\": \"your-client-id\", // e.g 12345678\n  \"clientSecret\": \"your-client-secret-key\", // e.g abcd123456\n  \"baseUrl\": \"your-base-url\", // e.g https://api-satusehat-stg.dto.kemkes.go.id\n  \"accessToken\": \"your-access-token\" // Don't add accessToken if you're using client secret and client id\n}\n```",
              "metadata": {
                "doc_title": "satusehat",
                "docs_type": "adaptor_docs"
              },
              "score": 0.751709
            }
          ],
          "search_results_sections": [
            "satusehat",
            "fhir-4"
          ],
          "search_queries": [
            {
              "query": "satusehat",
              "doc_type": "adaptor_docs"
            },
            {
              "query": "create fhir patient bundle satusehat",
              "doc_type": null
            }
          ],
          "config_version": 1,
          "prompts_version": 1,
          "usage": {
            "needs_docs": {
              "input_tokens": 213,
              "output_tokens": 4,
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 0,
              "cache_creation": {
                "ephemeral_5m_input_tokens": 0,
                "ephemeral_1h_input_tokens": 0
              },
              "service_tier": "standard"
            },
            "generate_queries": {
              "input_tokens": 389,
              "output_tokens": 52,
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 0,
              "cache_creation": {
                "ephemeral_5m_input_tokens": 0,
                "ephemeral_1h_input_tokens": 0
              },
              "service_tier": "standard"
            }
          }
        }
      }
    }
  },
  {
    "question": "What is wrong with this code? I get an error like \"Cannot read properties of\nundefined (reading 'name')\"",
    "fullResult": {
      "response": "The error occurs because `state.data.patients` is undefined or empty. In the first `fn()`, you're trying to access `state.data.patients[0]`, but since your input data is an empty object `{}`, there's no `patients` array.\n\nAdd a safety check:\n\n```js\nfn(state => { \n  state.patient = state.data.patients?.[0]; \n  return state;\n});\n\nfn(state => { \n  if (state.patient?.name) {\n    console.log(state.patient.name);\n  }\n  return state; \n});\n```\n\nAlso note that you forgot to return `state` in your first function - always return state from `fn()`.",
      "suggested_code": null,
      "history": [
        {
          "role": "user",
          "content": "What is wrong with this code? I get an error like \"Cannot read properties of\nundefined (reading 'name')\""
        },
        {
          "role": "assistant",
          "content": "The error occurs because `state.data.patients` is undefined or empty. In the first `fn()`, you're trying to access `state.data.patients[0]`, but since your input data is an empty object `{}`, there's no `patients` array.\n\nAdd a safety check:\n\n```js\nfn(state => { \n  state.patient = state.data.patients?.[0]; \n  return state;\n});\n\nfn(state => { \n  if (state.patient?.name) {\n    console.log(state.patient.name);\n  }\n  return state; \n});\n```\n\nAlso note that you forgot to return `state` in your first function - always return state from `fn()`."
        }
      ],
      "usage": {
        "cache_creation_input_tokens": 9338,
        "cache_read_input_tokens": 1295,
        "input_tokens": 685,
        "output_tokens": 225
      },
      "meta": {
        "rag": {
          "search_results": [
            {
              "text": "There\nare a few reasons why they are popular in modern JavaScript:\n\n- They feel lightweight, with less syntax required\n- They do not have a `this` scope - although this is largely irrelevant to\n  OpenFn programming (and indeed most modern JS frameworks)\n\nArrow functions are always anonymous - they have no name - but they can be\nassigned to variables of course.```js\nfunction upperCase(name) {\n  return name.toUpperCase();\n}\n\nconst getName = () => {\n  return name.toUpperCase();\n};```\n\nAn arrow function can contain a single expression and no body, and will return\nthe expression:```js\nfunction getX() {\n  return x;\n}\n\nconst getX = () => x;```\n\nThis pattern makes arrow functions lightweight and elegant, and aligns nicely\nwith functional programming paradigms.\n\n:::tip Problems returning an object?\n\nAlways wrap objects in brackets when returning an object from an arrow\nexpression:```\npost('wwww', () => ({ id: 'a', name: 'adam' }))",
              "metadata": {
                "doc_title": "javascript",
                "docs_type": "general_docs"
              },
              "score": 0.806579649
            },
            {
              "text": "---\nid: library-intro\ntitle: The Community Job Library\nsidebar_label: Library Examples\nslug: library\n---## A growing knowledge base\n\nThere have been **over 3,000 distinct jobs written** for the OpenFn platform,\ndriving efficiency across the social sector. These jobs have run millions of\ntimes, connecting and automating critical technologies like CommCare, DHIS2,\nSalesforce, Kobo Toolbox, and more.\n\n**90% of at-scale OpenFn customers make their jobs publicly available** so that\nother organizations can learn from their implementations, yet we’re still\nconstantly asked to find examples of jobs that “create DHIS2 entities from\nCommCare cases” or “initiate payments when Kobo submissions arrive”.\n\nThe Job Library is our attempt to make this vast pool of real-world experience\navailable to everyone, automatically collecting and organizing non-sensitive job\nscripts from this diverse community of social sector integration experts to make\ndata integration safer, faster, and more scalable than ever before.",
              "metadata": {
                "doc_title": "library-intro",
                "docs_type": "adaptor_docs"
              },
              "score": 0.748413146
            },
            {
              "text": "This is not meant to be an exhaustive guide,\njust a pointer to some good techniques on some of the newer aspects of the\nlanguage.### Using the `fn(...)` operation from the common adaptor\n\nWe recommend using the `fn(...)` operation to manipulate state and apply custom\nJavaScript to transform, manipulate, and clean data before sending to target\napplications.```js\nfn(state => {\n  //call state to edit\n  //add your custom javascript here to manipulate state\n  return state; //always return state\n});```### Variables: var vs let vs const\n\nJavaScript gives you three different ways to declare variables, and this can be\na bit confusing.\n\n- `var` is a variable that can have its value reassigned. You can re-declare a\n  `var` multiple times.\n- `let` is basically the same as a var, but cannot be redeclared and has subtly\n  different scoping rules.\n- `const` is used for variable whose values do not change.\n\nIt doesn't really matter which style you use (except perhaps if you try to\nassign to a `const`).\n\nMost OpenFn jobs are written in quite a functional style anyway - you may find\nyou don't even need to declare variables.\n\n\nWhat is functional programming?\nFunctional programming is a style of programming, increasingly popular in modern Javascript.\n\nBroadly, the idea is to minimize the usage of control flow statements (like\n`if/else`,`for`) and instead use chains of functions. In functional programming\nwe pass data through a pipeline to get the result we want sound familiar?).",
              "metadata": {
                "doc_title": "javascript",
                "docs_type": "general_docs"
              },
              "score": 0.825927854
            },
            {
              "text": "---\ntitle: Common Adaptor\n---## About OpenFn \"Common\" Language\n\nUse this adaptor to write JavaScript, or to leverage common expressions and\n[helper functions](/adaptors/packages/common-docs) for OpenFn.\n\nThis adaptor is typically used for transforming data in OpenFn workflows that\nautomate \"ETL\" (extract, transform, load) processes. See below examples.```js\n//use fn() to write your own functions\nfn(state => {\n  // write javascript...\n  // ...to do some things to state\n  console.log(state.data); //or to debug\n  return state;\n});``````js\n//use each() to create 1 account for each form\neach(\n  $.forms,\n  create('Account', {\n    Kobo_ID__c: $.data.id,\n    Name: $.data.customer_name,\n    Phone: $.data.customer_phone,\n  })\n);\n```",
              "metadata": {
                "doc_title": "common",
                "docs_type": "adaptor_docs"
              },
              "score": 0.807434142
            },
            {
              "text": "---\ntitle: Claude AI Adaptor\n---## About Claude\n\n[Claude](https://claude.ai/) is an AI assistant built by Anthropic. It provides\na family of large language models (LLMs) developed for natural language\nprocessing tasks such as text generation, summarization, and question answering.\n\nClaude models process text input to generate responses but do not have built-in\nmemory or autonomous decision-making. They can be integrated with external tools\nor APIs to execute actions beyond text-based outputs.## Use OpenFn + LLMs for AI-Driven Workflows\n\nWhile LLMs (like Claude or ChatGPT) can generate insights, recommendations, or\nstructured data, they often **lack direct execution capabilities**—meaning they\nneed an automation system to act on their outputs.\n\n**OpenFn workflows fill this gap by orchestrating actions based on LLM-generated\nresponses.**\n\nRemember that LLMs are imperfect. Learn more about your recommended approach to\nAI in our [Responsible AI Policy](https://www.openfn.org/ai).",
              "metadata": {
                "doc_title": "claude",
                "docs_type": "adaptor_docs"
              },
              "score": 0.730102599
            },
            {
              "text": "In the following sections, special systems will be described.#### Example user stories\n\n1 Logistics Management(LMIS)\n\n- LMIS is an area where a multitude of parallel, overlapping or competing\n  software solutions can be found in a single country\n- Although a basic LMIS configuration based on aggregate data can take you very\n  far, in some cases a transactional LMIS is necessary if you need to track such\n  detailed operations as returns, transfer between facilities, barcode reading,\n  batch and expiry managemen\n- In such a situation...\n\n2 Data Sharing for Health and Nutrition, Water Sanitation and Hygiene Projects\n\n- Case management sytsems such as CommCare are widely preffered in collecting\n  case data(or patient level data) due to its dominance in the sector and easy\n  of adoption. In such scenarios, ...\n\n3 DHIS2 Instance Synchronization\n\n- Different DHIS2 instances in a given organisation or government ministry may\n  be deployed on separate servers which places the need for synchronization in",
              "metadata": {
                "doc_title": "dhis2",
                "docs_type": "adaptor_docs"
              },
              "score": 0.757995665
            },
            {
              "text": "This is\nuseful for running arbitrary code - if you want to drop down to raw JavaScript\nmode, this is how you do it:```js\nfn(state => {\n  // declare a help function\n  const convertToFhir = item => {\n    /* ... */\n  };\n\n  // Map data into a new format with native Javascript functions\n  state.transformed = state.data.map(convertToFhir);\n\n  // Always return the state\n  return state;\n});```\n\nMany other operations provide a callback argument, in which case, your callback\nwill be invoked with state, and most return the final state as a result of the\noperation.\n\nFor example, say you fetch some data from a data source and get back a block of\nJSON. Maybe you want to filter this data before passing it to the next\noperation.\n\nYou might naively try something like this - but it won't work!```js\nget('/data'); // writes to state.data\nstate.data = state.data.filter(/* ... */); // This is invalid!```\n\nYou could use another operation, like `fn` or `each` - and often these work\ngreat!",
              "metadata": {
                "doc_title": "job-writing-guide",
                "docs_type": "general_docs"
              },
              "score": 0.80871588
            },
            {
              "text": "---\ntitle: Javascript Tips\nsidebar_label: Javascript Tips\n---\n\nOpenFn supports all modern JavaScript features.\n\nThis section highlights some useful JavaScript features and operators which\nmight help make your code cleaner. This is not meant to be an exhaustive guide,\njust a pointer to some good techniques on some of the newer aspects of the\nlanguage.### Using the `fn(...)` operation from the common adaptor\n\nWe recommend using the `fn(...)` operation to manipulate state and apply custom\nJavaScript to transform, manipulate, and clean data before sending to target\napplications.```js\nfn(state => {\n  //call state to edit\n  //add your custom javascript here to manipulate state\n  return state; //always return state\n});```",
              "metadata": {
                "doc_title": "javascript",
                "docs_type": "general_docs"
              },
              "score": 0.82257086
            },
            {
              "text": "---\ntitle: OCL Adaptor\n---## About OCL\n\n[OCL (Open Concept Lab)](https://openconceptlab.org/) is an open-source platform that provides a collaborative environment for creating, managing, and sharing standardized healthcare terminologies, dictionaries, and value sets.\n\nRelationships between concepts are defined in OCL as `mappings`. The API supports searching and editing concepts and mappings, building `sources`, and logically grouping concepts and mappings into `collections`. [See OCL docs](https://docs.openconceptlab.org/en/latest/oclapi/overview.html#overview) to learn more, access the [Swagger API](https://api.openconceptlab.org/swagger/), and to learn more about the cloud instance available at [https://openconceptlab.org](https://openconceptlab.org).",
              "metadata": {
                "doc_title": "ocl",
                "docs_type": "adaptor_docs"
              },
              "score": 0.745300412
            }
          ],
          "search_results_sections": [
            "dhis2",
            "job-writing-guide",
            "library-intro",
            "common",
            "ocl",
            "javascript",
            "claude"
          ],
          "search_queries": [
            {
              "query": "language-common@2.0.0 fn function syntax",
              "doc_type": null
            },
            {
              "query": "language-common",
              "doc_type": "adaptor_docs"
            }
          ],
          "config_version": 1,
          "prompts_version": 1,
          "usage": {
            "needs_docs": {
              "input_tokens": 206,
              "output_tokens": 4,
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 0,
              "cache_creation": {
                "ephemeral_5m_input_tokens": 0,
                "ephemeral_1h_input_tokens": 0
              },
              "service_tier": "standard"
            },
            "generate_queries": {
              "input_tokens": 382,
              "output_tokens": 54,
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 0,
              "cache_creation": {
                "ephemeral_5m_input_tokens": 0,
                "ephemeral_1h_input_tokens": 0
              },
              "service_tier": "standard"
            }
          }
        }
      }
    }
  },
  {
    "question": "What is wrong with this code? I get an error like \"fn is not defined\"",
    "fullResult": {
      "response": "The issue is that you're missing the `fn()` wrapper. In OpenFn, you can't just write bare JavaScript code - you need to wrap it in an `fn()` operation.\n\nChange your code to:\n\n```js\nfn(state => {\n  console.log(state.data);\n  return state;\n});\n```\n\nThe `fn()` function is required to execute custom JavaScript in OpenFn jobs. It takes a function that receives the current state and must return the state (potentially modified).",
      "suggested_code": null,
      "history": [
        {
          "role": "user",
          "content": "What is wrong with this code? I get an error like \"fn is not defined\""
        },
        {
          "role": "assistant",
          "content": "The issue is that you're missing the `fn()` wrapper. In OpenFn, you can't just write bare JavaScript code - you need to wrap it in an `fn()` operation.\n\nChange your code to:\n\n```js\nfn(state => {\n  console.log(state.data);\n  return state;\n});\n```\n\nThe `fn()` function is required to execute custom JavaScript in OpenFn jobs. It takes a function that receives the current state and must return the state (potentially modified)."
        }
      ],
      "usage": {
        "cache_creation_input_tokens": 10315,
        "cache_read_input_tokens": 1295,
        "input_tokens": 570,
        "output_tokens": 175
      },
      "meta": {
        "rag": {
          "search_results": [
            {
              "text": "When you want to inspect the content of state in between operations, add an\n`fn()` block with a `console.log`:```js\n// firstOperation(...);\n\nfn(state => {\n  console.log(state);\n  return state;\n});\n\n// secondOperation(...);```##### Create **debug.js** and paste the code below\n\n\n\n  Expand to see debug.js```jsx title=\"debug.js\"\n// Get all posts\nget('posts');\n\n// Get post by index helper function\nfn(state => {\n  // const getPostbyIndex = (index) => dataValue(index)(state);\n  console.log(dataValue(1));\n\n  return { ...state };\n});```##### Run **openfn debug.js -a http -s tmp/state.json**\n\n\n  Expected CLI logs```bash\n[CLI] ✘ TypeError: path.match is not a function\n    at dataPath (/tmp/openfn/repo/node_modules/@openfn/language-common/dist/index.cjs:258:26)\n    at dataValue (/tmp/openfn/repo/node_modules/@openfn/language-common/dist/index.cjs:262:22)\n    at getPostbyIndex (vm:module(0):5:37)\n    at vm:module(0):18:36\n    at /tmp/openfn/repo/node_modules/@openfn/language-common/dist/index.cjs:241:12\n    at file:///home/openfn/.asdf/installs/nodejs/18.12.0/lib/node_modules/@openfn/cli/node_modules/@openfn/runtime/dist/index.js:288:26\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async run (file:///home/openfn/.asdf/installs/nodejs/18.12.0/lib/node_modules/@openfn/cli/node_modules/@openfn/runtime/dist/index.js:269:18)\n    at async executeHandler (file:///home/openfn/.asdf/installs/nodejs/18.12.0/lib/node_modules/@openfn/cli/dist/process/runner.js:388:20)",
              "metadata": {
                "doc_title": "cli-walkthrough",
                "docs_type": "general_docs"
              },
              "score": 0.785949707
            },
            {
              "text": "This is not meant to be an exhaustive guide,\njust a pointer to some good techniques on some of the newer aspects of the\nlanguage.### Using the `fn(...)` operation from the common adaptor\n\nWe recommend using the `fn(...)` operation to manipulate state and apply custom\nJavaScript to transform, manipulate, and clean data before sending to target\napplications.```js\nfn(state => {\n  //call state to edit\n  //add your custom javascript here to manipulate state\n  return state; //always return state\n});```### Variables: var vs let vs const\n\nJavaScript gives you three different ways to declare variables, and this can be\na bit confusing.\n\n- `var` is a variable that can have its value reassigned. You can re-declare a\n  `var` multiple times.\n- `let` is basically the same as a var, but cannot be redeclared and has subtly\n  different scoping rules.\n- `const` is used for variable whose values do not change.\n\nIt doesn't really matter which style you use (except perhaps if you try to\nassign to a `const`).\n\nMost OpenFn jobs are written in quite a functional style anyway - you may find\nyou don't even need to declare variables.\n\n\nWhat is functional programming?\nFunctional programming is a style of programming, increasingly popular in modern Javascript.\n\nBroadly, the idea is to minimize the usage of control flow statements (like\n`if/else`,`for`) and instead use chains of functions. In functional programming\nwe pass data through a pipeline to get the result we want sound familiar?).",
              "metadata": {
                "doc_title": "javascript",
                "docs_type": "general_docs"
              },
              "score": 0.783630371
            },
            {
              "text": "penFn instance. When this\noccurs, the error will be written out in an error object as shown below:```\n[CLI] ✘ Failed to deploy project openfn-data-buffers-prototype:\n{\n  \"errors\": {\n    \"workflows\": {\n      \"1-ingest-messages\": {\n        \"base\": [\n          \"extraneous parameters: workflow_id\"\n        ]\n      },\n      \"2-calculate-indicators\": {\n        \"base\": [\n          \"extraneous parameters: workflow_id\"\n        ]\n      }\n    }\n  }\n```#### Solution\n\nRun `openfn pull` to update your local instance and keep IDs in sync,\nincorporate your changes and run `openfn deploy` again.## Other Versions\n\n- [Portability Spec v2](portability-versions#v2)\n- [Portability Spec v1](portability-versions#v1)",
              "metadata": {
                "doc_title": "portability",
                "docs_type": "general_docs"
              },
              "score": 0.78918457
            },
            {
              "text": "---\nid: library-intro\ntitle: The Community Job Library\nsidebar_label: Library Examples\nslug: library\n---## A growing knowledge base\n\nThere have been **over 3,000 distinct jobs written** for the OpenFn platform,\ndriving efficiency across the social sector. These jobs have run millions of\ntimes, connecting and automating critical technologies like CommCare, DHIS2,\nSalesforce, Kobo Toolbox, and more.\n\n**90% of at-scale OpenFn customers make their jobs publicly available** so that\nother organizations can learn from their implementations, yet we’re still\nconstantly asked to find examples of jobs that “create DHIS2 entities from\nCommCare cases” or “initiate payments when Kobo submissions arrive”.\n\nThe Job Library is our attempt to make this vast pool of real-world experience\navailable to everyone, automatically collecting and organizing non-sensitive job\nscripts from this diverse community of social sector integration experts to make\ndata integration safer, faster, and more scalable than ever before.",
              "metadata": {
                "doc_title": "library-intro",
                "docs_type": "adaptor_docs"
              },
              "score": 0.748413146
            },
            {
              "text": "---\ntitle: Common Adaptor\n---## About OpenFn \"Common\" Language\n\nUse this adaptor to write JavaScript, or to leverage common expressions and\n[helper functions](/adaptors/packages/common-docs) for OpenFn.\n\nThis adaptor is typically used for transforming data in OpenFn workflows that\nautomate \"ETL\" (extract, transform, load) processes. See below examples.```js\n//use fn() to write your own functions\nfn(state => {\n  // write javascript...\n  // ...to do some things to state\n  console.log(state.data); //or to debug\n  return state;\n});``````js\n//use each() to create 1 account for each form\neach(\n  $.forms,\n  create('Account', {\n    Kobo_ID__c: $.data.id,\n    Name: $.data.customer_name,\n    Phone: $.data.customer_phone,\n  })\n);\n```",
              "metadata": {
                "doc_title": "common",
                "docs_type": "adaptor_docs"
              },
              "score": 0.744995177
            },
            {
              "text": "---\ntitle: Claude AI Adaptor\n---## About Claude\n\n[Claude](https://claude.ai/) is an AI assistant built by Anthropic. It provides\na family of large language models (LLMs) developed for natural language\nprocessing tasks such as text generation, summarization, and question answering.\n\nClaude models process text input to generate responses but do not have built-in\nmemory or autonomous decision-making. They can be integrated with external tools\nor APIs to execute actions beyond text-based outputs.## Use OpenFn + LLMs for AI-Driven Workflows\n\nWhile LLMs (like Claude or ChatGPT) can generate insights, recommendations, or\nstructured data, they often **lack direct execution capabilities**—meaning they\nneed an automation system to act on their outputs.\n\n**OpenFn workflows fill this gap by orchestrating actions based on LLM-generated\nresponses.**\n\nRemember that LLMs are imperfect. Learn more about your recommended approach to\nAI in our [Responsible AI Policy](https://www.openfn.org/ai).",
              "metadata": {
                "doc_title": "claude",
                "docs_type": "adaptor_docs"
              },
              "score": 0.730102599
            },
            {
              "text": "---\ntitle: Javascript Tips\nsidebar_label: Javascript Tips\n---\n\nOpenFn supports all modern JavaScript features.\n\nThis section highlights some useful JavaScript features and operators which\nmight help make your code cleaner. This is not meant to be an exhaustive guide,\njust a pointer to some good techniques on some of the newer aspects of the\nlanguage.### Using the `fn(...)` operation from the common adaptor\n\nWe recommend using the `fn(...)` operation to manipulate state and apply custom\nJavaScript to transform, manipulate, and clean data before sending to target\napplications.```js\nfn(state => {\n  //call state to edit\n  //add your custom javascript here to manipulate state\n  return state; //always return state\n});```",
              "metadata": {
                "doc_title": "javascript",
                "docs_type": "general_docs"
              },
              "score": 0.784912
            },
            {
              "text": "When you want to inspect the content of state in between operations, add an\n`fn()` block with a `console.log`:```js\n// firstOperation(...);\n\nfn(state => {\n  console.log(state);\n  return state;\n});\n\n// secondOperation(...);```##### Create **debug.js** and paste the code below\n\n\n\n  Expand to see debug.js```jsx title=\"debug.js\"\n// Get all posts\nget('posts');\n\n// Get post by index helper function\nfn(state => {\n  // const getPostbyIndex = (index) => dataValue(index)(state);\n  console.log(dataValue(1));\n\n  return { ...state };\n});```##### Run **openfn debug.js -a http -s tmp/state.json**\n\n\n  Expected CLI logs```bash\n[CLI] ✘ TypeError: path.match is not a function\n    at dataPath (/tmp/openfn/repo/node_modules/@openfn/language-common/dist/index.cjs:258:26)\n    at dataValue (/tmp/openfn/repo/node_modules/@openfn/language-common/dist/index.cjs:262:22)\n    at getPostbyIndex (vm:module(0):5:37)\n    at vm:module(0):18:36\n    at /tmp/openfn/repo/node_modules/@openfn/language-common/dist/index.cjs:241:12\n    at file:///home/openfn/.asdf/installs/nodejs/18.12.0/lib/node_modules/@openfn/cli/node_modules/@openfn/runtime/dist/index.js:288:26\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async run (file:///home/openfn/.asdf/installs/nodejs/18.12.0/lib/node_modules/@openfn/cli/node_modules/@openfn/runtime/dist/index.js:269:18)\n    at async executeHandler (file:///home/openfn/.asdf/installs/nodejs/18.12.0/lib/node_modules/@openfn/cli/dist/process/runner.js:388:20)```\n\n\n\nAs you can see from our logs that helper function `dataValue` has a TypeError,\nto troubleshoot this you can go to the documentation for **dataValue ->\n[docs.openfn.org/adaptors/packages/common-docs/#datavaluepath--operation](/adaptors/packages/common-docs/#datavaluepath--operation)\n**\n\nAccording to the docs, dataValue takes a path as input, which is of the string\ntype. But in our operation we were passing an integer, that’s why we have a\n_TypeError_. You can fix the error by passing a string in dataValue i.e\n`console.log(dataValue(“1”))`\n\n\n  Expected CLI logs",
              "metadata": {
                "doc_title": "cli-walkthrough",
                "docs_type": "general_docs"
              },
              "score": 0.784912109
            },
            {
              "text": "In the following sections, special systems will be described.#### Example user stories\n\n1 Logistics Management(LMIS)\n\n- LMIS is an area where a multitude of parallel, overlapping or competing\n  software solutions can be found in a single country\n- Although a basic LMIS configuration based on aggregate data can take you very\n  far, in some cases a transactional LMIS is necessary if you need to track such\n  detailed operations as returns, transfer between facilities, barcode reading,\n  batch and expiry managemen\n- In such a situation...\n\n2 Data Sharing for Health and Nutrition, Water Sanitation and Hygiene Projects\n\n- Case management sytsems such as CommCare are widely preffered in collecting\n  case data(or patient level data) due to its dominance in the sector and easy\n  of adoption. In such scenarios, ...\n\n3 DHIS2 Instance Synchronization\n\n- Different DHIS2 instances in a given organisation or government ministry may\n  be deployed on separate servers which places the need for synchronization in",
              "metadata": {
                "doc_title": "dhis2",
                "docs_type": "adaptor_docs"
              },
              "score": 0.757995665
            },
            {
              "text": "---\ntitle: OCL Adaptor\n---## About OCL\n\n[OCL (Open Concept Lab)](https://openconceptlab.org/) is an open-source platform that provides a collaborative environment for creating, managing, and sharing standardized healthcare terminologies, dictionaries, and value sets.\n\nRelationships between concepts are defined in OCL as `mappings`. The API supports searching and editing concepts and mappings, building `sources`, and logically grouping concepts and mappings into `collections`. [See OCL docs](https://docs.openconceptlab.org/en/latest/oclapi/overview.html#overview) to learn more, access the [Swagger API](https://api.openconceptlab.org/swagger/), and to learn more about the cloud instance available at [https://openconceptlab.org](https://openconceptlab.org).",
              "metadata": {
                "doc_title": "ocl",
                "docs_type": "adaptor_docs"
              },
              "score": 0.745300412
            }
          ],
          "search_results_sections": [
            "ocl",
            "claude",
            "library-intro",
            "javascript",
            "common",
            "cli-walkthrough",
            "portability",
            "dhis2"
          ],
          "search_queries": [
            {
              "query": "language-common@2.0.0 fn is not defined error",
              "doc_type": null
            },
            {
              "query": "language-common",
              "doc_type": "adaptor_docs"
            }
          ],
          "config_version": 1,
          "prompts_version": 1,
          "usage": {
            "needs_docs": {
              "input_tokens": 168,
              "output_tokens": 4,
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 0,
              "cache_creation": {
                "ephemeral_5m_input_tokens": 0,
                "ephemeral_1h_input_tokens": 0
              },
              "service_tier": "standard"
            },
            "generate_queries": {
              "input_tokens": 344,
              "output_tokens": 56,
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 0,
              "cache_creation": {
                "ephemeral_5m_input_tokens": 0,
                "ephemeral_1h_input_tokens": 0
              },
              "service_tier": "standard"
            }
          }
        }
      }
    }
  },
  {
    "question": "Why does the http result not get written to my state?",
    "fullResult": {
      "response": "Your HTTP request isn't getting written to state because you're not returning the result of the `http.get()` call. In your current code:\n\n```js\nfn(s => { \n  http.get('https://jsonplaceholder.typicode.com/todos/1') \n  return s; \n})\n```\n\nYou're calling `http.get()` but not doing anything with its result, and you're returning the original state `s`.\n\nTo fix this, you have two options:\n\n**Option 1: Use `http.get()` directly (recommended)**\n```js\nhttp.get('https://jsonplaceholder.typicode.com/todos/1')\n```\n\n**Option 2: If you need to use it inside `fn()`, return the operation**\n```js\nfn(s => http.get('https://jsonplaceholder.typicode.com/todos/1')(s))\n```\n\nThe first option is simpler and follows OpenFn best practices. The `http.get()` operation will automatically write the response to `state.data` and include the full response details in `state.response`.",
      "suggested_code": null,
      "history": [
        {
          "role": "user",
          "content": "Why does the http result not get written to my state?"
        },
        {
          "role": "assistant",
          "content": "Your HTTP request isn't getting written to state because you're not returning the result of the `http.get()` call. In your current code:\n\n```js\nfn(s => { \n  http.get('https://jsonplaceholder.typicode.com/todos/1') \n  return s; \n})\n```\n\nYou're calling `http.get()` but not doing anything with its result, and you're returning the original state `s`.\n\nTo fix this, you have two options:\n\n**Option 1: Use `http.get()` directly (recommended)**\n```js\nhttp.get('https://jsonplaceholder.typicode.com/todos/1')\n```\n\n**Option 2: If you need to use it inside `fn()`, return the operation**\n```js\nfn(s => http.get('https://jsonplaceholder.typicode.com/todos/1')(s))\n```\n\nThe first option is simpler and follows OpenFn best practices. The `http.get()` operation will automatically write the response to `state.data` and include the full response details in `state.response`."
        }
      ],
      "usage": {
        "cache_creation_input_tokens": 9570,
        "cache_read_input_tokens": 1295,
        "input_tokens": 616,
        "output_tokens": 309
      },
      "meta": {
        "rag": {
          "search_results": [
            {
              "text": "---\ntitle: Common Adaptor\n---## About OpenFn \"Common\" Language\n\nUse this adaptor to write JavaScript, or to leverage common expressions and\n[helper functions](/adaptors/packages/common-docs) for OpenFn.\n\nThis adaptor is typically used for transforming data in OpenFn workflows that\nautomate \"ETL\" (extract, transform, load) processes. See below examples.```js\n//use fn() to write your own functions\nfn(state => {\n  // write javascript...\n  // ...to do some things to state\n  console.log(state.data); //or to debug\n  return state;\n});``````js\n//use each() to create 1 account for each form\neach(\n  $.forms,\n  create('Account', {\n    Kobo_ID__c: $.data.id,\n    Name: $.data.customer_name,\n    Phone: $.data.customer_phone,\n  })\n);\n```",
              "metadata": {
                "doc_title": "common",
                "docs_type": "adaptor_docs"
              },
              "score": 0.744995177
            },
            {
              "text": "However, if you ever find\nyourself in a situation where you absolutely need to use a nested operation, you\nshould pass state into it directly, for example:```js\nget('/patients', { headers: { 'content-type': 'application/json' } }, state => {\n  each('$.data.patients[*]', (item, index) => {\n    item.id = `item-${index}`;\n  })(state); // Immediately invoke the Operation and pass state into it. This is naughty!\n});\npost('/patients', dataValue('patients'));```\n\nTo be clear, this is considered an anti-pattern and should not be used except in\nemergencies.## Reading state lazily\n\nA common problem in OpenFn coding is getting hold of the right state value at\nthe right time.\n\nConsider this code:```js\nget('/some-data');\npost('/some-other-data', state.data);",
              "metadata": {
                "doc_title": "job-writing-guide",
                "docs_type": "general_docs"
              },
              "score": 0.799743652
            },
            {
              "text": "---\ntitle: Claude AI Adaptor\n---## About Claude\n\n[Claude](https://claude.ai/) is an AI assistant built by Anthropic. It provides\na family of large language models (LLMs) developed for natural language\nprocessing tasks such as text generation, summarization, and question answering.\n\nClaude models process text input to generate responses but do not have built-in\nmemory or autonomous decision-making. They can be integrated with external tools\nor APIs to execute actions beyond text-based outputs.## Use OpenFn + LLMs for AI-Driven Workflows\n\nWhile LLMs (like Claude or ChatGPT) can generate insights, recommendations, or\nstructured data, they often **lack direct execution capabilities**—meaning they\nneed an automation system to act on their outputs.\n\n**OpenFn workflows fill this gap by orchestrating actions based on LLM-generated\nresponses.**\n\nRemember that LLMs are imperfect. Learn more about your recommended approach to\nAI in our [Responsible AI Policy](https://www.openfn.org/ai).",
              "metadata": {
                "doc_title": "claude",
                "docs_type": "adaptor_docs"
              },
              "score": 0.730102599
            },
            {
              "text": "In the following sections, special systems will be described.#### Example user stories\n\n1 Logistics Management(LMIS)\n\n- LMIS is an area where a multitude of parallel, overlapping or competing\n  software solutions can be found in a single country\n- Although a basic LMIS configuration based on aggregate data can take you very\n  far, in some cases a transactional LMIS is necessary if you need to track such\n  detailed operations as returns, transfer between facilities, barcode reading,\n  batch and expiry managemen\n- In such a situation...\n\n2 Data Sharing for Health and Nutrition, Water Sanitation and Hygiene Projects\n\n- Case management sytsems such as CommCare are widely preffered in collecting\n  case data(or patient level data) due to its dominance in the sector and easy\n  of adoption. In such scenarios, ...\n\n3 DHIS2 Instance Synchronization\n\n- Different DHIS2 instances in a given organisation or government ministry may\n  be deployed on separate servers which places the need for synchronization in",
              "metadata": {
                "doc_title": "dhis2",
                "docs_type": "adaptor_docs"
              },
              "score": 0.757995665
            },
            {
              "text": "es the following keys to state:\n\n| State Key | Description |\n| --- | --- |\n| data | the parsed response body |\n| response | the response from the HTTP server, including headers, statusCode, body, etc |\n| references | an array of all previous data objects used in the Job |\n**Example**```js\nsendBirthNotification({\n  registry_code: 'abc123',\n  child: {},\n  mother: {},\n  father: {},\n})\n```\n\n* * *##  Interfaces### HttpState\n\n/**\nState object\n\n**Properties**\n\n| Name | Description |\n| --- | --- |\n| data | the parsed response body |\n| response | the response from the HTTP server, including headers, statusCode, body, etc |\n| references | an array of all previous data objects used in the Job |\n\n\n* * *",
              "metadata": {
                "doc_title": "ghana-bdr",
                "docs_type": "adaptor_functions"
              },
              "score": 0.78302
            },
            {
              "text": "Best practice is to include a final state cleanup step that removes any datathat should not persist between runs or be output (like PII), for example:\n\n    // get data from a data source\n    get('https://jsonplaceholder.typicode.com/users')\n\n    // store retrieved data in state for use later in job\n    fn(state => {\n        state.users = state.data;\n      return state;\n    });\n\n    // get more data from another data source\n    get('https://jsonplaceholder.typicode.com/posts')\n\n    // store additional retrieved data in state for use later in job\n    fn(state => {\n      state.posts = state.data;\n      return state;\n    });\n\n    // compare data\n    fn(state => {\n      if (state.users.length > state.posts.length) {\n        // do something based on the comparison\n      }\n      return state;\n    });\n\n    // cleanup state at the end before finshing job\n    fn(state => {\n      state.data = null\n      state.users = null\n      state.posts = null\n   \n      return state;\n    });",
              "metadata": {
                "doc_title": "state",
                "docs_type": "general_docs"
              },
              "score": 0.790283084
            },
            {
              "text": "Best practice is to include a final state cleanup step that removes any datathat should not persist between runs or be output (like PII), for example:\n\n    // get data from a data source\n    get('https://jsonplaceholder.typicode.com/users')\n\n    // store retrieved data in state for use later in job\n    fn(state => {\n        state.users = state.data;\n      return state;\n    });\n\n    // get more data from another data source\n    get('https://jsonplaceholder.typicode.com/posts')\n\n    // store additional retrieved data in state for use later in job\n    fn(state => {\n      state.posts = state.data;\n      return state;\n    });\n\n    // compare data\n    fn(state => {\n      if (state.users.length > state.posts.length) {\n        // do something based on the comparison\n      }\n      return state;\n    });\n\n    // cleanup state at the end before finshing job\n    fn(state => {\n      state.data = null\n      state.users = null\n      state.posts = null\n   \n      return state;\n    });### Webhook triggered runs\n\nOn the platform, when a Run is triggered by a webhook event, the input state\ncontains important parts of the inbound **http request**.\n\nThe input state will look something like this:",
              "metadata": {
                "doc_title": "state",
                "docs_type": "general_docs"
              },
              "score": 0.805297852
            },
            {
              "text": ":::#### `state.data`\n\nThis key is where we put data related to a specific job run. On the platform,\nit's the work-order-specific data from a triggering HTTP request or some bit of\ninformation that's passed from one job to another.\n\nUsing CLI, `state.json` will be loaded automatically from the current directory\n\nOr you can specify the path to the state file by passing the option -s,\n--state-path\n\nSpecify a path to your `state.json` file with this command:```bash\nopenfn hello.js -a http -s tmp/state.json -o tmp/output.json```\n\n\n  Expand to see expected CLI logs```\n[CLI] ✔ Compiled job from hello.js\nGET request succeeded with 200 ✓\n[R/T] ✔ Operation 1 complete in 876ms\n[R/T] ✔ Operation 2 complete in 0ms\n[CLI] ✔ Writing output to tmp/output.json\n[CLI] ✔ Done in 1.222s! ✨```",
              "metadata": {
                "doc_title": "cli-walkthrough",
                "docs_type": "general_docs"
              },
              "score": 0.782653809
            },
            {
              "text": "---\nid: library-intro\ntitle: The Community Job Library\nsidebar_label: Library Examples\nslug: library\n---## A growing knowledge base\n\nThere have been **over 3,000 distinct jobs written** for the OpenFn platform,\ndriving efficiency across the social sector. These jobs have run millions of\ntimes, connecting and automating critical technologies like CommCare, DHIS2,\nSalesforce, Kobo Toolbox, and more.\n\n**90% of at-scale OpenFn customers make their jobs publicly available** so that\nother organizations can learn from their implementations, yet we’re still\nconstantly asked to find examples of jobs that “create DHIS2 entities from\nCommCare cases” or “initiate payments when Kobo submissions arrive”.\n\nThe Job Library is our attempt to make this vast pool of real-world experience\navailable to everyone, automatically collecting and organizing non-sensitive job\nscripts from this diverse community of social sector integration experts to make\ndata integration safer, faster, and more scalable than ever before.",
              "metadata": {
                "doc_title": "library-intro",
                "docs_type": "adaptor_docs"
              },
              "score": 0.748413146
            },
            {
              "text": "---\ntitle: OCL Adaptor\n---## About OCL\n\n[OCL (Open Concept Lab)](https://openconceptlab.org/) is an open-source platform that provides a collaborative environment for creating, managing, and sharing standardized healthcare terminologies, dictionaries, and value sets.\n\nRelationships between concepts are defined in OCL as `mappings`. The API supports searching and editing concepts and mappings, building `sources`, and logically grouping concepts and mappings into `collections`. [See OCL docs](https://docs.openconceptlab.org/en/latest/oclapi/overview.html#overview) to learn more, access the [Swagger API](https://api.openconceptlab.org/swagger/), and to learn more about the cloud instance available at [https://openconceptlab.org](https://openconceptlab.org).",
              "metadata": {
                "doc_title": "ocl",
                "docs_type": "adaptor_docs"
              },
              "score": 0.745300412
            }
          ],
          "search_results_sections": [
            "state",
            "dhis2",
            "library-intro",
            "common",
            "claude",
            "cli-walkthrough",
            "job-writing-guide",
            "ghana-bdr",
            "ocl"
          ],
          "search_queries": [
            {
              "query": "http.get result not in state",
              "doc_type": null
            },
            {
              "query": "language-common",
              "doc_type": "adaptor_docs"
            }
          ],
          "config_version": 1,
          "prompts_version": 1,
          "usage": {
            "needs_docs": {
              "input_tokens": 183,
              "output_tokens": 4,
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 0,
              "cache_creation": {
                "ephemeral_5m_input_tokens": 0,
                "ephemeral_1h_input_tokens": 0
              },
              "service_tier": "standard"
            },
            "generate_queries": {
              "input_tokens": 359,
              "output_tokens": 48,
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 0,
              "cache_creation": {
                "ephemeral_5m_input_tokens": 0,
                "ephemeral_1h_input_tokens": 0
              },
              "service_tier": "standard"
            }
          }
        }
      }
    }
  },
  {
    "question": "would you please write a job for me that creates new datavaluesets under the\n\"Approved School CHP\" organization unit",
    "fullResult": {
      "response": "Here's a job that creates new dataValueSets under the \"Approved School CHP\" organization unit:\n\n```javascript\ncreate('dataValueSets', {\n  orgUnit: 'Approved School CHP', // You may need to use the orgUnit ID instead\n  dataSet: 'YOUR_DATASET_ID', // Replace with your actual dataset ID\n  period: '202412', // Replace with your desired period (e.g., 202412 for Dec 2024)\n  completeDate: '2024-12-01', // Optional completion date\n  dataValues: [\n    {\n      dataElement: 'YOUR_DATA_ELEMENT_ID', // Replace with actual data element ID\n      value: '10'\n    },\n    {\n      dataElement: 'ANOTHER_DATA_ELEMENT_ID', // Replace with another data element ID  \n      value: '25'\n    }\n  ]\n});\n```\n\nYou'll need to replace:\n- `YOUR_DATASET_ID` with the actual dataset ID\n- `YOUR_DATA_ELEMENT_ID` with the actual data element IDs you want to report\n- The period format (e.g., `202412` for monthly, `2024` for yearly)\n- The values with your actual data\n\nNote: You might need to use the organization unit ID instead of the name. If \"Approved School CHP\" doesn't work, find the orgUnit ID from your DHIS2 instance.",
      "suggested_code": null,
      "history": [
        {
          "role": "user",
          "content": "would you please write a job for me that creates new datavaluesets under the\n\"Approved School CHP\" organization unit"
        },
        {
          "role": "assistant",
          "content": "Here's a job that creates new dataValueSets under the \"Approved School CHP\" organization unit:\n\n```javascript\ncreate('dataValueSets', {\n  orgUnit: 'Approved School CHP', // You may need to use the orgUnit ID instead\n  dataSet: 'YOUR_DATASET_ID', // Replace with your actual dataset ID\n  period: '202412', // Replace with your desired period (e.g., 202412 for Dec 2024)\n  completeDate: '2024-12-01', // Optional completion date\n  dataValues: [\n    {\n      dataElement: 'YOUR_DATA_ELEMENT_ID', // Replace with actual data element ID\n      value: '10'\n    },\n    {\n      dataElement: 'ANOTHER_DATA_ELEMENT_ID', // Replace with another data element ID  \n      value: '25'\n    }\n  ]\n});\n```\n\nYou'll need to replace:\n- `YOUR_DATASET_ID` with the actual dataset ID\n- `YOUR_DATA_ELEMENT_ID` with the actual data element IDs you want to report\n- The period format (e.g., `202412` for monthly, `2024` for yearly)\n- The values with your actual data\n\nNote: You might need to use the organization unit ID instead of the name. If \"Approved School CHP\" doesn't work, find the orgUnit ID from your DHIS2 instance."
        }
      ],
      "usage": {
        "cache_creation_input_tokens": 16378,
        "cache_read_input_tokens": 1295,
        "input_tokens": 597,
        "output_tokens": 391
      },
      "meta": {
        "rag": {
          "search_results": [
            {
              "text": "[Configuring report in DHIS2](https://docs.dhis2.org/en/implement/database-design/aggregate-system-design/indicators.html#:~:text=In%20DHIS2%2C%20the%20indicator%20is,do%20not%20have%20a%20denominator.)4. [DHIS2 terminology](https://dhis2-app-course.ifi.uio.no/learn/dhis2/introduction/overview/terminologies/)## Integration Use Cases\n\nDHIS2 has been expanding its reach into many health systems. Starting from its\nfamiliar grounds of aggregate data sets for routine data it has included patient\nrelated data and then data in the areas of HR, finance, logistics and laboratory\nmanagement.\n\nFor several years now, DHIS2 has grown its data management activities\norganically, allowing the actual usage to lead to sometimes unforeseen\nsolutions. However, there are also limits to where leveraging DHIS2 seems\nuseful. In the following sections, special systems will be described.",
              "metadata": {
                "doc_title": "dhis2",
                "docs_type": "adaptor_docs"
              },
              "score": 0.827758789
            },
            {
              "text": "# DHIS2## App Overview\n\nThe District Health Information Software 2\n([DHIS2](https://www.dhis2.org/about)) is an open source, web-based health\nmanagement information system (HMIS) platform.\n\nToday, DHIS2 is the world's largest HMIS platform, in use by 73 low and\nmiddle-income countries. Approximately 2.4 billion people live in countries\nwhere DHIS2 is used. Including NGO-based programs, DHIS2 is in use in more than\n100 countries.\n\nThe [core DHIS2](https://dhis2.org/overview/) software development is managed by\nthe Health Information Systems Program (HISP) at the University of Oslo\n([UiO](https://www.uio.no/english/)).\n\nHISP is a global network comprised of 13 in-country and regional organizations,\nproviding day-in, day-out direct support to government ministries and local\nimplementers of DHIS2.\n\nDHIS2 exposes its data and service method integration pipeline through a\n[RESTful](https://dhis2.stoplight.io/docs/dhis2) Web Application Programing",
              "metadata": {
                "doc_title": "dhis2",
                "docs_type": "adaptor_docs"
              },
              "score": 0.873779297
            },
            {
              "text": "3\n[DHIS2 Integration Scenarios](https://docs.dhis2.org/master/en/implementer/html/different-dhis2-integration-scenarios.html)\n\n4\n[Interoperable DHIS2-LMIS in Senegal, Tanzania and Ghana](https://www.childhealthtaskforce.org/sites/default/files/2019-01/Interoperable%20DHIS2-LMIS%20in%20Senegal%2C%20Tanzania%2C%20and%20Ghana%20%28HISP%20Team%20at%20UIO-2017%29.pdf)\n\n5\n[CRVS Fellowship report SmartVA and DHIS2 integration in Sri Lanka](https://crvsgateway.info/file/17042/3010https://crvsgateway.info/file/17042/3010)## Integration Options\n\n1. Data integration via DHIS2 Web API:\n   https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-235/web-api.html\n\n2. Metadata integration via DHIS2 Web API. OpenFn implementations can leverage\n   the [`DHIS2`](https://github.com/OpenFn/language-dhis2) adaptor.",
              "metadata": {
                "doc_title": "dhis2",
                "docs_type": "adaptor_docs"
              },
              "score": 0.83416748
            },
            {
              "text": "**Example:** Create a dataValueSet with related dataValues```js\ncreate('dataValueSets', {\n  dataSet: 'pBOMPrpg1QX',\n  completeDate: '2014-02-03',\n  period: '201401',\n  orgUnit: 'DiszpKrYNg8',\n  dataValues: [\n    {\n      dataElement: 'f7n9E0hX8qk',\n      value: '1',\n    },\n    {\n      dataElement: 'Ix2HsbDMLea',\n      value: '2',\n    },\n    {\n      dataElement: 'eY5ehpbEsB7',\n      value: '3',\n    },\n  ],\n});```\n**Example:** Create an enrollment```js\ncreate('enrollments', {\n  trackedEntity: 'bmshzEacgxa',\n  orgUnit: 'TSyzvBiovKh',\n  program: 'gZBxv9Ujxg0',\n  enrollmentDate: '2013-09-17',\n  incidentDate: '2013-09-17',\n});```\n**Example:** Create an multiple objects with the Tracker API```js\n create(\"tracker\", {\n  enrollments: [\n    {\n      trackedEntity: \"bmshzEacgxa\",\n      orgUnit: \"TSyzvBiovKh\",\n      program: \"gZBxv9Ujxg0\",\n      enrollmentDate: \"2013-09-17\",\n      incidentDate: \"2013-09-17\",\n    },\n  ],\n  trackedEntities: [\n    {\n      orgUnit: \"TSyzvBiovKh\",\n      trackedEntityType: \"nEenWmSyUEp\",\n      attributes: [\n        {\n          attribute: \"w75KJ2mc4zz\",\n          value: \"Gigiwe\",\n        },\n      ],\n    },\n  ],\n});",
              "metadata": {
                "doc_title": "dhis2",
                "docs_type": "adaptor_functions"
              },
              "score": 0.761535645
            },
            {
              "text": "Both steps should be executed successfully and\nyou should see in the final state `opvDosesGivenCount: 3` added.### Step 3: Map and Load to DHIS2\n\nCreate a third Step after `Count OPV Dose Given` as follows:\n\n- Name: `Map and Load to DHIS2`\n- Adaptor: `dhis2`\n- Version: `v4.0.3`\n- Credential: new `dhis2` credential with the following credential configuration```json\n{\n  \"hostUrl\": \"https://play.dhis2.org/dev\",\n  \"username\": \"admin\",\n  \"password\": \"district\"\n}```\n\nIn this Step, we want to add logic to import `dataValues` to DHIS2 to \"report\"\non the aggregated OPV0 immunization does count calculated in Step 2.\n\nTo do so, open the [Inspector](../build/steps/step-editor.md), add the following\nJob code in the Editor:",
              "metadata": {
                "doc_title": "kobo-to-dhis2",
                "docs_type": "general_docs"
              },
              "score": 0.774658203
            },
            {
              "text": "In such scenarios, ...\n\n3 DHIS2 Instance Synchronization\n\n- Different DHIS2 instances in a given organisation or government ministry may\n  be deployed on separate servers which places the need for synchronization in  both metadata and data values. DHIS2 provides API endpoints to enable which\n  enable organisations to automate the synchronization process of data/metadata\n  across a cluster of DHIS2 servers.### Further Reading:\n\n1\n[DHIS2 Web API](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-235/web-api.html)\n\n2\n[DHIS2 Integration Concepts](https://docs.dhis2.org/2.28/en/implementer/html/integration.html#:~:text=DHIS2%20is%20often%20used%20as,on%20stocks%20and%20human%20resources.)\n\n3\n[DHIS2 Integration Scenarios](https://docs.dhis2.org/master/en/implementer/html/different-dhis2-integration-scenarios.html)\n\n4\n[Interoperable DHIS2-LMIS in Senegal, Tanzania and Ghana](https://www.childhealthtaskforce.org/sites/default/files/2019-01/Interoperable%20DHIS2-LMIS%20in%20Senegal%2C%20Tanzania%2C%20and%20Ghana%20%28HISP%20Team%20at%20UIO-2017%29.pdf)\n\n5\n[CRVS Fellowship report SmartVA and DHIS2 integration in Sri Lanka](https://crvsgateway.info/file/17042/3010https://crvsgateway.info/file/17042/3010)",
              "metadata": {
                "doc_title": "dhis2",
                "docs_type": "adaptor_docs"
              },
              "score": 0.832580566
            },
            {
              "text": ":::#### Explanation:\n\n- `create('dataValueSets', {...})`: This OpenFn function is used to create a new\n  datavalueset in DHIS2.\n- `dataSet`, `completeDate`, `period`, `orgUnit`: Details of the datavalueset.\n- `dataValues`: An array containing data elements and their corresponding\n  values.#### Testing\n\nSave your changes then navigate to the first step(Get Kobo Form Submission) and\ncreate an empty input `{}` then click `Create New Work Order` button to run the\nworkflow. All steps should be executed successful and you should see the\n`OPV0 doses given` updated in DHIS2. See [Workflow docs](../build/workflows.md)\nif you need help running or testing Workflows.### Conclusion\n\nCongratulations! You've successfully created an OpenFn workflow to automate the\nprocess of fetching form submissions from Kobotoolbox, calculated the aggregated\ncount of OPV doses given to beneficiaries, and reporting this count as\n`dataValues` to DHIS2.\n\n:::tip Are you blocked? Have questions?\n\nWatch this\n[Introduction to Workflows and History tutorial](https://youtu.be/hae8eM0iYnM?si=LGbv1TK0W9L9y12u)\nor post your questions on the [Community](https://community.openfn.org) to get\nhelp!\n\n:::",
              "metadata": {
                "doc_title": "kobo-to-dhis2",
                "docs_type": "general_docs"
              },
              "score": 0.782653809
            },
            {
              "text": "It gives you the\n  ability to do something to the state and return transformed data to state;\n- `opvDosesGivenCount`: Counts the occurrences of 'yes' in the `OPV0_dose_given`\n  field.#### Testing:\n\nSelect the first step `Get Kobo Form Submission` and `Create New Work Order`\nwith an empty input ([see Workflow docs](../build/workflows.md) if you need help\nwith running and testing steps). Both steps should be executed successfully and\nyou should see in the final state `opvDosesGivenCount: 3` added.### Step 3: Map and Load to DHIS2\n\nCreate a third Step after `Count OPV Dose Given` as follows:\n\n- Name: `Map and Load to DHIS2`\n- Adaptor: `dhis2`\n- Version: `v4.0.3`\n- Credential: new `dhis2` credential with the following credential configuration```json\n{\n  \"hostUrl\": \"https://play.dhis2.org/dev\",\n  \"username\": \"admin\",\n  \"password\": \"district\"\n}",
              "metadata": {
                "doc_title": "kobo-to-dhis2",
                "docs_type": "general_docs"
              },
              "score": 0.760314941
            },
            {
              "text": "To do so, open the [Inspector](../build/steps/step-editor.md), add the following\nJob code in the Editor:```javascript\n// Import to DHIS2\ncreate('dataValueSets', state => ({\n  dataSet: 'BfMAe6Itzgt', // Child Health\n  period: '202402', // Feb 2024\n  orgUnit: 'DiszpKrYNg8', // Ngelehun CHC\n  dataValues: [\n    {\n      categoryOptionCombo: 'Prlt0C1RF0s', //Fixed <1yr\n      dataElement: 'x3Do5e7g4Qo', // OPV0 doses given\n      value: state.opvDosesGivenCount, //# of OPV0 doses given\n    },\n  ],\n}));\n```\n\n:::tip Need help writing job code? Or modifying this logic?\n\nCheck out the docs on the [\"dhis2\" Adaptor](/adaptors/dhis2),\n[configuring Steps](../build/steps/steps.md), and\n[job-writing](../jobs/job-writing-guide.md).\n\n:::",
              "metadata": {
                "doc_title": "kobo-to-dhis2",
                "docs_type": "general_docs"
              },
              "score": 0.791839659
            },
            {
              "text": "nia%2C%20and%20Ghana%20%28HISP%20Team%20at%20UIO-2017%29.pdf)\n\n5\n[CRVS Fellowship report SmartVA and DHIS2 integration in Sri Lanka](https://crvsgateway.info/file/17042/3010https://crvsgateway.info/file/17042/3010)## Integration Options\n\n1. Data integration via DHIS2 Web API:\n   https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-235/web-api.html\n\n2. Metadata integration via DHIS2 Web API. OpenFn implementations can leverage\n   the [`DHIS2`](https://github.com/OpenFn/language-dhis2) adaptor.## Integration Examples\n\n1. DHIS2 Demo Implementations: https://github.com/OpenFn/dhis2-demo\n2. Lesotho Integration connecting two DHIS2 instances:\n   https://github.com/OpenFn/lesotho-dhis2",
              "metadata": {
                "doc_title": "dhis2",
                "docs_type": "adaptor_docs"
              },
              "score": 0.834289551
            }
          ],
          "search_results_sections": [
            "dhis2",
            "kobo-to-dhis2"
          ],
          "search_queries": [
            {
              "query": "dhis2",
              "doc_type": "adaptor_docs"
            },
            {
              "query": "create datavaluesets in dhis2",
              "doc_type": null
            }
          ],
          "config_version": 1,
          "prompts_version": 1,
          "usage": {
            "needs_docs": {
              "input_tokens": 178,
              "output_tokens": 4,
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 0,
              "cache_creation": {
                "ephemeral_5m_input_tokens": 0,
                "ephemeral_1h_input_tokens": 0
              },
              "service_tier": "standard"
            },
            "generate_queries": {
              "input_tokens": 354,
              "output_tokens": 50,
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 0,
              "cache_creation": {
                "ephemeral_5m_input_tokens": 0,
                "ephemeral_1h_input_tokens": 0
              },
              "service_tier": "standard"
            }
          }
        }
      }
    }
  },
  {
    "question": "What do I do now?",
    "fullResult": {
      "response": "Your job currently just has `fn(s => s)` which passes state through unchanged.\n\nTo do something useful, you need to:\n\n1. **Add some input data** - Go to the Input tab and add some JSON data to work with\n2. **Write job logic** - Replace `fn(s => s)` with operations that transform your data\n\nHere are some examples of what you could do:\n\n**Transform data:**\n```js\nfn(state => {\n  const transformedData = state.data.map(item => ({\n    ...item,\n    processed: true\n  }));\n  \n  return { ...state, data: transformedData };\n});\n```\n\n**Make HTTP requests:**\n```js\nhttp.get('https://jsonplaceholder.typicode.com/posts');\n```\n\n**Process arrays:**\n```js\neach('$.data[*]', fn(state => {\n  console.log('Processing item:', state.data);\n  return state;\n}));\n```\n\nWhat kind of data processing or integration are you trying to accomplish?",
      "suggested_code": null,
      "history": [
        {
          "role": "user",
          "content": "What do I do now?"
        },
        {
          "role": "assistant",
          "content": "Your job currently just has `fn(s => s)` which passes state through unchanged.\n\nTo do something useful, you need to:\n\n1. **Add some input data** - Go to the Input tab and add some JSON data to work with\n2. **Write job logic** - Replace `fn(s => s)` with operations that transform your data\n\nHere are some examples of what you could do:\n\n**Transform data:**\n```js\nfn(state => {\n  const transformedData = state.data.map(item => ({\n    ...item,\n    processed: true\n  }));\n  \n  return { ...state, data: transformedData };\n});\n```\n\n**Make HTTP requests:**\n```js\nhttp.get('https://jsonplaceholder.typicode.com/posts');\n```\n\n**Process arrays:**\n```js\neach('$.data[*]', fn(state => {\n  console.log('Processing item:', state.data);\n  return state;\n}));\n```\n\nWhat kind of data processing or integration are you trying to accomplish?"
        }
      ],
      "usage": {
        "cache_creation_input_tokens": 9696,
        "cache_read_input_tokens": 1295,
        "input_tokens": 528,
        "output_tokens": 293
      },
      "meta": {
        "rag": {
          "search_results": [
            {
              "text": "Expand to see expected CLI logs```bash\n  [CLI] ✔ Installing packages...\n  [CLI] ✔ Installed @openfn/language-http@4.2.8\n  [CLI] ✔ Installation complete in 14.555s\n  [CLI] ✔ Compiled from getPosts.js\n  [R/T] ♦ Starting job job-1\n  GET request succeeded with 200 ✓\n  [JOB] ℹ {\n    userId: 1,\n    id: 1,\n    title: 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit',\n    body: 'quia et suscipit\\n' +\n      'suscipit recusandae consequuntur expedita et cum\\n' +\n      'reprehenderit molestiae ut ut quas totam\\n' +\n      'nostrum rerum est autem sunt rem eveniet architecto'\n  }\n  [R/T] ✔ Completed job job-1 in 872ms\n  [CLI] ✔ State written to tmp/output.json\n  [CLI] ✔ Finished in 15.518s ✨```\n\n\n\n:::warning Placeholder Data\n\nThe data displayed in this CLI logs is generated from a\n[JSONPlaceholder](https://jsonplaceholder.typicode.com/) API and does not\nrepresent real-world information. It is intended for testing and development\npurposes only.\n\nFor accurate testing, consider using real data from your API or service.\n\n:::",
              "metadata": {
                "doc_title": "cli-walkthrough",
                "docs_type": "general_docs"
              },
              "score": 0.760742307
            },
            {
              "text": "There is no specific format for your\nresponse, as users can parse it any way they'd like, extracting relevant dataand then performing other actions—like loading it into a destination system—with\nthat data. See [language-http](https://www.github.com/openfn/language-http) for\ndetails on how users make these generic HTTP requests.### Payload sizing\n\nIf you're using the platform, and you're not planning on using an enterprise\nplan you'll have to consider the size of the data you're sending in each\npayload. Run `state` is typically limited to `10MB` and you should therefore\nkeep your payloads well below that limit.## Receiving data from OpenFn\n\nTo make it easy for users to connect to your application, it's highly\nrecommended that you create a language-package with your required authentication\nand a set of simple, allowable actions nicely abstracted into \"helper\nfunctions\". See [language-dhis2](https://www.github.com/openfn/language-dhis2)\nfor an example of a language-package which creates a simpler interface for a\ntraditional JSON-based REST api. Adaptors are written in Javascript and execute\nin Node. You can convert OpenFn's JSON into XML, or any other format before\nsending it to your application and you may make use of any node modules you'd\nlike. See\n[language-postgresql](https://www.github.com/openfn/language-postgresql) for an\nexample of an adaptor that connects directly to PostgreSQL databases using a\npopular NPM module called \"pg\".\n\nTo receive data from OpenFn's generic `language-http` adaptor, your application\nmust allow either basic, token, or digest authenticated POST, PUT, or GET",
              "metadata": {
                "doc_title": "build-compliant-apps",
                "docs_type": "general_docs"
              },
              "score": 0.754943967
            },
            {
              "text": "In the following sections, special systems will be described.#### Example user stories\n\n1 Logistics Management(LMIS)\n\n- LMIS is an area where a multitude of parallel, overlapping or competing\n  software solutions can be found in a single country\n- Although a basic LMIS configuration based on aggregate data can take you very\n  far, in some cases a transactional LMIS is necessary if you need to track such\n  detailed operations as returns, transfer between facilities, barcode reading,\n  batch and expiry managemen\n- In such a situation...\n\n2 Data Sharing for Health and Nutrition, Water Sanitation and Hygiene Projects\n\n- Case management sytsems such as CommCare are widely preffered in collecting\n  case data(or patient level data) due to its dominance in the sector and easy\n  of adoption. In such scenarios, ...\n\n3 DHIS2 Instance Synchronization\n\n- Different DHIS2 instances in a given organisation or government ministry may\n  be deployed on separate servers which places the need for synchronization in",
              "metadata": {
                "doc_title": "dhis2",
                "docs_type": "adaptor_docs"
              },
              "score": 0.757751524
            },
            {
              "text": "---\ntitle: Common Adaptor\n---## About OpenFn \"Common\" Language\n\nUse this adaptor to write JavaScript, or to leverage common expressions and\n[helper functions](/adaptors/packages/common-docs) for OpenFn.\n\nThis adaptor is typically used for transforming data in OpenFn workflows that\nautomate \"ETL\" (extract, transform, load) processes. See below examples.```js\n//use fn() to write your own functions\nfn(state => {\n  // write javascript...\n  // ...to do some things to state\n  console.log(state.data); //or to debug\n  return state;\n});``````js\n//use each() to create 1 account for each form\neach(\n  $.forms,\n  create('Account', {\n    Kobo_ID__c: $.data.id,\n    Name: $.data.customer_name,\n    Phone: $.data.customer_phone,\n  })\n);\n```",
              "metadata": {
                "doc_title": "common",
                "docs_type": "adaptor_docs"
              },
              "score": 0.76800549
            },
            {
              "text": "---\ntitle: OCL Adaptor\n---## About OCL\n\n[OCL (Open Concept Lab)](https://openconceptlab.org/) is an open-source platform that provides a collaborative environment for creating, managing, and sharing standardized healthcare terminologies, dictionaries, and value sets.\n\nRelationships between concepts are defined in OCL as `mappings`. The API supports searching and editing concepts and mappings, building `sources`, and logically grouping concepts and mappings into `collections`. [See OCL docs](https://docs.openconceptlab.org/en/latest/oclapi/overview.html#overview) to learn more, access the [Swagger API](https://api.openconceptlab.org/swagger/), and to learn more about the cloud instance available at [https://openconceptlab.org](https://openconceptlab.org).",
              "metadata": {
                "doc_title": "ocl",
                "docs_type": "adaptor_docs"
              },
              "score": 0.744995236
            },
            {
              "text": "---\ntitle: Claude AI Adaptor\n---## About Claude\n\n[Claude](https://claude.ai/) is an AI assistant built by Anthropic. It provides\na family of large language models (LLMs) developed for natural language\nprocessing tasks such as text generation, summarization, and question answering.\n\nClaude models process text input to generate responses but do not have built-in\nmemory or autonomous decision-making. They can be integrated with external tools\nor APIs to execute actions beyond text-based outputs.## Use OpenFn + LLMs for AI-Driven Workflows\n\nWhile LLMs (like Claude or ChatGPT) can generate insights, recommendations, or\nstructured data, they often **lack direct execution capabilities**—meaning they\nneed an automation system to act on their outputs.\n\n**OpenFn workflows fill this gap by orchestrating actions based on LLM-generated\nresponses.**\n\nRemember that LLMs are imperfect. Learn more about your recommended approach to\nAI in our [Responsible AI Policy](https://www.openfn.org/ai).",
              "metadata": {
                "doc_title": "claude",
                "docs_type": "adaptor_docs"
              },
              "score": 0.729675353
            },
            {
              "text": "Learn more about adaptors here: [docs.openfn.org/adaptors](/adaptors/)#### Basic usage:\n\nLet’s use\n[@openfn/language-http](https://www.npmjs.com/package/@openfn/language-http)\nadaptor to fetch a list of forms from\n[https://jsonplaceholder.typicode.com/](https://jsonplaceholder.typicode.com/)#### Tasks:\n\n1. Create a file called `getPosts.js` and write the following code\n\n   ```jsx title=getPosts.js\n   get('https://jsonplaceholder.typicode.com/posts');\n   fn(state => {\n     console.log(state.data[0]);\n     return state;\n   });\n   ```\n\n2. Run the job by running```bash\nopenfn getPosts.js -i -a http -o tmp/output.json```\n\n:::info Understanding CLI arguments\n\nUse `-a` to specify the adaptor; use `-i` to auto-install the necessary adaptor\n\nRun `openfn help` to see the full list of CLI arguments.\n\n:::\n\nSince it is our first time using the `http` adaptor, we are installing the\nadaptor using `-i` argument\n\n\n  3. Expand to see expected CLI logs",
              "metadata": {
                "doc_title": "cli-walkthrough",
                "docs_type": "general_docs"
              },
              "score": 0.755066037
            },
            {
              "text": "---\nid: library-intro\ntitle: The Community Job Library\nsidebar_label: Library Examples\nslug: library\n---## A growing knowledge base\n\nThere have been **over 3,000 distinct jobs written** for the OpenFn platform,\ndriving efficiency across the social sector. These jobs have run millions of\ntimes, connecting and automating critical technologies like CommCare, DHIS2,\nSalesforce, Kobo Toolbox, and more.\n\n**90% of at-scale OpenFn customers make their jobs publicly available** so that\nother organizations can learn from their implementations, yet we’re still\nconstantly asked to find examples of jobs that “create DHIS2 entities from\nCommCare cases” or “initiate payments when Kobo submissions arrive”.\n\nThe Job Library is our attempt to make this vast pool of real-world experience\navailable to everyone, automatically collecting and organizing non-sensitive job\nscripts from this diverse community of social sector integration experts to make\ndata integration safer, faster, and more scalable than ever before.",
              "metadata": {
                "doc_title": "library-intro",
                "docs_type": "adaptor_docs"
              },
              "score": 0.747680724
            },
            {
              "text": "Expand to see expected CLI logs```bash\n  [CLI] ✔ Installing packages...\n  [CLI] ✔ Installed @openfn/language-http@4.2.8\n  [CLI] ✔ Installation complete in 14.555s\n  [CLI] ✔ Compiled from getPosts.js\n  [R/T] ♦ Starting job job-1\n  GET request succeeded with 200 ✓\n  [JOB] ℹ {\n    userId: 1,\n    id: 1,\n    title: 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit',\n    body: 'quia et suscipit\\n' +\n      'suscipit recusandae consequuntur expedita et cum\\n' +\n      'reprehenderit molestiae ut ut quas totam\\n' +\n      'nostrum rerum est autem sunt rem eveniet architecto'\n  }\n  [R/T] ✔ Completed job job-1 in 872ms\n  [CLI] ✔ State written to tmp/output.json\n  [CLI] ✔ Finished in 15.518s ✨",
              "metadata": {
                "doc_title": "cli-walkthrough",
                "docs_type": "general_docs"
              },
              "score": 0.769165158
            }
          ],
          "search_results_sections": [
            "cli-walkthrough",
            "ocl",
            "library-intro",
            "claude",
            "common",
            "dhis2",
            "build-compliant-apps"
          ],
          "search_queries": [
            {
              "query": "getting started with language-common",
              "doc_type": null
            },
            {
              "query": "language-common",
              "doc_type": "adaptor_docs"
            }
          ],
          "config_version": 1,
          "prompts_version": 1,
          "usage": {
            "needs_docs": {
              "input_tokens": 154,
              "output_tokens": 4,
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 0,
              "cache_creation": {
                "ephemeral_5m_input_tokens": 0,
                "ephemeral_1h_input_tokens": 0
              },
              "service_tier": "standard"
            },
            "generate_queries": {
              "input_tokens": 330,
              "output_tokens": 47,
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 0,
              "cache_creation": {
                "ephemeral_5m_input_tokens": 0,
                "ephemeral_1h_input_tokens": 0
              },
              "service_tier": "standard"
            }
          }
        }
      }
    }
  },
  {
    "question": "Can you write a cron code that will trigger at 1am India time?",
    "fullResult": {
      "response": "Here's the cron expression for 1 AM India Standard Time (IST):\n\n```\n30 19 * * *\n```\n\nThis translates to:\n- **30** - 30 minutes\n- **19** - 19th hour (7:30 PM UTC)\n- **\\*** - every day of the month\n- **\\*** - every month\n- **\\*** - every day of the week\n\nSince India Standard Time is UTC+5:30, 1:00 AM IST equals 7:30 PM UTC (19:30 in 24-hour format).\n\nNote: OpenFn cron jobs run on UTC time, so you need to convert your local time to UTC for the cron expression.",
      "suggested_code": null,
      "history": [
        {
          "role": "user",
          "content": "Can you write a cron code that will trigger at 1am India time?"
        },
        {
          "role": "assistant",
          "content": "Here's the cron expression for 1 AM India Standard Time (IST):\n\n```\n30 19 * * *\n```\n\nThis translates to:\n- **30** - 30 minutes\n- **19** - 19th hour (7:30 PM UTC)\n- **\\*** - every day of the month\n- **\\*** - every month\n- **\\*** - every day of the week\n\nSince India Standard Time is UTC+5:30, 1:00 AM IST equals 7:30 PM UTC (19:30 in 24-hour format).\n\nNote: OpenFn cron jobs run on UTC time, so you need to convert your local time to UTC for the cron expression."
        }
      ],
      "usage": {
        "cache_creation_input_tokens": 7077,
        "cache_read_input_tokens": 1295,
        "input_tokens": 220,
        "output_tokens": 171
      },
      "meta": {
        "rag": {
          "search_results": [],
          "search_results_sections": [],
          "search_queries": [],
          "config_version": 1,
          "prompts_version": 1,
          "usage": {
            "needs_docs": {
              "input_tokens": 165,
              "output_tokens": 4,
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 0,
              "cache_creation": {
                "ephemeral_5m_input_tokens": 0,
                "ephemeral_1h_input_tokens": 0
              },
              "service_tier": "standard"
            },
            "generate_queries": {}
          }
        }
      }
    }
  },
  {
    "question": "Who can see these messages?",
    "fullResult": {
      "response": "Anyone who can see the workflow can see the chat. Chat sessions are saved to each job, so if someone has access to view the workflow, they'll be able to see our conversation here.",
      "suggested_code": null,
      "history": [
        {
          "role": "user",
          "content": "Who can see these messages?"
        },
        {
          "role": "assistant",
          "content": "Anyone who can see the workflow can see the chat. Chat sessions are saved to each job, so if someone has access to view the workflow, they'll be able to see our conversation here."
        }
      ],
      "usage": {
        "cache_creation_input_tokens": 0,
        "cache_read_input_tokens": 8372,
        "input_tokens": 198,
        "output_tokens": 46
      },
      "meta": {
        "rag": {
          "search_results": [],
          "search_results_sections": [],
          "search_queries": [],
          "config_version": 1,
          "prompts_version": 1,
          "usage": {
            "needs_docs": {
              "input_tokens": 154,
              "output_tokens": 4,
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 0,
              "cache_creation": {
                "ephemeral_5m_input_tokens": 0,
                "ephemeral_1h_input_tokens": 0
              },
              "service_tier": "standard"
            },
            "generate_queries": {}
          }
        }
      }
    }
  },
  {
    "question": "What is fhir and how do I use it?",
    "fullResult": {
      "response": "FHIR (Fast Healthcare Interoperability Resources) is a standard for representing and exchanging healthcare data electronically. It's designed to enable interoperability between different healthcare systems.\n\n## What is FHIR?\n\nFHIR provides:\n- Standardized data formats for healthcare information\n- REST APIs for data exchange\n- Resources like Patient, Observation, Medication, etc.\n- Support for real-time and batch data integration\n\n## Using FHIR with OpenFn\n\nOpenFn offers several FHIR adaptors:\n\n1. **Generic FHIR adaptor** (`@openfn/language-fhir`) - Basic, works with any FHIR server\n2. **FHIR R4 adaptor** (`@openfn/language-fhir-4`) - Specifically for FHIR R4 with TypeScript support\n3. **Custom Implementation Guide adaptors** - Generated for specific FHIR implementations\n\n## Integration Options\n\n**REST API Integration:**\n- Pull data from FHIR servers\n- Push data to FHIR servers\n- Suitable for scheduled bulk syncs\n\n**Webhook Integration:**\n- Real-time, event-based data integration\n- Uses FHIR Subscription resources\n- Implementation varies by FHIR server\n\n## Getting Started\n\nTo use FHIR in your workflow:\n\n1. Choose the appropriate FHIR adaptor for your version\n2. Set up credentials for your FHIR server\n3. Use the adaptor's functions to interact with FHIR resources\n\nWould you like help setting up a specific FHIR integration or working with particular FHIR resources?",
      "suggested_code": null,
      "history": [
        {
          "role": "user",
          "content": "What is fhir and how do I use it?"
        },
        {
          "role": "assistant",
          "content": "FHIR (Fast Healthcare Interoperability Resources) is a standard for representing and exchanging healthcare data electronically. It's designed to enable interoperability between different healthcare systems.\n\n## What is FHIR?\n\nFHIR provides:\n- Standardized data formats for healthcare information\n- REST APIs for data exchange\n- Resources like Patient, Observation, Medication, etc.\n- Support for real-time and batch data integration\n\n## Using FHIR with OpenFn\n\nOpenFn offers several FHIR adaptors:\n\n1. **Generic FHIR adaptor** (`@openfn/language-fhir`) - Basic, works with any FHIR server\n2. **FHIR R4 adaptor** (`@openfn/language-fhir-4`) - Specifically for FHIR R4 with TypeScript support\n3. **Custom Implementation Guide adaptors** - Generated for specific FHIR implementations\n\n## Integration Options\n\n**REST API Integration:**\n- Pull data from FHIR servers\n- Push data to FHIR servers\n- Suitable for scheduled bulk syncs\n\n**Webhook Integration:**\n- Real-time, event-based data integration\n- Uses FHIR Subscription resources\n- Implementation varies by FHIR server\n\n## Getting Started\n\nTo use FHIR in your workflow:\n\n1. Choose the appropriate FHIR adaptor for your version\n2. Set up credentials for your FHIR server\n3. Use the adaptor's functions to interact with FHIR resources\n\nWould you like help setting up a specific FHIR integration or working with particular FHIR resources?"
        }
      ],
      "usage": {
        "cache_creation_input_tokens": 8399,
        "cache_read_input_tokens": 1295,
        "input_tokens": 546,
        "output_tokens": 414
      },
      "meta": {
        "rag": {
          "search_results": [
            {
              "text": ":::## Integration Options\n\n**1. Rest API:** The FHIR specification includes a REST API that enables external services like OpenFn to pull data from the FHIR server, or push data from external apps to FHIR servers. This option is suited for scheduled, bulk syncs or workflows that must update data with external information. See [functions](/adaptors/packages/fhir-docs) for more on how to use this adaptor to work with the API.\n\n**2. Webhook:** The FHIR specification does not inherently define a webhook or data-forwarding mechanism. However, many FHIR implementations and platforms offer extensions or configurations that support similar functionality. This option is suited for real-time, event-based data integration. Check out the FHIR `Subscription` resource [documentation](https://build.fhir.org/subscription-definitions.html) to learn more about one way this might be implemented.",
              "metadata": {
                "doc_title": "fhir",
                "docs_type": "adaptor_docs"
              },
              "score": 0.83795166
            },
            {
              "text": "---\ntitle: FHIR r4 Adaptor\n---\n\nLanguage support for FHIR version 4. This adaptor is compatible with any FHIR R4\ncompliant server.\n\nThe FHIR 4 adaptor is implemented in TypeScript and comes complete with full\nTypeScript definitions.\n\n:::tip\n\nThis adaptor is strictly only compatible with\n[FHIR R4](https://www.hl7.org/fhir/R4). But all versions are supported by our\n[generic fhir](/adaptors/fhir) adaptor!\n\n:::## About FHIR\n\n[FHIR](https://www.hl7.org/fhir/overview.html) stands for Fast Healthcare\nInteroperability Resources. It is a standard for representing and exchanging\nhealthcare data electronically.\n\nLearn more about FHIR and\n[FHIR for heath data exchange](/documentation/get-started/standards#fhir-for-health-data-exchange).",
              "metadata": {
                "doc_title": "fhir-4",
                "docs_type": "adaptor_docs"
              },
              "score": 0.863586426
            },
            {
              "text": "---\ntitle: FHIR-NDR-ET IG Adaptor\n---## Custom FHIR Adaptor: fhir-ndr-et\nNote❗: This is a custom adaptor generated from this Implementation Guide `Ethiopia FHIR Implementation Guide - HIV Treatment & Care Services` authored by Jembi Health Systems: https://build.fhir.org/ig/jembi/ethiopia-hiv/branches/master/index.html\n\nCustom FHIR adaptors generate a suite of helper functions specific to their source Implementation Guides.\n\nSee the generic [fhir adaptor](/adaptors/fhir) and our [docs on standards](/documentation/get-started/standards) for more general guidance on OpenFn + FHIR.## Build your own FHIR Adaptor\nSee the [Adaptors Wiki](https://github.com/OpenFn/adaptors/wiki/Generating-Fhir-Adaptors) to build your own adaptor for _your_ implementation guide by trying out our fhir-adaptor-generator (which is a new tool still in testing). \n\nPlease share any questions or feedback on [community.openfn.org](https://community.openfn.org).",
              "metadata": {
                "doc_title": "fhir-ndr-et",
                "docs_type": "adaptor_docs"
              },
              "score": 0.852844238
            },
            {
              "text": "---\ntitle: FHIR Adaptor\n---## About FHIR\n\n[FHIR](https://www.hl7.org/fhir/overview.html) stands for Fast Healthcare Interoperability Resources. It is a standard for representing and exchanging healthcare data electronically. \n\n\n:::tip About this adaptor and features coming soon! \n\nThis adaptor is very basic and generic, used mostly to integrate demo FHIR servers. It's a work-in-progress, so share questions and feedback on [community.openfn.org](https://community.openfn.org).\n\n**FHIR version-specific adaptors (e.g., `fhir-r4`) with enhanced functionality are coming soon** to fast-track integration setup with more helper functions, templates, and docs than this simple adaptor. See the [Adaptors Wiki](https://github.com/OpenFn/adaptors/wiki/Generating-Fhir-Adaptors) for how to build an adaptor specific to your FHIR Implementation Guide. \n\n:::",
              "metadata": {
                "doc_title": "fhir",
                "docs_type": "adaptor_docs"
              },
              "score": 0.890258849
            },
            {
              "text": "---\ntitle: FHIR-FR IG Adaptor\n---## Custom FHIR Adaptor: fhir-fr\nNote❗: This is a custom adaptor generated from this France FHIR Implementation Guide: https://hl7.fr/ig/fhir/core/2.0.0/index.html\n\nCustom FHIR adaptors generate a suite of helper functions specific to their source Implementation Guides.\n\nSee the generic [fhir adaptor](/adaptors/fhir) and our [docs on standards](/documentation/get-started/standards) for more general guidance on OpenFn + FHIR.## Build your own FHIR Adaptor\nSee the [Adaptors Wiki](https://github.com/OpenFn/adaptors/wiki/Generating-Fhir-Adaptors) to build your own adaptor for _your_ implementation guide by trying out our fhir-adaptor-generator (which is a new tool still in testing). \n\nPlease share any questions or feedback on [community.openfn.org](https://community.openfn.org).",
              "metadata": {
                "doc_title": "fhir-fr",
                "docs_type": "adaptor_docs"
              },
              "score": 0.87298584
            }
          ],
          "search_results_sections": [
            "fhir-fr",
            "fhir-ndr-et",
            "fhir-4",
            "fhir"
          ],
          "search_queries": [
            {
              "query": "fhir adaptor",
              "doc_type": "adaptor_docs"
            }
          ],
          "config_version": 1,
          "prompts_version": 1,
          "usage": {
            "needs_docs": {
              "input_tokens": 160,
              "output_tokens": 4,
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 0,
              "cache_creation": {
                "ephemeral_5m_input_tokens": 0,
                "ephemeral_1h_input_tokens": 0
              },
              "service_tier": "standard"
            },
            "generate_queries": {
              "input_tokens": 336,
              "output_tokens": 29,
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 0,
              "cache_creation": {
                "ephemeral_5m_input_tokens": 0,
                "ephemeral_1h_input_tokens": 0
              },
              "service_tier": "standard"
            }
          }
        }
      }
    }
  },
  {
    "question": "How can I generate a UUID for my data?",
    "fullResult": {
      "response": "You can generate a UUID using the `util.uuid()` function from the common adaptor:\n\n```js\nfn(state => {\n  const id = util.uuid();\n  console.log('Generated UUID:', id);\n  \n  // Add the UUID to your data\n  return {\n    ...state,\n    data: {\n      ...state.data,\n      id: id\n    }\n  };\n});\n```\n\nThe `util.uuid()` function generates a standard UUID (Universally Unique Identifier) that looks like: `'3f4e254e-8f6f-4f8b-9651-1c1c262cc83f'`",
      "suggested_code": null,
      "history": [
        {
          "role": "user",
          "content": "How can I generate a UUID for my data?"
        },
        {
          "role": "assistant",
          "content": "You can generate a UUID using the `util.uuid()` function from the common adaptor:\n\n```js\nfn(state => {\n  const id = util.uuid();\n  console.log('Generated UUID:', id);\n  \n  // Add the UUID to your data\n  return {\n    ...state,\n    data: {\n      ...state.data,\n      id: id\n    }\n  };\n});\n```\n\nThe `util.uuid()` function generates a standard UUID (Universally Unique Identifier) that looks like: `'3f4e254e-8f6f-4f8b-9651-1c1c262cc83f'`"
        }
      ],
      "usage": {
        "cache_creation_input_tokens": 9971,
        "cache_read_input_tokens": 1295,
        "input_tokens": 540,
        "output_tokens": 207
      },
      "meta": {
        "rag": {
          "search_results": [
            {
              "text": "---\nid: library-intro\ntitle: The Community Job Library\nsidebar_label: Library Examples\nslug: library\n---## A growing knowledge base\n\nThere have been **over 3,000 distinct jobs written** for the OpenFn platform,\ndriving efficiency across the social sector. These jobs have run millions of\ntimes, connecting and automating critical technologies like CommCare, DHIS2,\nSalesforce, Kobo Toolbox, and more.\n\n**90% of at-scale OpenFn customers make their jobs publicly available** so that\nother organizations can learn from their implementations, yet we’re still\nconstantly asked to find examples of jobs that “create DHIS2 entities from\nCommCare cases” or “initiate payments when Kobo submissions arrive”.\n\nThe Job Library is our attempt to make this vast pool of real-world experience\navailable to everyone, automatically collecting and organizing non-sensitive job\nscripts from this diverse community of social sector integration experts to make\ndata integration safer, faster, and more scalable than ever before.",
              "metadata": {
                "doc_title": "library-intro",
                "docs_type": "adaptor_docs"
              },
              "score": 0.748413146
            },
            {
              "text": "* * *### util.encode {#util_encode}\n\n\n`encode(data) ⇒ string`\n\n\nEncodes a given string into Base64 format.\n\n**Returns**: `string` - - The Base64 encoded string.  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| data | `string` | The string to be encoded. |\n\n**Example:** Encode a string```js\nconst encoded = util.encode('Hello World');\nconsole.log(encoded); // Output: SGVsbG8gV29ybGQ=```\n\n* * *### util.uuid {#util_uuid}\n\n\n`uuid() ⇒ string`\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n**Returns**: `string` - - A newly generated UUID.  \n**Example:** Generate a UUID```js\nconst id = util.uuid();\nconsole.log(id); // Output:'3f4e254e-8f6f-4f8b-9651-1c1c262cc83f'\n```\n\n* * *##  Interfaces### HttpState\n\nState object\n\n**Properties**\n\n| Name | Description |\n| --- | --- |\n| data | the parsed response body |\n| response | the response from the HTTP server, including headers, statusCode, body, etc |\n| references | an array of all previous data objects used in the Job |\n\n\n* * *",
              "metadata": {
                "doc_title": "http",
                "docs_type": "adaptor_functions"
              },
              "score": 0.732330382
            },
            {
              "text": "In the following sections, special systems will be described.#### Example user stories\n\n1 Logistics Management(LMIS)\n\n- LMIS is an area where a multitude of parallel, overlapping or competing\n  software solutions can be found in a single country\n- Although a basic LMIS configuration based on aggregate data can take you very\n  far, in some cases a transactional LMIS is necessary if you need to track such\n  detailed operations as returns, transfer between facilities, barcode reading,\n  batch and expiry managemen\n- In such a situation...\n\n2 Data Sharing for Health and Nutrition, Water Sanitation and Hygiene Projects\n\n- Case management sytsems such as CommCare are widely preffered in collecting\n  case data(or patient level data) due to its dominance in the sector and easy\n  of adoption. In such scenarios, ...\n\n3 DHIS2 Instance Synchronization\n\n- Different DHIS2 instances in a given organisation or government ministry may\n  be deployed on separate servers which places the need for synchronization in",
              "metadata": {
                "doc_title": "dhis2",
                "docs_type": "adaptor_docs"
              },
              "score": 0.757995665
            },
            {
              "text": "**Example:** Encode a string```js\nconst encodedString = util.encode('Hello World');\nconsole.log(encoded); // Output: SGVsbG8gV29ybGQ=```\n**Example:** Encode an object```js\nconst encodedObject = util.encode({name: 'Jane Doe' })\nconsole.log(encodedObject); //output eyJuYW1lIjoiSmFuZSBEb2UifQ==```\n**Example:** To skip the JSON stringification step```js\nconst encodedObject = util.encode('Hello World', { parseJson: false })```\n\n* * *### util.uuid {#util_uuid}\n\n\n`uuid() ⇒ string`\n\n\nGenerates a UUID (Universally Unique Identifier)\n\n**Returns**: `string` - - A newly generated UUID  \n**Example:** Generate a UUID```js\nconst id = util.uuid();\nconsole.log(id); // Output:'3f4e254e-8f6f-4f8b-9651-1c1c262cc83f'```\n\n* * *## beta\n\nThese functions belong to the beta namespace.",
              "metadata": {
                "doc_title": "common",
                "docs_type": "adaptor_functions"
              },
              "score": 0.757751465
            },
            {
              "text": "Expand to see expected CLI logs```bash\n  [CLI] ✔ Installing packages...\n  [CLI] ✔ Installed @openfn/language-http@4.2.8\n  [CLI] ✔ Installation complete in 14.555s\n  [CLI] ✔ Compiled from getPosts.js\n  [R/T] ♦ Starting job job-1\n  GET request succeeded with 200 ✓\n  [JOB] ℹ {\n    userId: 1,\n    id: 1,\n    title: 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit',\n    body: 'quia et suscipit\\n' +\n      'suscipit recusandae consequuntur expedita et cum\\n' +\n      'reprehenderit molestiae ut ut quas totam\\n' +\n      'nostrum rerum est autem sunt rem eveniet architecto'\n  }\n  [R/T] ✔ Completed job job-1 in 872ms\n  [CLI] ✔ State written to tmp/output.json\n  [CLI] ✔ Finished in 15.518s ✨```\n\n\n\n:::warning Placeholder Data\n\nThe data displayed in this CLI logs is generated from a\n[JSONPlaceholder](https://jsonplaceholder.typicode.com/) API and does not\nrepresent real-world information. It is intended for testing and development\npurposes only.\n\nFor accurate testing, consider using real data from your API or service.\n\n:::",
              "metadata": {
                "doc_title": "cli-walkthrough",
                "docs_type": "general_docs"
              },
              "score": 0.723022461
            },
            {
              "text": "---\ntitle: OCL Adaptor\n---## About OCL\n\n[OCL (Open Concept Lab)](https://openconceptlab.org/) is an open-source platform that provides a collaborative environment for creating, managing, and sharing standardized healthcare terminologies, dictionaries, and value sets.\n\nRelationships between concepts are defined in OCL as `mappings`. The API supports searching and editing concepts and mappings, building `sources`, and logically grouping concepts and mappings into `collections`. [See OCL docs](https://docs.openconceptlab.org/en/latest/oclapi/overview.html#overview) to learn more, access the [Swagger API](https://api.openconceptlab.org/swagger/), and to learn more about the cloud instance available at [https://openconceptlab.org](https://openconceptlab.org).",
              "metadata": {
                "doc_title": "ocl",
                "docs_type": "adaptor_docs"
              },
              "score": 0.745300412
            },
            {
              "text": "---\ntitle: Claude AI Adaptor\n---## About Claude\n\n[Claude](https://claude.ai/) is an AI assistant built by Anthropic. It provides\na family of large language models (LLMs) developed for natural language\nprocessing tasks such as text generation, summarization, and question answering.\n\nClaude models process text input to generate responses but do not have built-in\nmemory or autonomous decision-making. They can be integrated with external tools\nor APIs to execute actions beyond text-based outputs.## Use OpenFn + LLMs for AI-Driven Workflows\n\nWhile LLMs (like Claude or ChatGPT) can generate insights, recommendations, or\nstructured data, they often **lack direct execution capabilities**—meaning they\nneed an automation system to act on their outputs.\n\n**OpenFn workflows fill this gap by orchestrating actions based on LLM-generated\nresponses.**\n\nRemember that LLMs are imperfect. Learn more about your recommended approach to\nAI in our [Responsible AI Policy](https://www.openfn.org/ai).",
              "metadata": {
                "doc_title": "claude",
                "docs_type": "adaptor_docs"
              },
              "score": 0.730102599
            },
            {
              "text": "return state;\n      })\n    adaptor: '@openfn/language-common'\n    trigger: j1-fails\n\ntriggers:\n  trigger-1:\n    criteria: '{\"number\":2}'\n  every-minute:\n    cron: '* * * * *'\n  after-j1:\n    success: job-1\n  j1-fails:\n    failure: job-1# Note that credential keys get copied, but values must be manually entered# after the export is completed.\ncredentials:\n  my-secret-credential:\n    username: '******'\n    password: '******'```## v1\n\nInitial portability proposal```js\nconst project = {\n  async: true,\n  triggers: {\n    uniqueTriggerId: {\n      // trigger properties\n    },\n    otherTrigger: {\n      // other trigger properties\n    },\n  },\n  credentials: {\n    // for now, credentials will not be synced //\n    // secret1: {\n    // username: 'mamadou',\n    // pass: 'shhh',\n  },\n  staticData: {\n    // static objects that can be accessed from any job\n  },\n  jobs: {\n    payHealthWorker: { trigger: 'otherTrigger' },\n    syncToSalesforce: {\n      expression: 'uri://github.com/jobs/expresion.js',\n      trigger: 'uniqueTriggerId',\n      credential: 'secret1',\n    },\n  },\n};\n```",
              "metadata": {
                "doc_title": "portability-versions",
                "docs_type": "general_docs"
              },
              "score": 0.72479254
            },
            {
              "text": "---\ntitle: Common Adaptor\n---## About OpenFn \"Common\" Language\n\nUse this adaptor to write JavaScript, or to leverage common expressions and\n[helper functions](/adaptors/packages/common-docs) for OpenFn.\n\nThis adaptor is typically used for transforming data in OpenFn workflows that\nautomate \"ETL\" (extract, transform, load) processes. See below examples.```js\n//use fn() to write your own functions\nfn(state => {\n  // write javascript...\n  // ...to do some things to state\n  console.log(state.data); //or to debug\n  return state;\n});``````js\n//use each() to create 1 account for each form\neach(\n  $.forms,\n  create('Account', {\n    Kobo_ID__c: $.data.id,\n    Name: $.data.customer_name,\n    Phone: $.data.customer_phone,\n  })\n);\n```",
              "metadata": {
                "doc_title": "common",
                "docs_type": "adaptor_docs"
              },
              "score": 0.744995177
            },
            {
              "text": "Expand to see expected CLI logs```bash\n  [CLI] ✔ Installing packages...\n  [CLI] ✔ Installed @openfn/language-http@4.2.8\n  [CLI] ✔ Installation complete in 14.555s\n  [CLI] ✔ Compiled from getPosts.js\n  [R/T] ♦ Starting job job-1\n  GET request succeeded with 200 ✓\n  [JOB] ℹ {\n    userId: 1,\n    id: 1,\n    title: 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit',\n    body: 'quia et suscipit\\n' +\n      'suscipit recusandae consequuntur expedita et cum\\n' +\n      'reprehenderit molestiae ut ut quas totam\\n' +\n      'nostrum rerum est autem sunt rem eveniet architecto'\n  }\n  [R/T] ✔ Completed job job-1 in 872ms\n  [CLI] ✔ State written to tmp/output.json\n  [CLI] ✔ Finished in 15.518s ✨",
              "metadata": {
                "doc_title": "cli-walkthrough",
                "docs_type": "general_docs"
              },
              "score": 0.725219727
            }
          ],
          "search_results_sections": [
            "claude",
            "http",
            "portability-versions",
            "library-intro",
            "dhis2",
            "ocl",
            "common",
            "cli-walkthrough"
          ],
          "search_queries": [
            {
              "query": "generate UUID language-common",
              "doc_type": null
            },
            {
              "query": "language-common",
              "doc_type": "adaptor_docs"
            }
          ],
          "config_version": 1,
          "prompts_version": 1,
          "usage": {
            "needs_docs": {
              "input_tokens": 158,
              "output_tokens": 4,
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 0,
              "cache_creation": {
                "ephemeral_5m_input_tokens": 0,
                "ephemeral_1h_input_tokens": 0
              },
              "service_tier": "standard"
            },
            "generate_queries": {
              "input_tokens": 334,
              "output_tokens": 46,
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 0,
              "cache_creation": {
                "ephemeral_5m_input_tokens": 0,
                "ephemeral_1h_input_tokens": 0
              },
              "service_tier": "standard"
            }
          }
        }
      }
    }
  },
  {
    "question": "I want to download data from a file on sharepoint and upload leads into\nsalesforce. Can you give me an idea how that would work?",
    "fullResult": {
      "response": "Here's how you could set up a workflow to download data from SharePoint and upload leads to Salesforce:\n\n## Workflow Structure\n\nYou'll need a 3-step workflow:\n\n1. **Step 1**: Download file from SharePoint (using `http` adaptor)\n2. **Step 2**: Transform/map the data (using `common` adaptor) \n3. **Step 3**: Upload leads to Salesforce (using `salesforce` adaptor)\n\n## Step 1: Download from SharePoint\n```js\n// Assuming you have SharePoint API access\nget('/sites/yoursite/lists/yourlist/items', {\n  headers: {\n    'Accept': 'application/json',\n    'Authorization': 'Bearer your-token'\n  }\n});\n```\n\n## Step 2: Transform Data\n```js\nfn(state => {\n  const leads = state.data.value.map(item => ({\n    FirstName: item.fields.FirstName,\n    LastName: item.fields.LastName,\n    Email: item.fields.Email,\n    Company: item.fields.Company,\n    Status: 'Open - Not Contacted'\n  }));\n  \n  return { ...state, leads };\n});\n```\n\n## Step 3: Upload to Salesforce\n```js\nbulk('Lead', 'insert', $.leads, { \n  failOnError: true \n});\n```\n\n## Key Considerations\n\n- **SharePoint Authentication**: You'll need to configure credentials for SharePoint API access\n- **File Format**: If it's a CSV file, you might need to use `parseCsv()` in step 2\n- **Data Mapping**: Map SharePoint fields to Salesforce Lead fields\n- **Error Handling**: Use `failOnError: true` to catch any upload issues\n\nWould you like me to elaborate on any of these steps or help with specific field mappings?",
      "suggested_code": null,
      "history": [
        {
          "role": "user",
          "content": "I want to download data from a file on sharepoint and upload leads into\nsalesforce. Can you give me an idea how that would work?"
        },
        {
          "role": "assistant",
          "content": "Here's how you could set up a workflow to download data from SharePoint and upload leads to Salesforce:\n\n## Workflow Structure\n\nYou'll need a 3-step workflow:\n\n1. **Step 1**: Download file from SharePoint (using `http` adaptor)\n2. **Step 2**: Transform/map the data (using `common` adaptor) \n3. **Step 3**: Upload leads to Salesforce (using `salesforce` adaptor)\n\n## Step 1: Download from SharePoint\n```js\n// Assuming you have SharePoint API access\nget('/sites/yoursite/lists/yourlist/items', {\n  headers: {\n    'Accept': 'application/json',\n    'Authorization': 'Bearer your-token'\n  }\n});\n```\n\n## Step 2: Transform Data\n```js\nfn(state => {\n  const leads = state.data.value.map(item => ({\n    FirstName: item.fields.FirstName,\n    LastName: item.fields.LastName,\n    Email: item.fields.Email,\n    Company: item.fields.Company,\n    Status: 'Open - Not Contacted'\n  }));\n  \n  return { ...state, leads };\n});\n```\n\n## Step 3: Upload to Salesforce\n```js\nbulk('Lead', 'insert', $.leads, { \n  failOnError: true \n});\n```\n\n## Key Considerations\n\n- **SharePoint Authentication**: You'll need to configure credentials for SharePoint API access\n- **File Format**: If it's a CSV file, you might need to use `parseCsv()` in step 2\n- **Data Mapping**: Map SharePoint fields to Salesforce Lead fields\n- **Error Handling**: Use `failOnError: true` to catch any upload issues\n\nWould you like me to elaborate on any of these steps or help with specific field mappings?"
        }
      ],
      "usage": {
        "cache_creation_input_tokens": 16389,
        "cache_read_input_tokens": 1295,
        "input_tokens": 602,
        "output_tokens": 517
      },
      "meta": {
        "rag": {
          "search_results": [
            {
              "text": "---\ntitle: Magpi\n---\n\nMagpi is not able to push data to external URLs. In order to fetch data from\nMagpi, you must run a scheduled job with a cron trigger using `language-magpi`:```js\nfetchSurveyData({\n  surveyId: 37479, // the survey id\n  afterDate: '2016-05-31', // the initial \"after\" date\n  // after the first run, OpenFn will only fetch new submissions\n  postUrl: 'https://www.openfn.org/inbox/secret-5c25-inbox-ba2c-url', // the inbox to post form data to.\n});\n```\n\nEvery time this job runs it will only fetch new data, by default.",
              "metadata": {
                "doc_title": "magpi",
                "docs_type": "adaptor_docs"
              },
              "score": 0.74835211
            },
            {
              "text": "The Adaptor provides a collection of helper functions (Operations) whichmakes it easy to communicate with a data source.\n\nThis guide applies equally to writing Jobs on the app (Lightning) or through the\nCLI.\n\n:::info Workflows\n\nMultiple jobs can be chained together in a Workflow. A common pattern is to use\none job to fetch data from datasource A, one job to convert or transform that\ndata to be compatible with datasource B, and a third job to upload the\ntransformed data to datasource B.\n\nTo learn more about workflow design and implementation, see\n[Build & Manage Workflows](build/workflows.md)\n\n:::## Operations and State\n\nEvery job is a data transformation pipeline.\n\nIt takes some input (a JavaScript object we call State) and executes a set of\nOperations (or functions), which transform that state in series (ie, one after\nthe other). The final state object is returned as the output of the pipeline.\n\n![Job Pipeline](/img/guide-job-pipeline.webp)\n\nOperations are provided by an Adaptor (connector). Each adaptor exports a list\nof functions designed to interact with a particular data source - for example,\ntake a look at the [dhis2](/adaptors/packages/dhis2-docs) and\n[salesforce](/adaptors/packages/salesforce-docs) adaptors.\n\nEverything you can achieve in OpenFn can be achieve with existing JavaScript\nlibraries or calls to REST APIs. The value of Adaptors is that they provide\nfunctions to make this stuff easier: taking care of authorisation, providing\ncleaner syntax, and hiding away implementation details for you.\n",
              "metadata": {
                "doc_title": "job-writing-guide",
                "docs_type": "general_docs"
              },
              "score": 0.795959532
            },
            {
              "text": "**Webhook:** By configuring\n   [`Outbound Messages`](https://developer.salesforce.com/docs/atlas.en-us.api.meta/api/sforce_api_om_outboundmessaging_understanding.htm)\n   that can be sent via criteria-based `Workflow Rules`, Salesforce Admins can   configure real-time notifications to be sent to OpenFn (or any endpoint URL)\n   when a specific event occurs. (E.g., every time a new `Contact` is created,\n   send an Outbound Message to OpenFn to trigger a data sync between that SF\n   `Contact` record and another data system.)## App Setup & Integration Tips\n\nSalesforce provides robust online documentation (see\n[Developer Docs](https://developer.salesforce.com/docs)) and tutorials (see\n[Trailheads](https://trailhead.salesforce.com/en?utm_campaign=13515883882&utm_content=125227478042&utm_medium=paid&utm_source=google_sem))\nfor learning about the platform. See below for helpful tips for your next\nSalesforce integration project.",
              "metadata": {
                "doc_title": "salesforce",
                "docs_type": "adaptor_docs"
              },
              "score": 0.792602539
            },
            {
              "text": "ng data from CRM systems into Google Sheets for sales\nanalysis. - Updating inventory levels in a Google Sheets spreadsheet from an\ne-commerce platform. - Automatically populating project management data from\ntask tracking systems into Google Sheets for reporting purposes.\n\nA step by step guide is found\n[in this tutorial](https://docs.openfn.org/documentation/tutorials/http-to-googlesheets)\nthat shows us how to get data via a REST API and push it to Google Sheet.### Helpful Resources\n\n- [Google Sheets API Overview](https://developers.google.com/sheets/api/guides/concepts)\n- OpenFn Workflow Tutorial:\n  [HTTP-to-GoogleSheets](https://docs.openfn.org/documentation/tutorials/http-to-googlesheets)",
              "metadata": {
                "doc_title": "googlesheets",
                "docs_type": "adaptor_docs"
              },
              "score": 0.74810797
            },
            {
              "text": ":::note### Adaptor\n\n:::tip\n\nAdaptors are the **\"where to do it\"** part of automation!\n\n:::\n\nOpenFn [Adaptors](/adaptors) are open-source modules that provide your Workflows\nwith the features they need to communicate with a particular system's API. Some\nexamples are [dhis](/adaptors/dhis2), [`postgresql`](/adaptors/postgresql), and\n[`http`](/adaptors/packages/http-docs) etc. There are more than 70 active\nadaptors at the moment, and anyone is free to build or enhance them. See\n[GitHub/Adaptors](https://github.com/OpenFn/adaptors) for the source code.### Credential\n\n:::tip\n\nCredentials are the **\"how to log in\"** part of automation!\n\n:::\n\nA Credential is used to authenticate with a destination app (e.g., Database\nusername, password & login URL) so that a Workflow Step can run. Via OpenFn's\nsecurity model, Credentials are separated from the Workflows themselves to\nensure that stored usernames and passwords (which are all encrypted) do not get\nleaked or accessed by the wrong people.",
              "metadata": {
                "doc_title": "terminology",
                "docs_type": "general_docs"
              },
              "score": 0.790588379
            },
            {
              "text": "For this reason, before you can begin writing a step\nyou have to decide which [Adaptor](/adaptors/) to work with.### 3.Choose an Adaptor Version\n\nPick the Adaptor Version you want to use. We recommend selecting the latest\nversion available, unless you want to use an older version that is compatible\nwith an older version of the API you're connecting with. See the\n[Adaptor docs](/adaptors) for details on each Adaptor.\n\nAdaptors change over time. They're open source, and we encourage as much\ncontribution as possible—releasing new versions for use on OpenFn.org as soon as\nthey pass our security reviews. New features may be added and bugs may be fixed,\nbut in order to make sure that an existing integration is not broken, we\nrecommend that you select a specific version (rather than using the\n\"auto-upgrade\" feature) when you choose an adaptor. The highest released version\nis the default choice here.\n\n:::tip\n\nThe _first 4 lines_ in the log of any run on OpenFn will tell you what adaptor\nyou're running. (As well as the version of worker, engine and NodeJs) This is",
              "metadata": {
                "doc_title": "steps",
                "docs_type": "general_docs"
              },
              "score": 0.790039122
            },
            {
              "text": "This option is suitable for scheduled workflows or those that need to update data in Satusehat with external information.## How to Extract or Modify Satusehat Data\n\n**See the available [helper functions](/adaptors/packages/satusehat-docs)** for\na full list of functions supported by this adaptor for extracting and/or\nmodifying Satusehat data.\n\nTo fetch data from Satusehat via OpenFn, you can:\n\n1. Configure a new workflow with a \"cron\" trigger and define the frequency of\n   your workflow (e.g., daily at 8:00AM)\n2. Add a \"Get data\" step linked to this Satusehat adaptor\n3. Edit the Step and open the Inspector (``) to write a basic job using this\n   adaptor's [GET](/adaptors/packages/satusehat-docs#get) to specify which data\n   you want to extract or \"pull\" from Satusehat\n\nSee [platform docs](/documentation/build/workflows) for more guidance on\nbuilding workflows.",
              "metadata": {
                "doc_title": "satusehat",
                "docs_type": "adaptor_docs"
              },
              "score": 0.742065489
            },
            {
              "text": "You can find more info on it in\nthe [Kobo docs](https://support.kobotoolbox.org/question_options.html).Similarly, if you have multiple choice question (called `Select Many` question\ntype in Kobo),you can specify the underlying identifier (called `XML value`) for\neach option. This is the value that you'll see when you export the collected\ndata.### Exporting form metadata and submission data\n\nYou can manually download your form metadata, such as question names and labels,\nquestion types, in XLS or XML format from the project's Form section on the web\ninterface, see more detail\n[here](https://support.kobotoolbox.org/new_form.html).\n\nTo export submission data in XLS or CSV format, follow\n[these steps](https://support.kobotoolbox.org/export_download.html).",
              "metadata": {
                "doc_title": "kobotoolbox",
                "docs_type": "adaptor_docs"
              },
              "score": 0.743530333
            },
            {
              "text": "---\ntitle: Salesforce\n---## App Overview\n\n[Salesforce](https://www.salesforce.com/) is a cloud-based **customer\nrelationship management (CRM)** platform that hosts applications that customers\ncan access online. Beyond its core CRM product, Salesforce offers a customizable\nplatform for configuring relational databases, business automation, web portals,\nreporting tools, and robust applications for supporting a wide range of use\ncases.### Data Model\n\nAt its core, Salesforce is a relational database. It has some out-of-box or\n\"standard\" data tables and features, but can be easily extended to include\n\"custom\" metadata configuration and other app features.\n\nSalesforce data is stored in **individual records (rows)** and organized within\n**objects (tables)**. Record attributes are captured in **fields (columns)**.\nThe data model is configurable, but there are some standard objects that are\nprovided. Note that naming conventions for custom and standard metadata may\ndiffer (e.g., all \"custom\" field names include the suffix `__c` like\n`CustomField__c`).\n\nLearn more about how data is structured in Salesforce at the links below:\n\n- How data is organized in Salesforce:\n  https://help.salesforce.com/s/articleView?id=sf.basics_organize_data.htm&type=5\n- Salesforce objects: https://www.salesforcetutorial.com/salesforce-objects/",
              "metadata": {
                "doc_title": "salesforce",
                "docs_type": "adaptor_docs"
              },
              "score": 0.789001465
            },
            {
              "text": "Learn more about how data is structured in Salesforce at the links below:\n\n- How data is organized in Salesforce:\n  https://help.salesforce.com/s/articleView?id=sf.basics_organize_data.htm&type=5\n- Salesforce objects: https://www.salesforcetutorial.com/salesforce-objects/## Integration Use Cases\n\nSalesforce may be used to manage an organization's programs, operations,\nfundraising, and more. Therefore integrations with 3rd-party apps is a common\nrequirement.\n\nExample user stories:\n\n- As a program or M&E manager working in areas with limited internet\n  connectivity, I would like to collect data on a mobile applicaiton that\n  supports offline data capture, but then sync the data collected to Salesforce\n  so that I can centrally monitor field activities and analyze data collected to\n  evaluate program impact.\n- As a fundraiser at an NGO, I would like to see all donor information tracked\n  in Salesforce so that I can better monitor fundraising activities, nurture\n  relationships with all funders, and manage campaigns.",
              "metadata": {
                "doc_title": "salesforce",
                "docs_type": "adaptor_docs"
              },
              "score": 0.74658215
            },
            {
              "text": "- As a fundraiser at an NGO, I would like to see all donor information tracked\n  in Salesforce so that I can better monitor fundraising activities, nurture\n  relationships with all funders, and manage campaigns.## APIs & Integration Options\n\nSalesforce has a rich ecosystem of developers and ready-made applications. See\nthe [Salesforce App Exchange](https://appexchange.salesforce.com/) for existing\napps and integrations custom-made for Salesforce. If existing applications do\nnot meet your functional or budget requirements, leverage Salesforce's robust\nAPIs to configure a custom integration.\n\n1. **APIs:** Salesforce has a robust set of RESTful APIs that support a wide\n   range of operations. For connecting with these APIs, including the\n   `Bulk API`, OpenFn has developed a robust API adaptor for quicker integration\n   setup - see\n   [`language-salesforce`](https://github.com/OpenFn/language-salesforce).\n2. **Webhook:** By configuring\n   [`Outbound Messages`](https://developer.salesforce.com/docs/atlas.en-us.api.meta/api/sforce_api_om_outboundmessaging_understanding.htm)\n   that can be sent via criteria-based `Workflow Rules`, Salesforce Admins can",
              "metadata": {
                "doc_title": "salesforce",
                "docs_type": "adaptor_docs"
              },
              "score": 0.807861328
            },
            {
              "text": "See below for helpful tips for your next\nSalesforce integration project.### Field API Names\n\nSalesforce **field API names** (unique names for each piece of metadata - e.g.,\n`PatientID__c`) should be referenced in OpenFn integrations, not **field\nlabels** (business-friendly label that the end user sees - e.g., `Patient ID`)\n![image](https://user-images.githubusercontent.com/80456839/128650593-343090da-7f12-468a-aa51-1f87f1cf9f34.png).\n\nTo view the Salesforce API field names, navigate to the Salesforce backend. Via\nthe web app, select `Setup` from the top naviagation menu to browse the\nSalesforce backend settings, metadata configuration, object and field names,\netc.\n\n- In the `Classic` view, search for `Object` in the left-hand `Setup` search box\n  without hitting Enter. From the quick results, select `Create -> Objects`.\n  This takes you to all the custom objects. Select an object and you'll see all\n  the fields and relationships on the object.\n- You can also easily view Salesforce API names via the front-end UI by\n  downloading the Chrome extension",
              "metadata": {
                "doc_title": "salesforce",
                "docs_type": "adaptor_docs"
              },
              "score": 0.788879275
            },
            {
              "text": "[FHIR Workflow](/img/workflow_fhir_fhir.png)## FHIR Adaptors\n\nOpenFn [adaptors](/adaptors) fast-track integration setup with target\napplications (including FHIR endpoints!). The core team is currently working on\na suite of FHIR-specific adaptors to enable interoperability with FHIR systems.\n\nThe [fhir-4 adaptor](/adaptors/fhir-4) makes it easy to access and modify data\nheld on any [FHIR r4](https://www.hl7.org/fhir/R4/) compliant server. It also\nprovides full code-assist to developers while creating specific resource\ndefinitions, simplifying data-entry and mapping logic.\n\nWe also provide a generic [fhir](/adaptors/fhir) adaptor that's compatible with\nall FHIR versions.\n\n:::info Fhir 4 support\n\nThe `fhir-4` adaptor is new to OpenFn as of March 2025. It introduces richer\nlevels of support from the generic [fhir](/adaptors/fhir)adaptor. Support for\nother FHIR versions is coming soon\n\n:::\n\nSee the\n[Adaptors Wiki](https://github.com/OpenFn/adaptors/wiki/Generating-Fhir-Adaptors)",
              "metadata": {
                "doc_title": "standards",
                "docs_type": "general_docs"
              },
              "score": 0.78930676
            },
            {
              "text": "For example, if you created `workflow.json` in the root of your\nproject directory, this would be the project structure:```bash\n    devchallenge\n    ├── .gitignore\n    ├── getPatients.js\n    ├── createTEIs.js\n    ├── getGlobalOrgUnits.js\n    ├── workflow.json\n    └── tmp\n        ├── http-creds.json\n        ├── dhis2-creds.json\n        └── output.json``````bash\nopenfn workflow.json -o tmp/output.json```\n\nOn execution, this workflow will first run the `getPatients.js` job. If is\nsuccessful, `getGlobalOrgUnits.js` will run using the final state of\n`getPatients.js`. If `getGlobalOrgUnits.js` is successful, `createTEIs.js` will\nrun using the final state of `getGlobalOrgUnits.js`.\n\nNote that adaptors specified in the `workflow.json` will be auto-installed when\nyou execute the workflow. To execute the workflow run this command:",
              "metadata": {
                "doc_title": "cli-walkthrough",
                "docs_type": "general_docs"
              },
              "score": 0.792602658
            }
          ],
          "search_results_sections": [
            "salesforce",
            "job-writing-guide",
            "kobotoolbox",
            "cli-walkthrough",
            "magpi",
            "steps",
            "googlesheets",
            "satusehat",
            "standards",
            "terminology"
          ],
          "search_queries": [
            {
              "query": "download data from sharepoint",
              "doc_type": "adaptor_docs"
            },
            {
              "query": "upload leads into salesforce",
              "doc_type": "adaptor_docs"
            },
            {
              "query": "workflow with multiple adaptors",
              "doc_type": "general_docs"
            }
          ],
          "config_version": 1,
          "prompts_version": 1,
          "usage": {
            "needs_docs": {
              "input_tokens": 179,
              "output_tokens": 4,
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 0,
              "cache_creation": {
                "ephemeral_5m_input_tokens": 0,
                "ephemeral_1h_input_tokens": 0
              },
              "service_tier": "standard"
            },
            "generate_queries": {
              "input_tokens": 355,
              "output_tokens": 74,
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 0,
              "cache_creation": {
                "ephemeral_5m_input_tokens": 0,
                "ephemeral_1h_input_tokens": 0
              },
              "service_tier": "standard"
            }
          }
        }
      }
    }
  },
  {
    "question": "I want to search for all patients with the name on state.name, and for each one,\nupdate their location to the value on state.newLocation",
    "fullResult": {
      "response": "Here's the code to search for patients by name and update their location:\n\n```js\nsearchPatient({ q: dataValue('name') });\n\neach(\n  '$.data.results[*]',\n  update('patient', dataValue('uuid'), {\n    person: {\n      addresses: [{\n        address1: sourceValue('$.newLocation'),\n        preferred: true\n      }]\n    }\n  })\n);\n```\n\nThis will:\n1. Search for patients matching the name from `state.name`\n2. For each patient found, update their address with the new location from `state.newLocation`\n\nNote: The update requires the full person object structure. You may need to adjust the address fields based on your OpenMRS configuration and what address fields you want to update.",
      "suggested_code": null,
      "history": [
        {
          "role": "user",
          "content": "I want to search for all patients with the name on state.name, and for each one,\nupdate their location to the value on state.newLocation"
        },
        {
          "role": "assistant",
          "content": "Here's the code to search for patients by name and update their location:\n\n```js\nsearchPatient({ q: dataValue('name') });\n\neach(\n  '$.data.results[*]',\n  update('patient', dataValue('uuid'), {\n    person: {\n      addresses: [{\n        address1: sourceValue('$.newLocation'),\n        preferred: true\n      }]\n    }\n  })\n);\n```\n\nThis will:\n1. Search for patients matching the name from `state.name`\n2. For each patient found, update their address with the new location from `state.newLocation`\n\nNote: The update requires the full person object structure. You may need to adjust the address fields based on your OpenMRS configuration and what address fields you want to update."
        }
      ],
      "usage": {
        "cache_creation_input_tokens": 15317,
        "cache_read_input_tokens": 1295,
        "input_tokens": 619,
        "output_tokens": 233
      },
      "meta": {
        "rag": {
          "search_results": [
            {
              "text": "ocumentation/manage-projects/manage-credentials) for how to configure a credential in OpenFn. If working locally or if using a Raw JSON credential type, then your configuration will look something like this:```\n{\n  \"instanceUrl\": \"http://openmrs.com/instance/url\",\n  \"password\":\"test\",\n  \"username\":\"test\"\n}\n```### Helpful Links\n\n1. [OpenMRS Developer Guide](https://openmrs.atlassian.net/wiki/spaces/docs/pages/25476048/Developer+Guide)\n2. Community Forums: [OpenMRS Talk](https://talk.openmrs.org/)### Implementation Examples\n\n1. OpenFn Prototype for Médecins Sans Frontières (MSF) LIME Project - OpenMRS -> DHIS2 sync: [https://github.com/OpenFn/openfn-lime](https://github.com/OpenFn/openfn-lime)",
              "metadata": {
                "doc_title": "openmrs",
                "docs_type": "adaptor_docs"
              },
              "score": 0.77911377
            },
            {
              "text": "---\ntitle: OpenLMIS Adaptor\n---## About OpenLMIS\n\n[OpenLMIS (Open Logistics Management Information System)](https://openlmis.org/) is an open-source, electronic logistics management information system designed to improve the management and distribution of health commodities. It enables supply chain management, providing visibility and accuracy in inventory tracking, order management, and reporting.## Integration Options\n\n**Rest API:** OpenLMIS has a REST API that enables external services like OpenFn to pull data from OpenLMIS, or push data from external apps to OpenLMIS. This option is suited for scheduled, bulk syncs or workflows that must update data in OpenLMIS with external information. See [functions](/adaptors/packages/openlmis-docs) for more on how to use this adaptor to work with the API.",
              "metadata": {
                "doc_title": "openlmis",
                "docs_type": "adaptor_docs"
              },
              "score": 0.781921387
            },
            {
              "text": "ox to a patient in DHIS2. You\nshould use the\n[default OpenFn mapping template](https://docs.google.com/spreadsheets/d/19sPRLP4zeFgFbtOL1wKh-rc7D0KPMu3etmOOG_x5t68/edit#gid=1275153608)\nfor such scenarios.\n\nHowever, if your workflow requires mapping individual entities to an\naggregate/summarized entity (i.e., many-to-1 mapping), then you can use OpenFn’s\n[aggregate mapping template](https://docs.google.com/spreadsheets/d/1JVcM7FEkCeezHXONRaAaEPFks9lS8xO_q51jql_hUtc/edit)\nto start. For example, you might collect individual patient records in\nKoboToolBox, but want to send an aggregated count of patients to DHIS2 for keyindicator results reporting (e.g. the number of patients under 18 years old).",
              "metadata": {
                "doc_title": "mapping-specs",
                "docs_type": "general_docs"
              },
              "score": 0.738342345
            },
            {
              "text": "Imagine that a Workflow is configured to create a new patient in OpenMRSwhenever a new case is opened in CommCare. Over the next week, if 5 cases are\nopened in CommCare, you’ll see 5 different Work Orders for this one Workflow. If\n4 Work Orders are successful and one has failed, you’ll see 4 new patients in\nOpenMRS, and your system administrator will have been notified that one of those\npatients couldn’t be created (or whatever more robust error-handling you’ve set\nup will take place.)\n\n![Work Order](/img/work_order_shot.png)\n\n:::note\n\nThere’s usually a 1-to-1 mapping between Work Orders and the real-world things\nyou’re working with. I might create a Workflow that gets all updated event data\nfrom DHIS2 for the last 2 weeks and publishes it to a public map using CartoDB.\nThis Workflow will be triggered at specified time intervals, every 2 weeks in\nthis case, and after a month, we’ll only see 2 Work Orders in OpenFn (that’s one\nevery two weeks). Each Work Order will have success or failed status with",
              "metadata": {
                "doc_title": "terminology",
                "docs_type": "general_docs"
              },
              "score": 0.740844786
            },
            {
              "text": "**Example:** List all concepts (with pagination)```js\nget(\"concept\", { query: \"brian\", max: Infinity })```\n**Example:** Search up to 100 patients by name (allowing pagination) (see OpenMRS API)```js\nget(\"patient\", { query: \"brian\", max: 100 })```\n**Example:** Fetch patient by UUID (returns an array of 1 item)```js\nget(\"patient/abc\")```\n**Example:** Fetch patient by UUID (returns an object of patient data)```js\nget(\"patient/abc\", { singleton: true })```\n**Example:** Search up to 10 patients by name (in a single request without pagination) (see OpenMRS API)```js\nget(\"patient\", { query: \"brian\", limit: 10 })```\n**Example:** List allergy subresources```js\nget(\"patient/abc/allergy\")```\n**Example:** Get allergy subresource by its UUID and parent patient UUID```js\nget(\"patient/abc/allergy/xyz\")```\n\n* * *",
              "metadata": {
                "doc_title": "openmrs",
                "docs_type": "adaptor_functions"
              },
              "score": 0.741760314
            },
            {
              "text": "---\ntitle: OpenMRS Adaptor\n---## About OpenMRS\n\n[OpenMRS (Open Medical Record System)](https://openmrs.org/) is an open-source platform designed to manage electronic medical records (EMRs) in low-resource environments. It provides a framework that allows developers to extend its core functionality through custom modules and APIs.## Integration Options\n\n**1. Rest API:** OpenMRS offers a REST API that enables external applications to interact with its database and perform bulk operations. This option is ideal for applications requiring scheduled or bulk synchronization with OpenMRS. Refer to the OpenMRS REST API [documentation](https://wiki.openmrs.org/) for detailed guidelines on endpoints and payload formats.\n\n**2. Webhook:** OpenMRS does not natively support webhooks as a standard feature. However, the platform is highly extensible and allows for customization through its module system. More details can be found on the OpenMRS [documentation page​](https://wiki.openmrs.org/).",
              "metadata": {
                "doc_title": "openmrs",
                "docs_type": "adaptor_docs"
              },
              "score": 0.83239758
            },
            {
              "text": "**Example:** Create a patient (see OpenMRS API)```js\ncreate(\"patient\", {\n  identifiers: [\n    {\n      identifier: '4023287',\n      identifierType: '05a29f94-c0ed-11e2-94be-8c13b969e334',\n      preferred: true,\n    },\n  ],\n  person: {\n    gender: 'M',\n    age: 42,\n    birthdate: '1970-01-01T00:00:00.000+0100',\n    birthdateEstimated: false,\n    names: [\n      {\n        givenName: 'Doe',\n        familyName: 'John',\n      },\n    ],\n  },\n})```\n**Example:** Create a patientIdentifier subresource (see OpenMRS API)```js\ncreate(\"patient/b52ec6f9-0e26-424c-a4a1-c64f9d571eb3/identifier\", { \n \"identifier\" : \"111:CLINIC1\",\n \"identifierType\" : \"a5d38e09-efcb-4d91-a526-50ce1ba5011a\",\n \"location\" : \"8d6c993e-c2cc-11de-8d13-0010c6dffd0f\",\n \"preferred\" : true\n})\n}```\n\n* * *",
              "metadata": {
                "doc_title": "openmrs",
                "docs_type": "adaptor_functions"
              },
              "score": 0.737487793
            },
            {
              "text": "---\ntitle: OpenIMIS Adaptor\n---## About OpenIMIS\n\n[OpenIMIS (Open Insurance Management Information System)](https://openimis.org/) is an open-source software solution designed to manage health financing schemes such as health insurance, results-based financing, and universal health coverage.## Integration Options\n\nOpenIMIS supports 2 primary integration options with OpenFn:\n\n1. **Rest API:** OpenIMIS has a REST API that enables external services like OpenFn to pull data from OpenIMIS, or push data from external apps to OpenIMIS. This option is suited for scheduled, bulk syncs or workflows that must update data in OpenIMIS with external information. See [functions](/adaptors/packages/openimis-docs) for more on how to use this adaptor to work with the API.\n\n2. **Webhook:** OpenIMIS does not natively support webhooks as a standard feature. However, integrations and custom implementations can enable webhook-like behavior. More details can be found on the OpenMRS [documentation page​](https://wiki.openmrs.org/).",
              "metadata": {
                "doc_title": "openimis",
                "docs_type": "adaptor_docs"
              },
              "score": 0.784668
            },
            {
              "text": "**Example:** Create a person (see OpenMRS API)```js\ncreate(\"person\", {\n  names: [\n    {\n      givenName: \"Mohit\",\n      familyName: \"Kumar\",\n    },\n  ],\n  gender: \"M\",\n  birthdate: \"1997-09-02\",\n  addresses: [\n    {\n      address1: \"30, Vivekananda Layout, Munnekolal,Marathahalli\",\n      cityVillage: \"Bengaluru\",\n      country: \"India\",\n      postalCode: \"560037\",\n    },\n  ],\n});```\n**Example:** Create an encounter (see OpenMRS API)```js\ncreate(\"encounter\", {\n  encounterDatetime: '2023-05-25T06:08:25.000+0000',\n  patient: '1fdaa696-e759-4a7d-a066-f1ae557c151b',\n  encounterType: 'dd528487-82a5-4082-9c72-ed246bd49591',\n  location: 'ba685651-ed3b-4e63-9b35-78893060758a',\n  encounterProviders: [],\n  visit: {\n    patient: '1fdaa696-e759-4a7d-a066-f1ae557c151b',\n    visitType: '7b0f5697-27e3-40c4-8bae-f4049abfb4ed',\n    startDatetime: '2023-05-25T06:08:25.000+0000',\n    stopDatetime: '2023-05-25T06:09:25.000+0000',\n  },\n})```\n**Example:** Create a patient (see OpenMRS API)",
              "metadata": {
                "doc_title": "openmrs",
                "docs_type": "adaptor_functions"
              },
              "score": 0.741760314
            },
            {
              "text": "More details can be found on the OpenMRS [documentation page​](https://wiki.openmrs.org/).## Authentication\n\nWhen integrating with OpenMRS via OpenFn, **Basic Authentication** is supported. See this adaptor's [Configuration docs](/adaptors/packages/openmrs-configuration-schema) for more on the required authentication parameters.\n\nSee platform docs on [managing credentials](documentation/manage-projects/manage-credentials) for how to configure a credential in OpenFn. If working locally or if using a Raw JSON credential type, then your configuration will look something like this:```\n{\n  \"instanceUrl\": \"http://openmrs.com/instance/url\",\n  \"password\":\"test\",\n  \"username\":\"test\"\n}\n```### Helpful Links\n\n1. [OpenMRS Developer Guide](https://openmrs.atlassian.net/wiki/spaces/docs/pages/25476048/Developer+Guide)\n2. Community Forums: [OpenMRS Talk](https://talk.openmrs.org/)",
              "metadata": {
                "doc_title": "openmrs",
                "docs_type": "adaptor_docs"
              },
              "score": 0.778442383
            }
          ],
          "search_results_sections": [
            "openmrs",
            "openlmis",
            "mapping-specs",
            "openimis",
            "terminology"
          ],
          "search_queries": [
            {
              "query": "openmrs",
              "doc_type": "adaptor_docs"
            },
            {
              "query": "search patients by name and update location openmrs",
              "doc_type": null
            }
          ],
          "config_version": 1,
          "prompts_version": 1,
          "usage": {
            "needs_docs": {
              "input_tokens": 185,
              "output_tokens": 4,
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 0,
              "cache_creation": {
                "ephemeral_5m_input_tokens": 0,
                "ephemeral_1h_input_tokens": 0
              },
              "service_tier": "standard"
            },
            "generate_queries": {
              "input_tokens": 361,
              "output_tokens": 51,
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 0,
              "cache_creation": {
                "ephemeral_5m_input_tokens": 0,
                "ephemeral_1h_input_tokens": 0
              },
              "service_tier": "standard"
            }
          }
        }
      }
    }
  }
]