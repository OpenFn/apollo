[
  {
    "question": "what is state",
    "fullResult": {
      "response": "State is a JavaScript object passed through each operation in your workflow. It has two main properties:\n\n1. `data` - Contains the current data you're working with\n2. `references` - An array containing the history of all previous operations\n\nEach operation in your workflow:\n1. Receives the current state\n2. Does something with it\n3. Returns a modified state to the next operation\n\nIn your current job, you're using `fn(s => s)` which simply receives the state object and returns it unchanged.\n\nIf you want to see what's in your state, try:\n\n```js\nfn(state => {\n  console.log(state);\n  return state;\n})\n```",
      "history": [
        {
          "role": "user",
          "content": "what is state"
        },
        {
          "role": "assistant",
          "content": "State is a JavaScript object passed through each operation in your workflow. It has two main properties:\n\n1. `data` - Contains the current data you're working with\n2. `references` - An array containing the history of all previous operations\n\nEach operation in your workflow:\n1. Receives the current state\n2. Does something with it\n3. Returns a modified state to the next operation\n\nIn your current job, you're using `fn(s => s)` which simply receives the state object and returns it unchanged.\n\nIf you want to see what's in your state, try:\n\n```js\nfn(state => {\n  console.log(state);\n  return state;\n})\n```"
        }
      ],
      "usage": {
        "cache_creation_input_tokens": 11202,
        "cache_read_input_tokens": 1323,
        "input_tokens": 526,
        "output_tokens": 184
      },
      "meta": {
        "rag": {
          "search_results": [
            {
              "text": "Our runtime converts each factoryinto an actual function, saves all the functions into an array, and calls them\nsequentially, passing in the latest state object to each one.\n\n\n\nThe OpenFn runtime knows how to handle an operation at the top scope, it can run\nit as part of the pipeline and handle state appropriately. However, the runtime\ndoes not know how to deal with a nested operation like above.\n\nBest practices dictate you should build each discrete operation of the pipeline\nat the top-level, passing state between them naturally via the pipeline. This\nmeans you should never need to nest an operation. However, if you ever find\nyourself in a situation where you absolutely need to use a nested operation, you\nshould pass state into it directly, for example:",
              "metadata": {
                "doc_title": "job-writing-guide",
                "docs_type": "general_docs"
              },
              "score": 0.809536099
            },
            {
              "text": ":::## Operations run at the top level\n\nOperations will only work when they are at the top level of your job code, like\nthis:```js\nget('/patients');\neach('$.data.patients[*]', state => {\n  item.id = `item-${index}`;\n  return state;\n});\npost('/patients', dataValue('patients'));```\n\nOpenFn will call your operations in series during workflow execution, ensuring\nthe correct state is fed into each one.\n\nIf you try to nest an operation inside the callback of another operation, you'll\nquickly run into trouble:```js\nget('/patients', { headers: { 'content-type': 'application/json' } }, state => {\n  // This will fail because it is nested in a callback\n  each('$.data.patients[*]', (item, index) => {\n    item.id = `item-${index}`;\n  });\n});\npost('/patients', dataValue('patients'));",
              "metadata": {
                "doc_title": "job-writing-guide",
                "docs_type": "general_docs"
              },
              "score": 0.792087257
            },
            {
              "text": "---\ntitle: Javascript Tips\nsidebar_label: Javascript Tips\n---\n\nOpenFn supports all modern JavaScript features.\n\nThis section highlights some useful JavaScript features and operators which\nmight help make your code cleaner. This is not meant to be an exhaustive guide,\njust a pointer to some good techniques on some of the newer aspects of the\nlanguage.### Using the `fn(...)` operation from the common adaptor\n\nWe recommend using the `fn(...)` operation to manipulate state and apply custom\nJavaScript to transform, manipulate, and clean data before sending to target\napplications.```js\nfn(state => {\n  //call state to edit\n  //add your custom javascript here to manipulate state\n  return state; //always return state\n});```",
              "metadata": {
                "doc_title": "javascript",
                "docs_type": "general_docs"
              },
              "score": 0.790939689
            },
            {
              "text": "When your job runs, it will be evaluated in a Javascript engine and follow theusual rules of Javsacript. That is to say: each statement will be executed in\nsequence (forget about asynchronous functions for a moment!).\n\nThe first statement, `get('/some-data)`, calls OpenFn's `get` function and\npasses it a string. `get` then returns another function which will be executed\nlater.\n\nThe second statement, `post('/some-other-data', state.data)` does something\nsimilar. It calls the `post` function, passing in a string and whatever sits on\n`state.data`, and returns a function to be executed later. But the two arguments\nhave already been resolved to values.\n\nCalling an operation is a bit like declaring a contract: you specify what you\nwant to happen, and in what order, and what the terms of the contact are. Then\nOpenFn will go off and fulfill the terms of that contract for you.\n\nThe problem is that when you specify the terms of the contract, you don't have\nall the values to hand. We don't know what `state.data` is yet. So we need to",
              "metadata": {
                "doc_title": "job-writing-guide",
                "docs_type": "general_docs"
              },
              "score": 0.804553
            },
            {
              "text": "The preferred way in\nmodern OpenFn is to use an inline-function:```js\nget('/some-data');\npost('/some-other-data', (state) => state.data);```\n\nThis passes a _function_ into the `post` operator, instead of a value\n\nWhen the `post()` call actually executes, the first thing it'll do is resolve\nany function into arguments into values. It does this by calling the function,\npassing in the latest state, and using the return as the value.\n\nThese lazy functions are incredibly powerful. Using them effectively is the key\nto writing good OpenFn jobs.## The Lazy State Operator\n\n:::tip Experimental Feature\n\nThe Lazy State operator is new to OpenFn as of April 2024. It is still\nconsidered an experimental feature. But it works great, and we encourage you to\nuse it!\n\nIf you've got any feedback, issues or suggestions around the Lazy State\nOperator, we'd love to hear from you on\n[Community](https://community.openfn.org)! Or you can raise an issue on\n[GitHub](https://github.com/openfn/kit/issues).\n\n:::\n\nThe Lazy State Operator is a shorthand syntax that makes it easier to read state\nwhen passing data into an operation.\n\nInstead of writing `state.data` to access something on state, you can use `$`,\nlike this:",
              "metadata": {
                "doc_title": "job-writing-guide",
                "docs_type": "general_docs"
              },
              "score": 0.801026
            }
          ],
          "search_results_sections": [
            "job-writing-guide",
            "javascript"
          ],
          "search_queries": [
            {
              "query": "what is state in Open Function",
              "doc_type": null
            }
          ],
          "config_version": 1,
          "prompts_version": 1,
          "usage": {
            "needs_docs": {
              "input_tokens": 153,
              "output_tokens": 4,
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 0
            },
            "generate_queries": {
              "input_tokens": 329,
              "output_tokens": 26,
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 0
            }
          }
        }
      }
    }
  },
  {
    "question": "what does $ mean",
    "fullResult": {
      "response": "The `$` symbol is a shorthand in OpenFn for accessing values from your state object. \n\nIt's essentially syntactic sugar for `(state) => state`, allowing you to access data without having to explicitly write state handling functions.\n\nInstead of writing:\n```js\nget((state) => state.data.url);\n```\n\nYou can simply write:\n```js\nget($.data.url);\n```\n\nThe `$` operator is resolved at the correct time by the OpenFn runtime. You can use it to read from state in function arguments, but you can't use it for direct assignments.",
      "history": [
        {
          "role": "user",
          "content": "what does $ mean"
        },
        {
          "role": "assistant",
          "content": "The `$` symbol is a shorthand in OpenFn for accessing values from your state object. \n\nIt's essentially syntactic sugar for `(state) => state`, allowing you to access data without having to explicitly write state handling functions.\n\nInstead of writing:\n```js\nget((state) => state.data.url);\n```\n\nYou can simply write:\n```js\nget($.data.url);\n```\n\nThe `$` operator is resolved at the correct time by the OpenFn runtime. You can use it to read from state in function arguments, but you can't use it for direct assignments."
        }
      ],
      "usage": {
        "cache_creation_input_tokens": 14855,
        "cache_read_input_tokens": 1323,
        "input_tokens": 532,
        "output_tokens": 167
      },
      "meta": {
        "rag": {
          "search_results": [
            {
              "text": "Basic usage is simply to pass state into an operation:```js\nupsert('patient', $.data.patients[0]);```\n\nYou can use it inside an object (so long as that object is passed to an\noperation):```js\ncreate('agent', {\n  name: $.patient.name,\n  country: $.patient.country,\n});```\n\nYou can use it inside a string template:```js\nget(`/patients/${$.patient.id}`);```\n\nOr inside other expressions, like concatenation:```js\ncreate({\n  name: $.patients[0].first_name + ' ' + $.patients[0].last_name,\n});```\n\nOr mathematics:```js\ncreate({\n  profit: $.report.revenue - $.report.expenses,\n});```\n\nYou can use it when mapping data structures:```js\ncreate('user', {\n  countryCode: countries[$.location.country],\n});```\n\nAnd you can use it in nested operations like, with `each()`:```js\neach($.data.patients,\n  post(`patients/${$.data.patient.id}`, $.data.patient)\n);```### $ is not state\n\nThe `$` operator is **not** an alias for `state`.\n\nIt cannot be used in place of the `state` variable. It cannot be assigned to, or\nbe on the left hand side of an assignment, and can only be used inside an\nargument to a function\n\nThis also means that Lazy State Operator can only be used to READ from state. It\ncannot be used to assign to state directly.\n\nThese examples are all errors:",
              "metadata": {
                "doc_title": "job-writing-guide",
                "docs_type": "general_docs"
              },
              "score": 0.738999307
            },
            {
              "text": ":::#### `state.data`\n\nThis key is where we put data related to a specific job run. On the platform,\nit's the work-order-specific data from a triggering HTTP request or some bit of\ninformation that's passed from one job to another.\n\nUsing CLI, `state.json` will be loaded automatically from the current directory\n\nOr you can specify the path to the state file by passing the option -s,\n--state-path\n\nSpecify a path to your `state.json` file with this command:```bash\nopenfn hello.js -a http -s tmp/state.json -o tmp/output.json```\n\n\n  Expand to see expected CLI logs```\n[CLI] ✔ Compiled job from hello.js\nGET request succeeded with 200 ✓\n[R/T] ✔ Operation 1 complete in 876ms\n[R/T] ✔ Operation 2 complete in 0ms\n[CLI] ✔ Writing output to tmp/output.json\n[CLI] ✔ Done in 1.222s! ✨```",
              "metadata": {
                "doc_title": "cli-walkthrough",
                "docs_type": "general_docs"
              },
              "score": 0.714749634
            },
            {
              "text": "If so, move to Q3!### 3. Is what you're asking for going to produce the effect you desire?\n\nThis is a tricky one, and may involve the engineering team. (In fact, this is\noften when engineering gets called in. There's a \"bug\", and before we take a\nlook at any code we need to figure out if what's being asked for—the\nspecification—will actually produce the desired outcomes.)### 4. Does the expression implement what you're asking for?\n\nSo we're _certain_ that the spec will produce the effect we want? OK, great...\nnow let's look at the job expression. Does the job expression implement the\nspec? How can you prove (with logs, assertions, etc.) that it does? Don't move\non until you're certain of this, or certain that it _can't_, given the adaptor\nyou're using!\n\n:::info Time check\n\nN.B., a change to the job expression takes as little as a couple of minutes.\n\n:::",
              "metadata": {
                "doc_title": "troubleshooting",
                "docs_type": "general_docs"
              },
              "score": 0.747053802
            },
            {
              "text": "Instead of writing `state.data` to access something on state, you can use `$`,\nlike this:```js\nget($.data.url);```\n\nThe `$` ensures that the value passed to the operation will be resolved at the\ncorrect time. Think of it like passing a path to some part of state, rather than\npassing the value of that path.\n\nWhat's nice about this is that you can basically ignore the previous section\nentirely and not think too much about state evaluation. Just read from `$` like\nyour state object and the OpenFn runtime will resolve the value correctly at\nrun-time.\n\nThe `$` symbol is really just syntactic sugar for `(state) => state` (in most\ncases, we just do a string replace when compiling your code). These two\nstatements behave in exactly the same way:```js\nget($.data.url);\nget((state) => state.data.url);",
              "metadata": {
                "doc_title": "job-writing-guide",
                "docs_type": "general_docs"
              },
              "score": 0.742464364
            },
            {
              "text": "---\nsidebar_label: Job Writing Guide\ntitle: Job Writing Guide\n---\n\nWorkflow automation and data integration in OpenFn is realised through the\ncreation of Jobs.\n\nThis guide will walk you through key concepts and best practices for job\nwriting. It is suitable for new coders and experienced JavaScript programmers.\nIn fact, even if you're an experienced JavaScript developer, there are a number\nof key patterns in the OpenFn ecosystem which it is important to learn.\n\n:::tip\n\nIf you're writing jobs on the platform app (Lightning), you can use the [AI Assistant](/documentation/build/ai-assistant) to help you. You'll find it in the Inspector.\n\n:::\n\nA Job is a bunch of JavaScript code which performs a particular task, like\nfetching data from Salesforce or converting some JSON data to FHIR standard.\n\nEach job uses exactly one Adaptor (often called a \"connector\") to perform its\ntask. The Adaptor provides a collection of helper functions (Operations) which",
              "metadata": {
                "doc_title": "job-writing-guide",
                "docs_type": "general_docs"
              },
              "score": 0.723424137
            }
          ],
          "search_results_sections": [
            "troubleshooting",
            "cli-walkthrough",
            "job-writing-guide"
          ],
          "search_queries": [
            {
              "query": "what does $ mean in job expressions",
              "doc_type": null
            }
          ],
          "config_version": 1,
          "prompts_version": 1,
          "usage": {
            "needs_docs": {
              "input_tokens": 155,
              "output_tokens": 4,
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 0
            },
            "generate_queries": {
              "input_tokens": 331,
              "output_tokens": 27,
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 0
            }
          }
        }
      }
    }
  },
  {
    "question": "How do I download all items from a collection from a particular day? Like 29th\nmarch 2024? See my input for an example of what my keys look like",
    "fullResult": {
      "response": "You can use the collections adaptor to query items with pattern matching and date filtering. Here's how to get all items from March 29th, 2024:\n\n```js\ncollections.get('my-collection', '20240329*').then(state => {\n  state.marchItems = state.data;\n  return state;\n});\n```\n\nThis uses a pattern match to find all keys that start with \"20240329\" (which are your March 29th items based on your key format). \n\nAlternatively, you can also filter by creation date:\n\n```js\ncollections.get('my-collection', { \n  createdAfter: '20240329', \n  createdBefore: '20240330' \n}).then(state => {\n  state.marchItems = state.data;\n  return state;\n});\n```\n\nFor more information on collections, refer to the official documentation here: https://docs.openfn.org/adaptors/packages/collections-docs.",
      "history": [
        {
          "role": "user",
          "content": "How do I download all items from a collection from a particular day? Like 29th\nmarch 2024? See my input for an example of what my keys look like"
        },
        {
          "role": "assistant",
          "content": "You can use the collections adaptor to query items with pattern matching and date filtering. Here's how to get all items from March 29th, 2024:\n\n```js\ncollections.get('my-collection', '20240329*').then(state => {\n  state.marchItems = state.data;\n  return state;\n});\n```\n\nThis uses a pattern match to find all keys that start with \"20240329\" (which are your March 29th items based on your key format). \n\nAlternatively, you can also filter by creation date:\n\n```js\ncollections.get('my-collection', { \n  createdAfter: '20240329', \n  createdBefore: '20240330' \n}).then(state => {\n  state.marchItems = state.data;\n  return state;\n});\n```\n\nFor more information on collections, refer to the official documentation here: https://docs.openfn.org/adaptors/packages/collections-docs."
        }
      ],
      "usage": {
        "cache_creation_input_tokens": 16387,
        "cache_read_input_tokens": 1323,
        "input_tokens": 697,
        "output_tokens": 275
      },
      "meta": {
        "rag": {
          "search_results": [
            {
              "text": "See below for helpful tips for your next\nSalesforce integration project.### Field API Names\n\nSalesforce **field API names** (unique names for each piece of metadata - e.g.,\n`PatientID__c`) should be referenced in OpenFn integrations, not **field\nlabels** (business-friendly label that the end user sees - e.g., `Patient ID`)\n![image](https://user-images.githubusercontent.com/80456839/128650593-343090da-7f12-468a-aa51-1f87f1cf9f34.png).\n\nTo view the Salesforce API field names, navigate to the Salesforce backend. Via\nthe web app, select `Setup` from the top naviagation menu to browse the\nSalesforce backend settings, metadata configuration, object and field names,\netc.\n\n- In the `Classic` view, search for `Object` in the left-hand `Setup` search box\n  without hitting Enter. From the quick results, select `Create -> Objects`.\n  This takes you to all the custom objects. Select an object and you'll see all\n  the fields and relationships on the object.\n- You can also easily view Salesforce API names via the front-end UI by\n  downloading the Chrome extension",
              "metadata": {
                "doc_title": "salesforce",
                "docs_type": "adaptor_docs"
              },
              "score": 0.808277726
            },
            {
              "text": "You might naively try something like this - but it won't work!```js\nget('/data'); // writes to state.data\nstate.data = state.data.filter(/* ... */); // This is invalid!```\n\nYou could use another operation, like `fn` or `each` - and often these work\ngreat!```js\nget('/data');\nfn(state => {\n  state.data = state.data.filter(/* ... */);\n  return state;\n});```\n\nBut you can also use a callback function, which is usually a bit neater:```js\nget('/data', {}, state => {\n  state.data = state.data.filter(/* ... */);\n  return state;\n});```\n\nWhatever your callback returns will be used as the input state for the next\noperation (or will be the final state for the job). So remember to ALWAYS return\nstate!\n\nBe mindful that some Adaptors will write internal information to state. So you\nshould usually `return { ... state }` rather than `return { data: state.data }`.\n\n:::tip\n\nRemember! Always return state from a callback.\n\n:::",
              "metadata": {
                "doc_title": "job-writing-guide",
                "docs_type": "general_docs"
              },
              "score": 0.76318109
            },
            {
              "text": "When bulk-loading with `get()`, state.data will be an array of items, and\n`state.data.cursor` will contain the cursor position from the server```js\ncollections.get('my-collection', '2024*').then(state => {\n  state.allRecords = state.data;\n  return state;\n});```### Remove data from a Collection\n\nYou can remove an individual value by key:```js\ncollections.remove('my-collection', 'commcare-fhir-value-mappings');```\n\nYou can also use patterns to delete multiple values at a time:```js\ncollections.remove('my-collection', '2024*');```## Filters, Limits & Cursors\n\nAs well as filtering keys with patterns, you can filter by created date:```js\ncollections.each(\n  'my-collection',\n  { key: '2024*', createdAfter: '20240601' },\n  (state, value, key) => {\n    console.log(value);\n  }\n);```\n\nYou can use `createdBefore` and `createdAfter` dates, which must be ISO 1806\nformatted strings. The `createdBefore` timestamp will match all dates less than\nor equal to ( {\n  // Write the cursor (if any) back to state for next time\n  state.cursor = state.data.cursor;\n  return state;\n});",
              "metadata": {
                "doc_title": "collections",
                "docs_type": "adaptor_docs"
              },
              "score": 0.766654491
            },
            {
              "text": "?= {};\n  state.resources[state.data.id] = mappedString;\n  return state;\n});```\n\nYou can also fetch multiple items with `get()`, which supports the same query\noptions as `each()`.\n\nBear in mind that all the items will be loaded into memory at once. For large\ndatasets and structures, this may cause problems.\n\nWhen bulk-loading with `get()`, state.data will be an array of items, and\n`state.data.cursor` will contain the cursor position from the server```js\ncollections.get('my-collection', '2024*').then(state => {\n  state.allRecords = state.data;\n  return state;\n});```### Remove data from a Collection\n\nYou can remove an individual value by key:```js\ncollections.remove('my-collection', 'commcare-fhir-value-mappings');```\n\nYou can also use patterns to delete multiple values at a time:```js\ncollections.remove('my-collection', '2024*');```## Filters, Limits & Cursors\n\nAs well as filtering keys with patterns, you can filter by created date:",
              "metadata": {
                "doc_title": "collections",
                "docs_type": "adaptor_docs"
              },
              "score": 0.756615698
            },
            {
              "text": "Learn more about how data is structured in Salesforce at the links below:\n\n- How data is organized in Salesforce:\n  https://help.salesforce.com/s/articleView?id=sf.basics_organize_data.htm&type=5\n- Salesforce objects: https://www.salesforcetutorial.com/salesforce-objects/## Integration Use Cases\n\nSalesforce may be used to manage an organization's programs, operations,\nfundraising, and more. Therefore integrations with 3rd-party apps is a common\nrequirement.\n\nExample user stories:\n\n- As a program or M&E manager working in areas with limited internet\n  connectivity, I would like to collect data on a mobile applicaiton that\n  supports offline data capture, but then sync the data collected to Salesforce\n  so that I can centrally monitor field activities and analyze data collected to\n  evaluate program impact.\n- As a fundraiser at an NGO, I would like to see all donor information tracked\n  in Salesforce so that I can better monitor fundraising activities, nurture\n  relationships with all funders, and manage campaigns.",
              "metadata": {
                "doc_title": "salesforce",
                "docs_type": "adaptor_docs"
              },
              "score": 0.841998458
            },
            {
              "text": "---\ntitle: Salesforce\n---## App Overview\n\n[Salesforce](https://www.salesforce.com/) is a cloud-based **customer\nrelationship management (CRM)** platform that hosts applications that customers\ncan access online. Beyond its core CRM product, Salesforce offers a customizable\nplatform for configuring relational databases, business automation, web portals,\nreporting tools, and robust applications for supporting a wide range of use\ncases.### Data Model\n\nAt its core, Salesforce is a relational database. It has some out-of-box or\n\"standard\" data tables and features, but can be easily extended to include\n\"custom\" metadata configuration and other app features.\n\nSalesforce data is stored in **individual records (rows)** and organized within\n**objects (tables)**. Record attributes are captured in **fields (columns)**.\nThe data model is configurable, but there are some standard objects that are\nprovided. Note that naming conventions for custom and standard metadata may\ndiffer (e.g., all \"custom\" field names include the suffix `__c` like\n`CustomField__c`).\n\nLearn more about how data is structured in Salesforce at the links below:\n\n- How data is organized in Salesforce:\n  https://help.salesforce.com/s/articleView?id=sf.basics_organize_data.htm&type=5\n- Salesforce objects: https://www.salesforcetutorial.com/salesforce-objects/",
              "metadata": {
                "doc_title": "salesforce",
                "docs_type": "adaptor_docs"
              },
              "score": 0.847650647
            },
            {
              "text": "**Webhook:** By configuring\n   [`Outbound Messages`](https://developer.salesforce.com/docs/atlas.en-us.api.meta/api/sforce_api_om_outboundmessaging_understanding.htm)\n   that can be sent via criteria-based `Workflow Rules`, Salesforce Admins can   configure real-time notifications to be sent to OpenFn (or any endpoint URL)\n   when a specific event occurs. (E.g., every time a new `Contact` is created,\n   send an Outbound Message to OpenFn to trigger a data sync between that SF\n   `Contact` record and another data system.)## App Setup & Integration Tips\n\nSalesforce provides robust online documentation (see\n[Developer Docs](https://developer.salesforce.com/docs)) and tutorials (see\n[Trailheads](https://trailhead.salesforce.com/en?utm_campaign=13515883882&utm_content=125227478042&utm_medium=paid&utm_source=google_sem))\nfor learning about the platform. See below for helpful tips for your next\nSalesforce integration project.",
              "metadata": {
                "doc_title": "salesforce",
                "docs_type": "adaptor_docs"
              },
              "score": 0.802831292
            },
            {
              "text": "When bulk-loading with `get()`, state.data will be an array of items, and\n`state.data.cursor` will contain the cursor position from the server```js\ncollections.get('my-collection', '2024*').then(state => {\n  state.allRecords = state.data;\n  return state;\n});```### Remove data from a Collection\n\nYou can remove an individual value by key:```js\ncollections.remove('my-collection', 'commcare-fhir-value-mappings');```\n\nYou can also use patterns to delete multiple values at a time:```js\ncollections.remove('my-collection', '2024*');```## Filters, Limits & Cursors\n\nAs well as filtering keys with patterns, you can filter by created date:```js\ncollections.each(\n  'my-collection',\n  { key: '2024*', createdAfter: '20240601' },\n  (state, value, key) => {\n    console.log(value);\n  }\n);",
              "metadata": {
                "doc_title": "collections",
                "docs_type": "adaptor_docs"
              },
              "score": 0.75968343
            },
            {
              "text": "- As a fundraiser at an NGO, I would like to see all donor information tracked\n  in Salesforce so that I can better monitor fundraising activities, nurture\n  relationships with all funders, and manage campaigns.## APIs & Integration Options\n\nSalesforce has a rich ecosystem of developers and ready-made applications. See\nthe [Salesforce App Exchange](https://appexchange.salesforce.com/) for existing\napps and integrations custom-made for Salesforce. If existing applications do\nnot meet your functional or budget requirements, leverage Salesforce's robust\nAPIs to configure a custom integration.\n\n1. **APIs:** Salesforce has a robust set of RESTful APIs that support a wide\n   range of operations. For connecting with these APIs, including the\n   `Bulk API`, OpenFn has developed a robust API adaptor for quicker integration\n   setup - see\n   [`language-salesforce`](https://github.com/OpenFn/language-salesforce).\n2. **Webhook:** By configuring\n   [`Outbound Messages`](https://developer.salesforce.com/docs/atlas.en-us.api.meta/api/sforce_api_om_outboundmessaging_understanding.htm)\n   that can be sent via criteria-based `Workflow Rules`, Salesforce Admins can",
              "metadata": {
                "doc_title": "salesforce",
                "docs_type": "adaptor_docs"
              },
              "score": 0.844946623
            },
            {
              "text": "See the `functions` and\n`examples` in the sidebar for more.```js\nfetchSubmissions(\n  'form123', //replace with the form id\n  {\n    date: 'Apr 18, 2024 6:26:21 AM', //if submission date filter not specified, the function will fetch submissions from ALL-TIME\n    status: 'approved|rejected', // add to filter by status; if not specified, the function will fetch submissions of ALL statuses\n  }\n);\n```## Configuring a Credential with API Access\n\nTo authenticate with the SurveyCTO API, your OpenFn Workflow will require a user\ncredential where the setting `Allow server API access` has been enabled. This\nsetting controls whether or not users in a given role can use the API to fetch\nforms and data from the server.\n[See SurveyCTO docs](https://docs.surveycto.com/04-monitoring-and-management/01-the-basics/00b.managing-user-roles.html)\non managing user roles.",
              "metadata": {
                "doc_title": "surveycto",
                "docs_type": "adaptor_docs"
              },
              "score": 0.759856164
            }
          ],
          "search_results_sections": [
            "salesforce",
            "surveycto",
            "job-writing-guide",
            "collections"
          ],
          "search_queries": [
            {
              "query": "salesforce",
              "doc_type": "adaptor_docs"
            },
            {
              "query": "get function filter by date",
              "doc_type": null
            }
          ],
          "config_version": 1,
          "prompts_version": 1,
          "usage": {
            "needs_docs": {
              "input_tokens": 187,
              "output_tokens": 4,
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 0
            },
            "generate_queries": {
              "input_tokens": 363,
              "output_tokens": 45,
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 0
            }
          }
        }
      }
    }
  },
  {
    "question": "can you fill out this code for me?",
    "fullResult": {
      "response": "Here's a complete implementation of your code that creates a FHIR patient and adds it to a bundle:\n\n```js\nfn(state => { \n  const input = state.data; // take the input from state.data\n  \n  // create a basic FHIR patient\n  state.patient = {\n    resourceType: \"Patient\",\n    id: \"example-patient-id\",\n    active: true,\n    name: [{\n      use: \"official\",\n      family: \"Smith\",\n      given: [\"John\"]\n    }],\n    gender: \"male\",\n    birthDate: \"1970-01-01\"\n  };\n  \n  return state;\n});\n\nfn(state => { \n  // create a new FHIR bundle\n  state.bundle = {\n    resourceType: \"Bundle\",\n    type: \"transaction\",\n    entry: [{\n      resource: state.patient,\n      request: {\n        method: \"PUT\",\n        url: `Patient/${state.patient.id}`\n      }\n    }]\n  };\n  \n  return state;\n});\n\n// Optional: post the bundle to Satusehat\n// post('', state.bundle);\n```\n\nThis code:\n1. Creates a patient with basic FHIR-compliant fields\n2. Creates a bundle with the patient as an entry\n3. Sets up the bundle as a transaction type with a PUT request\n\nYou can customize the patient data fields and add more resources to the bundle as needed.",
      "history": [
        {
          "role": "user",
          "content": "can you fill out this code for me?"
        },
        {
          "role": "assistant",
          "content": "Here's a complete implementation of your code that creates a FHIR patient and adds it to a bundle:\n\n```js\nfn(state => { \n  const input = state.data; // take the input from state.data\n  \n  // create a basic FHIR patient\n  state.patient = {\n    resourceType: \"Patient\",\n    id: \"example-patient-id\",\n    active: true,\n    name: [{\n      use: \"official\",\n      family: \"Smith\",\n      given: [\"John\"]\n    }],\n    gender: \"male\",\n    birthDate: \"1970-01-01\"\n  };\n  \n  return state;\n});\n\nfn(state => { \n  // create a new FHIR bundle\n  state.bundle = {\n    resourceType: \"Bundle\",\n    type: \"transaction\",\n    entry: [{\n      resource: state.patient,\n      request: {\n        method: \"PUT\",\n        url: `Patient/${state.patient.id}`\n      }\n    }]\n  };\n  \n  return state;\n});\n\n// Optional: post the bundle to Satusehat\n// post('', state.bundle);\n```\n\nThis code:\n1. Creates a patient with basic FHIR-compliant fields\n2. Creates a bundle with the patient as an entry\n3. Sets up the bundle as a transaction type with a PUT request\n\nYou can customize the patient data fields and add more resources to the bundle as needed."
        }
      ],
      "usage": {
        "cache_creation_input_tokens": 12658,
        "cache_read_input_tokens": 1323,
        "input_tokens": 706,
        "output_tokens": 402
      },
      "meta": {
        "rag": {
          "search_results": [
            {
              "text": "This option is suitable for scheduled workflows or those that need to update data in Satusehat with external information.## How to Extract or Modify Satusehat Data\n\n**See the available [helper functions](/adaptors/packages/satusehat-docs)** for\na full list of functions supported by this adaptor for extracting and/or\nmodifying Satusehat data.\n\nTo fetch data from Satusehat via OpenFn, you can:\n\n1. Configure a new workflow with a \"cron\" trigger and define the frequency of\n   your workflow (e.g., daily at 8:00AM)\n2. Add a \"Get data\" step linked to this Satusehat adaptor\n3. Edit the Step and open the Inspector (``) to write a basic job using this\n   adaptor's [GET](/adaptors/packages/satusehat-docs#get) to specify which data\n   you want to extract or \"pull\" from Satusehat\n\nSee [platform docs](/documentation/build/workflows) for more guidance on\nbuilding workflows.",
              "metadata": {
                "doc_title": "satusehat",
                "docs_type": "adaptor_docs"
              },
              "score": 0.752516
            },
            {
              "text": "Data was taken from the[Satusehate Postman Collection](https://www.postman.com/satusehat/satusehat-public/request/56uan96/encounter-create)```js\npost('Encounter', {\n  resourceType: 'Encounter',\n  status: 'arrived',\n  class: {\n    system: 'http://terminology.hl7.org/CodeSystem/v3-ActCode',\n    code: 'AMB',\n    display: 'ambulatory',\n  },\n  subject: {\n    reference: 'Patient/100000030009',\n    display: 'Budi Santoso',\n  },\n  participant: [\n    {\n      type: [\n        {\n          coding: [\n            {\n              system:\n                'http://terminology.hl7.org/CodeSystem/v3-ParticipationType',\n              code: 'ATND',\n              display: 'attender',\n            },\n          ],\n        },\n      ],\n      individual: {\n        reference: 'Practitioner/N10000001',\n        display: 'Dokter Bronsig',\n      },\n    },\n  ],\n  period: {\n    start: '2022-06-14T07:00:00+07:00',\n  },\n  location: [\n    {\n      location: {\n        reference: 'Location/b017aa54-f1df-4ec2-9d84-8823815d7228',\n        display:\n          'Ruang 1A, Poliklinik Bedah Rawat Jalan Terpadu, Lantai 2, Gedung G',\n      },\n    },\n  ],\n  statusHistory: [    {\n      status: 'arrived',\n      period: {\n        start: '2022-06-14T07:00:00+07:00',\n      },\n    },\n  ],\n  serviceProvider: {\n    reference: 'Organization/{{Org_id}}',\n  },\n  identifier: [\n    {\n      system: 'http://sys-ids.kemkes.go.id/encounter/{{Org_id}}',\n      value: 'P20240001',\n    },\n  ],\n});```\n\nCheckout Satusehat's\n[Postman Collection](https://www.postman.com/satusehat/satusehat-public/overview)\nfor more examples and resources.",
              "metadata": {
                "doc_title": "satusehat",
                "docs_type": "adaptor_docs"
              },
              "score": 0.739830673
            },
            {
              "text": "Data was taken from the[Satusehate Postman Collection](https://www.postman.com/satusehat/satusehat-public/request/56uan96/encounter-create)```js\npost('Encounter', {\n  resourceType: 'Encounter',\n  status: 'arrived',\n  class: {\n    system: 'http://terminology.hl7.org/CodeSystem/v3-ActCode',\n    code: 'AMB',\n    display: 'ambulatory',\n  },\n  subject: {\n    reference: 'Patient/100000030009',\n    display: 'Budi Santoso',\n  },\n  participant: [\n    {\n      type: [\n        {\n          coding: [\n            {\n              system:\n                'http://terminology.hl7.org/CodeSystem/v3-ParticipationType',\n              code: 'ATND',\n              display: 'attender',\n            },\n          ],\n        },\n      ],\n      individual: {\n        reference: 'Practitioner/N10000001',\n        display: 'Dokter Bronsig',\n      },\n    },\n  ],\n  period: {\n    start: '2022-06-14T07:00:00+07:00',\n  },\n  location: [\n    {\n      location: {\n        reference: 'Location/b017aa54-f1df-4ec2-9d84-8823815d7228',\n        display:\n          'Ruang 1A, Poliklinik Bedah Rawat Jalan Terpadu, Lantai 2, Gedung G',\n      },\n    },\n  ],\n  statusHistory: [",
              "metadata": {
                "doc_title": "satusehat",
                "docs_type": "adaptor_docs"
              },
              "score": 0.781332791
            },
            {
              "text": "Edit the Step and open the Inspector (``) to write a basic job using this\n   adaptor's [GET](/adaptors/packages/satusehat-docs#get) to specify which data\n   you want to extract or \"pull\" from Satusehat\n\nSee [platform docs](/documentation/build/workflows) for more guidance on\nbuilding workflows.## Authentication\n\n[See Satusehat docs](https://satusehat.kemkes.go.id/platform/docs/id/api-catalogue/authentication/)\nfor the latest on supported authentication methods.\n\nWhen integrating with Satusehat via OpenFn, there are 2 primary authentication\nmethods supported:\n\n1. Basic authentication (requires clientId + clientSecret), or\n2. Access token (requires access token created after authenticating in\n   Satusehat)\n\n**See this adaptor's\n[Configuration docs](/adaptors/packages/satusehat-configuration-schema) for more\non required authentication parameters.**\n\nSee platform docs\n[on managing credentials](/documentation/manage-projects/manage-credentials) for\nhow to configure a credential in OpenFn and see the below Satusehat credential\nexample.\n\n![Satusehat Cred](/img/satusehat_credential_edit.png)\n\nIf you're using the `Raw JSON` credential type, your configuration may look like\nthis:",
              "metadata": {
                "doc_title": "satusehat",
                "docs_type": "adaptor_docs"
              },
              "score": 0.738314807
            },
            {
              "text": "Data was taken from the[Satusehate Postman Collection](https://www.postman.com/satusehat/satusehat-public/request/56uan96/encounter-create)```js\npost('Encounter', {\n  resourceType: 'Encounter',\n  status: 'arrived',\n  class: {\n    system: 'http://terminology.hl7.org/CodeSystem/v3-ActCode',\n    code: 'AMB',\n    display: 'ambulatory',\n  },\n  subject: {\n    reference: 'Patient/100000030009',\n    display: 'Budi Santoso',\n  },\n  participant: [\n    {\n      type: [\n        {\n          coding: [\n            {\n              system:\n                'http://terminology.hl7.org/CodeSystem/v3-ParticipationType',\n              code: 'ATND',\n              display: 'attender',\n            },\n          ],\n        },\n      ],\n      individual: {\n        reference: 'Practitioner/N10000001',\n        display: 'Dokter Bronsig',\n      },\n    },\n  ],\n  period: {\n    start: '2022-06-14T07:00:00+07:00',\n  },\n  location: [\n    {\n      location: {\n        reference: 'Location/b017aa54-f1df-4ec2-9d84-8823815d7228',\n        display:\n          'Ruang 1A, Poliklinik Bedah Rawat Jalan Terpadu, Lantai 2, Gedung G',\n      },\n    },\n  ],\n  statusHistory: [    {\n      status: 'arrived',\n      period: {\n        start: '2022-06-14T07:00:00+07:00',\n      },\n    },\n  ],\n  serviceProvider: {\n    reference: 'Organization/{{Org_id}}',\n  },\n  identifier: [\n    {\n      system: 'http://sys-ids.kemkes.go.id/encounter/{{Org_id}}',\n      value: 'P20240001',\n    },\n  ],\n});```\n\nCheckout Satusehat's\n[Postman Collection](https://www.postman.com/satusehat/satusehat-public/overview)\nfor more examples and resources.## Mapping Satusehat URLs to Adaptor Functions\n\nThe Satusehat adaptor functions provide convenient HTTP method helpers - like\n[`get()`](/adaptors/packages/satusehat-docs#get).\n\nEach takes a path to a FHIR resource, relative to the baseURL in the\nconfiguration file, and a list of query parameters. Some helpers (like `post`)\nalso take a FHIR resource as a JSON object.\n\nFor example, a request to find an\n[encounter by subject](https://www.postman.com/satusehat/satusehat-public/request/ef2ilan/encounter-by-subject)\nrequires a URL like this:",
              "metadata": {
                "doc_title": "satusehat",
                "docs_type": "adaptor_docs"
              },
              "score": 0.794328868
            },
            {
              "text": "-schema) for more\non required authentication parameters.**\n\nSee platform docs\n[on managing credentials](/documentation/manage-projects/manage-credentials) for\nhow to configure a credential in OpenFn and see the below Satusehat credential\nexample.\n\n![Satusehat Cred](/img/satusehat_credential_edit.png)\n\nIf you're using the `Raw JSON` credential type, your configuration may look like\nthis:```json\n{\n  \"clientId\": \"your-client-id\", // e.g 12345678\n  \"clientSecret\": \"your-client-secret-key\", // e.g abcd123456\n  \"baseUrl\": \"your-base-url\", // e.g https://api-satusehat-stg.dto.kemkes.go.id\n  \"accessToken\": \"your-access-token\" // Don't add accessToken if you're using client secret and client id\n}\n```",
              "metadata": {
                "doc_title": "satusehat",
                "docs_type": "adaptor_docs"
              },
              "score": 0.750439346
            },
            {
              "text": "---\ntitle: Satusehat Adaptor\n---## About Satusehat\n\n[Satusehat](https://satusehat.kemkes.go.id/platform/docs/id/playbook/introduction/)\nis a health data exchange ecosystem that connects information systems or\napplications from all members of the Indonesian digital health ecosystem\nincluding health facilities, regulators, guarantors, and digital service\nproviders.\n\nSATUSEHAT uses HL7 [FHIR](https://www.hl7.org/fhir/) (Fast Healthcare\nInteroperability Resources) in implementing standard data models and Application\nProgramming Interfaces (APIs).\n\n:::info FHIR\n\nFHIR (Fast Healthcare Interoperability Resources) is a global (international)\nstandard that defines the data format and its elements (called \" resources \")\nand an application programming interface (API ) standard for information\nexchange\n\n:::\n\nThe following example shows a HTTP POST request to creating an `Encounter` FHIR\nresource. Data was taken from the",
              "metadata": {
                "doc_title": "satusehat",
                "docs_type": "adaptor_docs"
              },
              "score": 0.774600923
            },
            {
              "text": "For example:```js\naddToBundle({\n  id: 'x',\n  resourceType: 'Patient',\n});```\n\nWill create a state object like this:```json\n{\n  \"bundle\": {\n    \"resourceType\": \"bundle\",\n    \"entry\": [\n      {\n        \"resource\": {\n          \"id\": \"x\",\n          \"resourceType\": \"Patient\"\n        },\n        \"request\": {\n          \"method\": \"PUT\",\n          \"url\": \"Patient/x\"\n        }\n      }\n    ]\n  }\n}```\n\nTo send the Bundle to the FHIR server defined in `state.configuration.baseURL`,\ncall `uploadBundle()`.\n\nYou can pass the name of a key on state to upload a specific bundle:```js\nuploadBundle('patients-bundle');```\n\nOr you can pass your own bundle object in directly:```js\nuploadBundle($.bundle);```## Builder Functions\n\nThe FHIR-4 adaptor provides builder functions which make it easier to define\nFHIR resources.\n\nBuilders provide short-hand properties and default values, reducing the\nboiler-plate needed to create FHIR resources. They also enable code-assist to be\nprovided by code editors.\n\nThe basic pattern is something like this:",
              "metadata": {
                "doc_title": "fhir-4",
                "docs_type": "adaptor_docs"
              },
              "score": 0.796682894
            }
          ],
          "search_results_sections": [
            "satusehat",
            "fhir-4"
          ],
          "search_queries": [
            {
              "query": "satusehat",
              "doc_type": "adaptor_docs"
            },
            {
              "query": "create fhir patient bundle satusehat",
              "doc_type": null
            }
          ],
          "config_version": 1,
          "prompts_version": 1,
          "usage": {
            "needs_docs": {
              "input_tokens": 213,
              "output_tokens": 4,
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 0
            },
            "generate_queries": {
              "input_tokens": 389,
              "output_tokens": 52,
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 0
            }
          }
        }
      }
    }
  },
  {
    "question": "What is wrong with this code? I get an error like \"Cannot read properties of\nundefined (reading 'name')\"",
    "fullResult": {
      "response": "There's a syntax error in your code. You're missing a semicolon after the console.log statement. Here's the corrected version:\n\n```js\nfn(state => { state.patient = state.data.patients[0]; return state; });\nfn(state => { console.log(state.patient.name); return state; });\n```\n\nAlways remember to return state from your fn() operations and check that your JavaScript syntax is correct with proper semicolons.\n\nAlso, your error suggests that `state.patient.name` is undefined. Make sure your input data actually contains `patients` array with at least one item that has a `name` property.",
      "history": [
        {
          "role": "user",
          "content": "What is wrong with this code? I get an error like \"Cannot read properties of\nundefined (reading 'name')\""
        },
        {
          "role": "assistant",
          "content": "There's a syntax error in your code. You're missing a semicolon after the console.log statement. Here's the corrected version:\n\n```js\nfn(state => { state.patient = state.data.patients[0]; return state; });\nfn(state => { console.log(state.patient.name); return state; });\n```\n\nAlways remember to return state from your fn() operations and check that your JavaScript syntax is correct with proper semicolons.\n\nAlso, your error suggests that `state.patient.name` is undefined. Make sure your input data actually contains `patients` array with at least one item that has a `name` property."
        }
      ],
      "usage": {
        "cache_creation_input_tokens": 9384,
        "cache_read_input_tokens": 1323,
        "input_tokens": 688,
        "output_tokens": 197
      },
      "meta": {
        "rag": {
          "search_results": [
            {
              "text": "There\nare a few reasons why they are popular in modern JavaScript:\n\n- They feel lightweight, with less syntax required\n- They do not have a `this` scope - although this is largely irrelevant to\n  OpenFn programming (and indeed most modern JS frameworks)\n\nArrow functions are always anonymous - they have no name - but they can be\nassigned to variables of course.```js\nfunction upperCase(name) {\n  return name.toUpperCase();\n}\n\nconst getName = () => {\n  return name.toUpperCase();\n};```\n\nAn arrow function can contain a single expression and no body, and will return\nthe expression:```js\nfunction getX() {\n  return x;\n}\n\nconst getX = () => x;```\n\nThis pattern makes arrow functions lightweight and elegant, and aligns nicely\nwith functional programming paradigms.\n\n:::tip Problems returning an object?\n\nAlways wrap objects in brackets when returning an object from an arrow\nexpression:```\npost('wwww', () => ({ id: 'a', name: 'adam' }))",
              "metadata": {
                "doc_title": "javascript",
                "docs_type": "general_docs"
              },
              "score": 0.800302804
            },
            {
              "text": "---\ntitle: Common Adaptor\n---## About OpenFn \"Common\" Language\n\nUse this adaptor to write JavaScript, or to leverage common expressions and\n[helper functions](/adaptors/packages/common-docs) for OpenFn.\n\nThis adaptor is typically used for transforming data in OpenFn workflows that\nautomate \"ETL\" (extract, transform, load) processes. See below examples.```js\n//use fn() to write your own functions\nfn(state => {\n  // write javascript...\n  // ...to do some things to state\n  console.log(state.data); //or to debug\n  return state;\n});``````js\n//use each() to create 1 account for each form\neach(\n  $.forms,\n  create('Account', {\n    Kobo_ID__c: $.data.id,\n    Name: $.data.customer_name,\n    Phone: $.data.customer_phone,\n  })\n);\n```",
              "metadata": {
                "doc_title": "common",
                "docs_type": "adaptor_docs"
              },
              "score": 0.790600777
            },
            {
              "text": "All JavaScript arrays have a function\ncalled `map`, which takes a single callback argument.Array.map will iterate over every item in the array, invoke your callback\nfunction with it, save the result to a new array, and when it's finished, it\nwill return that array.```js\nconst array = ['a', 'b', 'c'];\nconst result = array.map(item => {\n  return item.toUpperCase();\n});\nconsole.log(array); // ['a', 'b', 'c'];\nconsole.log(result); // ['A', 'B', 'C'];```\n\nBecause functions are data in JavaScript, we can we-write that code like this\n(which might be a bit more readable)```js\nconst array = ['a', 'b', 'c'];\nconst upperCase = item => {\n  return item.toUpperCase();\n};\nconst result = array.map(upperCase);\nconsole.log(array); // ['a', 'b', 'c'];\nconsole.log(result); // ['A', 'B', 'C'];```\n\n\n\nThe `fn()` function, for example, ONLY allows you define a callback. This is\nuseful for running arbitrary code - if you want to drop down to raw JavaScript\nmode, this is how you do it:",
              "metadata": {
                "doc_title": "job-writing-guide",
                "docs_type": "general_docs"
              },
              "score": 0.788937509
            },
            {
              "text": "This is not meant to be an exhaustive guide,\njust a pointer to some good techniques on some of the newer aspects of the\nlanguage.### Using the `fn(...)` operation from the common adaptor\n\nWe recommend using the `fn(...)` operation to manipulate state and apply custom\nJavaScript to transform, manipulate, and clean data before sending to target\napplications.```js\nfn(state => {\n  //call state to edit\n  //add your custom javascript here to manipulate state\n  return state; //always return state\n});```### Variables: var vs let vs const\n\nJavaScript gives you three different ways to declare variables, and this can be\na bit confusing.\n\n- `var` is a variable that can have its value reassigned. You can re-declare a\n  `var` multiple times.\n- `let` is basically the same as a var, but cannot be redeclared and has subtly\n  different scoping rules.\n- `const` is used for variable whose values do not change.\n\nIt doesn't really matter which style you use (except perhaps if you try to\nassign to a `const`).\n\nMost OpenFn jobs are written in quite a functional style anyway - you may find\nyou don't even need to declare variables.\n\n\nWhat is functional programming?\nFunctional programming is a style of programming, increasingly popular in modern Javascript.\n\nBroadly, the idea is to minimize the usage of control flow statements (like\n`if/else`,`for`) and instead use chains of functions. In functional programming\nwe pass data through a pipeline to get the result we want sound familiar?).",
              "metadata": {
                "doc_title": "javascript",
                "docs_type": "general_docs"
              },
              "score": 0.804719508
            },
            {
              "text": "In the following sections, special systems will be described.#### Example user stories\n\n1 Logistics Management(LMIS)\n\n- LMIS is an area where a multitude of parallel, overlapping or competing\n  software solutions can be found in a single country\n- Although a basic LMIS configuration based on aggregate data can take you very\n  far, in some cases a transactional LMIS is necessary if you need to track such\n  detailed operations as returns, transfer between facilities, barcode reading,\n  batch and expiry managemen\n- In such a situation...\n\n2 Data Sharing for Health and Nutrition, Water Sanitation and Hygiene Projects\n\n- Case management sytsems such as CommCare are widely preffered in collecting\n  case data(or patient level data) due to its dominance in the sector and easy\n  of adoption. In such scenarios, ...\n\n3 DHIS2 Instance Synchronization\n\n- Different DHIS2 instances in a given organisation or government ministry may\n  be deployed on separate servers which places the need for synchronization in",
              "metadata": {
                "doc_title": "dhis2",
                "docs_type": "adaptor_docs"
              },
              "score": 0.755652666
            },
            {
              "text": "---\ntitle: Claude AI Adaptor\n---## About Claude\n\n[Claude](https://claude.ai/) is an AI assistant built by Anthropic. It provides\na family of large language models (LLMs) developed for natural language\nprocessing tasks such as text generation, summarization, and question answering.\n\nClaude models process text input to generate responses but do not have built-in\nmemory or autonomous decision-making. They can be integrated with external tools\nor APIs to execute actions beyond text-based outputs.## Use OpenFn + LLMs for AI-Driven Workflows\n\nWhile LLMs (like Claude or ChatGPT) can generate insights, recommendations, or\nstructured data, they often **lack direct execution capabilities**—meaning they\nneed an automation system to act on their outputs.\n\n**OpenFn workflows fill this gap by orchestrating actions based on LLM-generated\nresponses.**\n\nRemember that LLMs are imperfect. Learn more about your recommended approach to\nAI in our [Responsible AI Policy](https://www.openfn.org/ai).",
              "metadata": {
                "doc_title": "claude",
                "docs_type": "adaptor_docs"
              },
              "score": 0.728132069
            },
            {
              "text": "---\ntitle: OCL Adaptor\n---## About OCL\n\n[OCL (Open Concept Lab)](https://openconceptlab.org/) is an open-source platform that provides a collaborative environment for creating, managing, and sharing standardized healthcare terminologies, dictionaries, and value sets.\n\nRelationships between concepts are defined in OCL as `mappings`. The API supports searching and editing concepts and mappings, building `sources`, and logically grouping concepts and mappings into `collections`. [See OCL docs](https://docs.openconceptlab.org/en/latest/oclapi/overview.html#overview) to learn more, access the [Swagger API](https://api.openconceptlab.org/swagger/), and to learn more about the cloud instance available at [https://openconceptlab.org](https://openconceptlab.org).",
              "metadata": {
                "doc_title": "ocl",
                "docs_type": "adaptor_docs"
              },
              "score": 0.741265357
            },
            {
              "text": "---\ntitle: Javascript Tips\nsidebar_label: Javascript Tips\n---\n\nOpenFn supports all modern JavaScript features.\n\nThis section highlights some useful JavaScript features and operators which\nmight help make your code cleaner. This is not meant to be an exhaustive guide,\njust a pointer to some good techniques on some of the newer aspects of the\nlanguage.### Using the `fn(...)` operation from the common adaptor\n\nWe recommend using the `fn(...)` operation to manipulate state and apply custom\nJavaScript to transform, manipulate, and clean data before sending to target\napplications.```js\nfn(state => {\n  //call state to edit\n  //add your custom javascript here to manipulate state\n  return state; //always return state\n});```",
              "metadata": {
                "doc_title": "javascript",
                "docs_type": "general_docs"
              },
              "score": 0.801906824
            },
            {
              "text": "---\nid: library-intro\ntitle: The Community Job Library\nsidebar_label: Library Examples\nslug: library\n---## A growing knowledge base\n\nThere have been **over 3,000 distinct jobs written** for the OpenFn platform,\ndriving efficiency across the social sector. These jobs have run millions of\ntimes, connecting and automating critical technologies like CommCare, DHIS2,\nSalesforce, Kobo Toolbox, and more.\n\n**90% of at-scale OpenFn customers make their jobs publicly available** so that\nother organizations can learn from their implementations, yet we’re still\nconstantly asked to find examples of jobs that “create DHIS2 entities from\nCommCare cases” or “initiate payments when Kobo submissions arrive”.\n\nThe Job Library is our attempt to make this vast pool of real-world experience\navailable to everyone, automatically collecting and organizing non-sensitive job\nscripts from this diverse community of social sector integration experts to make\ndata integration safer, faster, and more scalable than ever before.",
              "metadata": {
                "doc_title": "library-intro",
                "docs_type": "adaptor_docs"
              },
              "score": 0.747790813
            }
          ],
          "search_results_sections": [
            "claude",
            "javascript",
            "library-intro",
            "dhis2",
            "job-writing-guide",
            "common",
            "ocl"
          ],
          "search_queries": [
            {
              "query": "language-common fn function syntax",
              "doc_type": null
            },
            {
              "query": "language-common",
              "doc_type": "adaptor_docs"
            }
          ],
          "config_version": 1,
          "prompts_version": 1,
          "usage": {
            "needs_docs": {
              "input_tokens": 206,
              "output_tokens": 4,
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 0
            },
            "generate_queries": {
              "input_tokens": 382,
              "output_tokens": 47,
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 0
            }
          }
        }
      }
    }
  },
  {
    "question": "What is wrong with this code? I get an error like \"fn is not defined\"",
    "fullResult": {
      "response": "Your code is missing the `fn` function wrapper. In OpenFn jobs, you need to use the `fn()` operation to run JavaScript code that manipulates the state.\n\nTry this instead:\n\n```js\nfn(state => {\n  console.log(state.data);\n  return state;\n});\n```\n\nThis properly wraps your `console.log` statement in the `fn()` operation, which is provided by the common adaptor.",
      "history": [
        {
          "role": "user",
          "content": "What is wrong with this code? I get an error like \"fn is not defined\""
        },
        {
          "role": "assistant",
          "content": "Your code is missing the `fn` function wrapper. In OpenFn jobs, you need to use the `fn()` operation to run JavaScript code that manipulates the state.\n\nTry this instead:\n\n```js\nfn(state => {\n  console.log(state.data);\n  return state;\n});\n```\n\nThis properly wraps your `console.log` statement in the `fn()` operation, which is provided by the common adaptor."
        }
      ],
      "usage": {
        "cache_creation_input_tokens": 9611,
        "cache_read_input_tokens": 1323,
        "input_tokens": 573,
        "output_tokens": 155
      },
      "meta": {
        "rag": {
          "search_results": [
            {
              "text": "In the following sections, special systems will be described.#### Example user stories\n\n1 Logistics Management(LMIS)\n\n- LMIS is an area where a multitude of parallel, overlapping or competing\n  software solutions can be found in a single country\n- Although a basic LMIS configuration based on aggregate data can take you very\n  far, in some cases a transactional LMIS is necessary if you need to track such\n  detailed operations as returns, transfer between facilities, barcode reading,\n  batch and expiry managemen\n- In such a situation...\n\n2 Data Sharing for Health and Nutrition, Water Sanitation and Hygiene Projects\n\n- Case management sytsems such as CommCare are widely preffered in collecting\n  case data(or patient level data) due to its dominance in the sector and easy\n  of adoption. In such scenarios, ...\n\n3 DHIS2 Instance Synchronization\n\n- Different DHIS2 instances in a given organisation or government ministry may\n  be deployed on separate servers which places the need for synchronization in",
              "metadata": {
                "doc_title": "dhis2",
                "docs_type": "adaptor_docs"
              },
              "score": 0.755652666
            },
            {
              "text": "---\ntitle: Claude AI Adaptor\n---## About Claude\n\n[Claude](https://claude.ai/) is an AI assistant built by Anthropic. It provides\na family of large language models (LLMs) developed for natural language\nprocessing tasks such as text generation, summarization, and question answering.\n\nClaude models process text input to generate responses but do not have built-in\nmemory or autonomous decision-making. They can be integrated with external tools\nor APIs to execute actions beyond text-based outputs.## Use OpenFn + LLMs for AI-Driven Workflows\n\nWhile LLMs (like Claude or ChatGPT) can generate insights, recommendations, or\nstructured data, they often **lack direct execution capabilities**—meaning they\nneed an automation system to act on their outputs.\n\n**OpenFn workflows fill this gap by orchestrating actions based on LLM-generated\nresponses.**\n\nRemember that LLMs are imperfect. Learn more about your recommended approach to\nAI in our [Responsible AI Policy](https://www.openfn.org/ai).",
              "metadata": {
                "doc_title": "claude",
                "docs_type": "adaptor_docs"
              },
              "score": 0.728132069
            },
            {
              "text": "This is not meant to be an exhaustive guide,\njust a pointer to some good techniques on some of the newer aspects of the\nlanguage.### Using the `fn(...)` operation from the common adaptor\n\nWe recommend using the `fn(...)` operation to manipulate state and apply custom\nJavaScript to transform, manipulate, and clean data before sending to target\napplications.```js\nfn(state => {\n  //call state to edit\n  //add your custom javascript here to manipulate state\n  return state; //always return state\n});```### Variables: var vs let vs const\n\nJavaScript gives you three different ways to declare variables, and this can be\na bit confusing.\n\n- `var` is a variable that can have its value reassigned. You can re-declare a\n  `var` multiple times.\n- `let` is basically the same as a var, but cannot be redeclared and has subtly\n  different scoping rules.\n- `const` is used for variable whose values do not change.\n\nIt doesn't really matter which style you use (except perhaps if you try to\nassign to a `const`).\n\nMost OpenFn jobs are written in quite a functional style anyway - you may find\nyou don't even need to declare variables.\n\n\nWhat is functional programming?\nFunctional programming is a style of programming, increasingly popular in modern Javascript.\n\nBroadly, the idea is to minimize the usage of control flow statements (like\n`if/else`,`for`) and instead use chains of functions. In functional programming\nwe pass data through a pipeline to get the result we want sound familiar?).",
              "metadata": {
                "doc_title": "javascript",
                "docs_type": "general_docs"
              },
              "score": 0.7739501
            },
            {
              "text": "You can determine this by reviewingthe job for which fields the split function is being called on and checking that\nthey are all present in the message.\n\nThe more you test and troubleshoot with a particular system, the more familiar\nwith its error messages you become.\n\n:::tip\n\nOpenFn has outlined several of the more common error messages specific to some\nof the systems that we have integrated in the past. Explore these systems and\ntheir error messages [here](/adaptors#connect-anything).\n\n:::## Leveraging search and filtering in OpenFn\n\nLeverage the various search functionalities in OpenFn to find the right runs to\nsupport your troubleshooting. You can search on the History page across OpenFn\nIDs, Inputs, and/or Logs.\n\nCheck out this [video](https://youtu.be/XIUykmLCxwQ?si=hquc8rPTJrAZkbbD) for how\nto use Search.",
              "metadata": {
                "doc_title": "troubleshooting",
                "docs_type": "general_docs"
              },
              "score": 0.769517541
            },
            {
              "text": "---\nid: library-intro\ntitle: The Community Job Library\nsidebar_label: Library Examples\nslug: library\n---## A growing knowledge base\n\nThere have been **over 3,000 distinct jobs written** for the OpenFn platform,\ndriving efficiency across the social sector. These jobs have run millions of\ntimes, connecting and automating critical technologies like CommCare, DHIS2,\nSalesforce, Kobo Toolbox, and more.\n\n**90% of at-scale OpenFn customers make their jobs publicly available** so that\nother organizations can learn from their implementations, yet we’re still\nconstantly asked to find examples of jobs that “create DHIS2 entities from\nCommCare cases” or “initiate payments when Kobo submissions arrive”.\n\nThe Job Library is our attempt to make this vast pool of real-world experience\navailable to everyone, automatically collecting and organizing non-sensitive job\nscripts from this diverse community of social sector integration experts to make\ndata integration safer, faster, and more scalable than ever before.",
              "metadata": {
                "doc_title": "library-intro",
                "docs_type": "adaptor_docs"
              },
              "score": 0.747790813
            },
            {
              "text": "---\ntitle: OCL Adaptor\n---## About OCL\n\n[OCL (Open Concept Lab)](https://openconceptlab.org/) is an open-source platform that provides a collaborative environment for creating, managing, and sharing standardized healthcare terminologies, dictionaries, and value sets.\n\nRelationships between concepts are defined in OCL as `mappings`. The API supports searching and editing concepts and mappings, building `sources`, and logically grouping concepts and mappings into `collections`. [See OCL docs](https://docs.openconceptlab.org/en/latest/oclapi/overview.html#overview) to learn more, access the [Swagger API](https://api.openconceptlab.org/swagger/), and to learn more about the cloud instance available at [https://openconceptlab.org](https://openconceptlab.org).",
              "metadata": {
                "doc_title": "ocl",
                "docs_type": "adaptor_docs"
              },
              "score": 0.741265357
            },
            {
              "text": "---\ntitle: Common Adaptor\n---## About OpenFn \"Common\" Language\n\nUse this adaptor to write JavaScript, or to leverage common expressions and\n[helper functions](/adaptors/packages/common-docs) for OpenFn.\n\nThis adaptor is typically used for transforming data in OpenFn workflows that\nautomate \"ETL\" (extract, transform, load) processes. See below examples.```js\n//use fn() to write your own functions\nfn(state => {\n  // write javascript...\n  // ...to do some things to state\n  console.log(state.data); //or to debug\n  return state;\n});``````js\n//use each() to create 1 account for each form\neach(\n  $.forms,\n  create('Account', {\n    Kobo_ID__c: $.data.id,\n    Name: $.data.customer_name,\n    Phone: $.data.customer_phone,\n  })\n);\n```",
              "metadata": {
                "doc_title": "common",
                "docs_type": "adaptor_docs"
              },
              "score": 0.774207294
            },
            {
              "text": "---\ntitle: Javascript Tips\nsidebar_label: Javascript Tips\n---\n\nOpenFn supports all modern JavaScript features.\n\nThis section highlights some useful JavaScript features and operators which\nmight help make your code cleaner. This is not meant to be an exhaustive guide,\njust a pointer to some good techniques on some of the newer aspects of the\nlanguage.### Using the `fn(...)` operation from the common adaptor\n\nWe recommend using the `fn(...)` operation to manipulate state and apply custom\nJavaScript to transform, manipulate, and clean data before sending to target\napplications.```js\nfn(state => {\n  //call state to edit\n  //add your custom javascript here to manipulate state\n  return state; //always return state\n});```",
              "metadata": {
                "doc_title": "javascript",
                "docs_type": "general_docs"
              },
              "score": 0.776681602
            },
            {
              "text": "When you want to inspect the content of state in between operations, add an\n`fn()` block with a `console.log`:```js\n// firstOperation(...);\n\nfn(state => {\n  console.log(state);\n  return state;\n});\n\n// secondOperation(...);```##### Create **debug.js** and paste the code below\n\n\n\n  Expand to see debug.js```jsx title=\"debug.js\"\n// Get all posts\nget('posts');\n\n// Get post by index helper function\nfn(state => {\n  // const getPostbyIndex = (index) => dataValue(index)(state);\n  console.log(dataValue(1));\n\n  return { ...state };\n});```##### Run **openfn debug.js -a http -s tmp/state.json**\n\n\n  Expected CLI logs```bash\n[CLI] ✘ TypeError: path.match is not a function\n    at dataPath (/tmp/openfn/repo/node_modules/@openfn/language-common/dist/index.cjs:258:26)\n    at dataValue (/tmp/openfn/repo/node_modules/@openfn/language-common/dist/index.cjs:262:22)\n    at getPostbyIndex (vm:module(0):5:37)\n    at vm:module(0):18:36\n    at /tmp/openfn/repo/node_modules/@openfn/language-common/dist/index.cjs:241:12\n    at file:///home/openfn/.asdf/installs/nodejs/18.12.0/lib/node_modules/@openfn/cli/node_modules/@openfn/runtime/dist/index.js:288:26\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async run (file:///home/openfn/.asdf/installs/nodejs/18.12.0/lib/node_modules/@openfn/cli/node_modules/@openfn/runtime/dist/index.js:269:18)\n    at async executeHandler (file:///home/openfn/.asdf/installs/nodejs/18.12.0/lib/node_modules/@openfn/cli/dist/process/runner.js:388:20)",
              "metadata": {
                "doc_title": "cli-walkthrough",
                "docs_type": "general_docs"
              },
              "score": 0.771517575
            }
          ],
          "search_results_sections": [
            "troubleshooting",
            "dhis2",
            "common",
            "cli-walkthrough",
            "javascript",
            "library-intro",
            "claude",
            "ocl"
          ],
          "search_queries": [
            {
              "query": "language-common fn is not defined error",
              "doc_type": null
            },
            {
              "query": "language-common",
              "doc_type": "adaptor_docs"
            }
          ],
          "config_version": 1,
          "prompts_version": 1,
          "usage": {
            "needs_docs": {
              "input_tokens": 168,
              "output_tokens": 4,
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 0
            },
            "generate_queries": {
              "input_tokens": 344,
              "output_tokens": 49,
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 0
            }
          }
        }
      }
    }
  },
  {
    "question": "Why does the http result not get written to my state?",
    "fullResult": {
      "response": "Your code is calling `http.get()`, but you're not capturing the result. Also, you need to use the exported function directly rather than nesting it inside `fn()`. \n\nTry this instead:\n\n```js\nget('https://jsonplaceholder.typicode.com/todos/1');\n```\n\nOr if you want to use the http module specifically:\n\n```js\nhttp.get('https://jsonplaceholder.typicode.com/todos/1');\n```\n\nBoth will update `state.data` with the response from the API.",
      "history": [
        {
          "role": "user",
          "content": "Why does the http result not get written to my state?"
        },
        {
          "role": "assistant",
          "content": "Your code is calling `http.get()`, but you're not capturing the result. Also, you need to use the exported function directly rather than nesting it inside `fn()`. \n\nTry this instead:\n\n```js\nget('https://jsonplaceholder.typicode.com/todos/1');\n```\n\nOr if you want to use the http module specifically:\n\n```js\nhttp.get('https://jsonplaceholder.typicode.com/todos/1');\n```\n\nBoth will update `state.data` with the response from the API."
        }
      ],
      "usage": {
        "cache_creation_input_tokens": 9643,
        "cache_read_input_tokens": 1323,
        "input_tokens": 619,
        "output_tokens": 177
      },
      "meta": {
        "rag": {
          "search_results": [
            {
              "text": ":::#### `state.data`\n\nThis key is where we put data related to a specific job run. On the platform,\nit's the work-order-specific data from a triggering HTTP request or some bit of\ninformation that's passed from one job to another.\n\nUsing CLI, `state.json` will be loaded automatically from the current directory\n\nOr you can specify the path to the state file by passing the option -s,\n--state-path\n\nSpecify a path to your `state.json` file with this command:```bash\nopenfn hello.js -a http -s tmp/state.json -o tmp/output.json```\n\n\n  Expand to see expected CLI logs```\n[CLI] ✔ Compiled job from hello.js\nGET request succeeded with 200 ✓\n[R/T] ✔ Operation 1 complete in 876ms\n[R/T] ✔ Operation 2 complete in 0ms\n[CLI] ✔ Writing output to tmp/output.json\n[CLI] ✔ Done in 1.222s! ✨```",
              "metadata": {
                "doc_title": "cli-walkthrough",
                "docs_type": "general_docs"
              },
              "score": 0.781597435
            },
            {
              "text": "---\ntitle: Common Adaptor\n---## About OpenFn \"Common\" Language\n\nUse this adaptor to write JavaScript, or to leverage common expressions and\n[helper functions](/adaptors/packages/common-docs) for OpenFn.\n\nThis adaptor is typically used for transforming data in OpenFn workflows that\nautomate \"ETL\" (extract, transform, load) processes. See below examples.```js\n//use fn() to write your own functions\nfn(state => {\n  // write javascript...\n  // ...to do some things to state\n  console.log(state.data); //or to debug\n  return state;\n});``````js\n//use each() to create 1 account for each form\neach(\n  $.forms,\n  create('Account', {\n    Kobo_ID__c: $.data.id,\n    Name: $.data.customer_name,\n    Phone: $.data.customer_phone,\n  })\n);\n```",
              "metadata": {
                "doc_title": "common",
                "docs_type": "adaptor_docs"
              },
              "score": 0.73940438
            },
            {
              "text": "---\nid: library-intro\ntitle: The Community Job Library\nsidebar_label: Library Examples\nslug: library\n---## A growing knowledge base\n\nThere have been **over 3,000 distinct jobs written** for the OpenFn platform,\ndriving efficiency across the social sector. These jobs have run millions of\ntimes, connecting and automating critical technologies like CommCare, DHIS2,\nSalesforce, Kobo Toolbox, and more.\n\n**90% of at-scale OpenFn customers make their jobs publicly available** so that\nother organizations can learn from their implementations, yet we’re still\nconstantly asked to find examples of jobs that “create DHIS2 entities from\nCommCare cases” or “initiate payments when Kobo submissions arrive”.\n\nThe Job Library is our attempt to make this vast pool of real-world experience\navailable to everyone, automatically collecting and organizing non-sensitive job\nscripts from this diverse community of social sector integration experts to make\ndata integration safer, faster, and more scalable than ever before.",
              "metadata": {
                "doc_title": "library-intro",
                "docs_type": "adaptor_docs"
              },
              "score": 0.747790813
            },
            {
              "text": "Best practice is to include a final state cleanup step that removes any datathat should not persist between runs or be output (like PII), for example:\n\n    // get data from a data source\n    get('https://jsonplaceholder.typicode.com/users')\n\n    // store retrieved data in state for use later in job\n    fn(state => {\n        state.users = state.data;\n      return state;\n    });\n\n    // get more data from another data source\n    get('https://jsonplaceholder.typicode.com/posts')\n\n    // store additional retrieved data in state for use later in job\n    fn(state => {\n      state.posts = state.data;\n      return state;\n    });\n\n    // compare data\n    fn(state => {\n      if (state.users.length > state.posts.length) {\n        // do something based on the comparison\n      }\n      return state;\n    });\n\n    // cleanup state at the end before finshing job\n    fn(state => {\n      state.data = null\n      state.users = null\n      state.posts = null\n   \n      return state;\n    });### Webhook triggered runs\n\nOn the platform, when a Run is triggered by a webhook event, the input state\ncontains important parts of the inbound **http request**.\n\nThe input state will look something like this:",
              "metadata": {
                "doc_title": "state",
                "docs_type": "general_docs"
              },
              "score": 0.803384721
            },
            {
              "text": "However, if you ever find\nyourself in a situation where you absolutely need to use a nested operation, you\nshould pass state into it directly, for example:```js\nget('/patients', { headers: { 'content-type': 'application/json' } }, state => {\n  each('$.data.patients[*]', (item, index) => {\n    item.id = `item-${index}`;\n  })(state); // Immediately invoke the Operation and pass state into it. This is naughty!\n});\npost('/patients', dataValue('patients'));```\n\nTo be clear, this is considered an anti-pattern and should not be used except in\nemergencies.## Reading state lazily\n\nA common problem in OpenFn coding is getting hold of the right state value at\nthe right time.\n\nConsider this code:```js\nget('/some-data');\npost('/some-other-data', state.data);",
              "metadata": {
                "doc_title": "job-writing-guide",
                "docs_type": "general_docs"
              },
              "score": 0.800386786
            },
            {
              "text": "---\ntitle: Claude AI Adaptor\n---## About Claude\n\n[Claude](https://claude.ai/) is an AI assistant built by Anthropic. It provides\na family of large language models (LLMs) developed for natural language\nprocessing tasks such as text generation, summarization, and question answering.\n\nClaude models process text input to generate responses but do not have built-in\nmemory or autonomous decision-making. They can be integrated with external tools\nor APIs to execute actions beyond text-based outputs.## Use OpenFn + LLMs for AI-Driven Workflows\n\nWhile LLMs (like Claude or ChatGPT) can generate insights, recommendations, or\nstructured data, they often **lack direct execution capabilities**—meaning they\nneed an automation system to act on their outputs.\n\n**OpenFn workflows fill this gap by orchestrating actions based on LLM-generated\nresponses.**\n\nRemember that LLMs are imperfect. Learn more about your recommended approach to\nAI in our [Responsible AI Policy](https://www.openfn.org/ai).",
              "metadata": {
                "doc_title": "claude",
                "docs_type": "adaptor_docs"
              },
              "score": 0.728132069
            },
            {
              "text": "In the following sections, special systems will be described.#### Example user stories\n\n1 Logistics Management(LMIS)\n\n- LMIS is an area where a multitude of parallel, overlapping or competing\n  software solutions can be found in a single country\n- Although a basic LMIS configuration based on aggregate data can take you very\n  far, in some cases a transactional LMIS is necessary if you need to track such\n  detailed operations as returns, transfer between facilities, barcode reading,\n  batch and expiry managemen\n- In such a situation...\n\n2 Data Sharing for Health and Nutrition, Water Sanitation and Hygiene Projects\n\n- Case management sytsems such as CommCare are widely preffered in collecting\n  case data(or patient level data) due to its dominance in the sector and easy\n  of adoption. In such scenarios, ...\n\n3 DHIS2 Instance Synchronization\n\n- Different DHIS2 instances in a given organisation or government ministry may\n  be deployed on separate servers which places the need for synchronization in",
              "metadata": {
                "doc_title": "dhis2",
                "docs_type": "adaptor_docs"
              },
              "score": 0.755652666
            },
            {
              "text": "Best practice is to include a final state cleanup step that removes any datathat should not persist between runs or be output (like PII), for example:\n\n    // get data from a data source\n    get('https://jsonplaceholder.typicode.com/users')\n\n    // store retrieved data in state for use later in job\n    fn(state => {\n        state.users = state.data;\n      return state;\n    });\n\n    // get more data from another data source\n    get('https://jsonplaceholder.typicode.com/posts')\n\n    // store additional retrieved data in state for use later in job\n    fn(state => {\n      state.posts = state.data;\n      return state;\n    });\n\n    // compare data\n    fn(state => {\n      if (state.users.length > state.posts.length) {\n        // do something based on the comparison\n      }\n      return state;\n    });\n\n    // cleanup state at the end before finshing job\n    fn(state => {\n      state.data = null\n      state.users = null\n      state.posts = null\n   \n      return state;\n    });",
              "metadata": {
                "doc_title": "state",
                "docs_type": "general_docs"
              },
              "score": 0.789750218
            },
            {
              "text": "---\ntitle: OCL Adaptor\n---## About OCL\n\n[OCL (Open Concept Lab)](https://openconceptlab.org/) is an open-source platform that provides a collaborative environment for creating, managing, and sharing standardized healthcare terminologies, dictionaries, and value sets.\n\nRelationships between concepts are defined in OCL as `mappings`. The API supports searching and editing concepts and mappings, building `sources`, and logically grouping concepts and mappings into `collections`. [See OCL docs](https://docs.openconceptlab.org/en/latest/oclapi/overview.html#overview) to learn more, access the [Swagger API](https://api.openconceptlab.org/swagger/), and to learn more about the cloud instance available at [https://openconceptlab.org](https://openconceptlab.org).",
              "metadata": {
                "doc_title": "ocl",
                "docs_type": "adaptor_docs"
              },
              "score": 0.741265357
            },
            {
              "text": "Consider this code:```js\nget('/some-data');\npost('/some-other-data', state.data);```\n\nThe code attempts to call the GET method on some REST API service, save the\nresult to `state.data`, and then pass that `state.data` value into a post call\nto send it somewhere else.\n\nCan you see the problem?\n\nThe value of `state.data` in the post call will resolve to `undefined` and so\nthe post will fail.\n\nThis is because Operations are\n[factory functions](#operations-run-at-the-top-level) (See:\n`What is a factory function?` above). They declare behaviour to be executed\nlater, and provide parameters to calibrate that behaviour. But they don't\nactually go off and do the work immediately.\n\nThose parameters will be resolved to values when the module loads (load-time),\nbefore any code has run (run-time), and before `state.data` has been assigned a\nvalue.\n\n\nMore details about job execution and parameter resolution\nLet's try to explain a bit more about what's happening.\n\nWhen your job runs, it will be evaluated in a Javascript engine and follow the",
              "metadata": {
                "doc_title": "job-writing-guide",
                "docs_type": "general_docs"
              },
              "score": 0.781112969
            }
          ],
          "search_results_sections": [
            "state",
            "dhis2",
            "library-intro",
            "cli-walkthrough",
            "ocl",
            "common",
            "claude",
            "job-writing-guide"
          ],
          "search_queries": [
            {
              "query": "http.get result not in state",
              "doc_type": null
            },
            {
              "query": "language-common",
              "doc_type": "adaptor_docs"
            }
          ],
          "config_version": 1,
          "prompts_version": 1,
          "usage": {
            "needs_docs": {
              "input_tokens": 183,
              "output_tokens": 4,
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 0
            },
            "generate_queries": {
              "input_tokens": 359,
              "output_tokens": 48,
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 0
            }
          }
        }
      }
    }
  },
  {
    "question": "would you please write a job for me that creates new datavaluesets under the\n\"Approved School CHP\" organization unit",
    "fullResult": {
      "response": "I can write a job to create a dataValueSet for the \"Approved School CHP\" organization unit. This would typically involve specifying the organization unit ID, a dataSet ID, period, and the data values to submit.\n\nHere's a basic implementation:\n\n```javascript\ncreate('dataValueSets', {\n  dataSet: 'DATASET_ID', // Replace with your actual dataSet ID\n  period: '202401', // Format: YYYYMM (January 2024 in this example)\n  orgUnit: 'ORGUNIT_ID', // Replace with the ID for \"Approved School CHP\"\n  dataValues: [\n    {\n      dataElement: 'DATA_ELEMENT_ID_1', // Replace with your actual data element ID\n      value: '10', // The value to submit\n      categoryOptionCombo: 'CATEGORY_OPTION_COMBO_ID', // Optional, if needed\n    },\n    // Add more data values as needed\n    {\n      dataElement: 'DATA_ELEMENT_ID_2',\n      value: '20',\n    }\n  ],\n});\n```\n\nTo use this job, you'll need to replace:\n1. `DATASET_ID` with your actual dataSet ID\n2. `ORGUNIT_ID` with the ID for \"Approved School CHP\"\n3. `DATA_ELEMENT_ID_1`, `DATA_ELEMENT_ID_2`, etc. with your actual data element IDs\n4. `CATEGORY_OPTION_COMBO_ID` with your category option combo ID (if needed)\n\nYou'll need to know these IDs from your DHIS2 system. You can find them by using the \"get\" operation first to query your DHIS2 system for the relevant information.",
      "history": [
        {
          "role": "user",
          "content": "would you please write a job for me that creates new datavaluesets under the\n\"Approved School CHP\" organization unit"
        },
        {
          "role": "assistant",
          "content": "I can write a job to create a dataValueSet for the \"Approved School CHP\" organization unit. This would typically involve specifying the organization unit ID, a dataSet ID, period, and the data values to submit.\n\nHere's a basic implementation:\n\n```javascript\ncreate('dataValueSets', {\n  dataSet: 'DATASET_ID', // Replace with your actual dataSet ID\n  period: '202401', // Format: YYYYMM (January 2024 in this example)\n  orgUnit: 'ORGUNIT_ID', // Replace with the ID for \"Approved School CHP\"\n  dataValues: [\n    {\n      dataElement: 'DATA_ELEMENT_ID_1', // Replace with your actual data element ID\n      value: '10', // The value to submit\n      categoryOptionCombo: 'CATEGORY_OPTION_COMBO_ID', // Optional, if needed\n    },\n    // Add more data values as needed\n    {\n      dataElement: 'DATA_ELEMENT_ID_2',\n      value: '20',\n    }\n  ],\n});\n```\n\nTo use this job, you'll need to replace:\n1. `DATASET_ID` with your actual dataSet ID\n2. `ORGUNIT_ID` with the ID for \"Approved School CHP\"\n3. `DATA_ELEMENT_ID_1`, `DATA_ELEMENT_ID_2`, etc. with your actual data element IDs\n4. `CATEGORY_OPTION_COMBO_ID` with your category option combo ID (if needed)\n\nYou'll need to know these IDs from your DHIS2 system. You can find them by using the \"get\" operation first to query your DHIS2 system for the relevant information."
        }
      ],
      "usage": {
        "cache_creation_input_tokens": 18899,
        "cache_read_input_tokens": 1323,
        "input_tokens": 600,
        "output_tokens": 463
      },
      "meta": {
        "rag": {
          "search_results": [
            {
              "text": "**Example:** Create a dataValueSet with related dataValues```js\ncreate('dataValueSets', {\n  dataSet: 'pBOMPrpg1QX',\n  completeDate: '2014-02-03',\n  period: '201401',\n  orgUnit: 'DiszpKrYNg8',\n  dataValues: [\n    {\n      dataElement: 'f7n9E0hX8qk',\n      value: '1',\n    },\n    {\n      dataElement: 'Ix2HsbDMLea',\n      value: '2',\n    },\n    {\n      dataElement: 'eY5ehpbEsB7',\n      value: '3',\n    },\n  ],\n});```\n**Example:** Create an enrollment```js\ncreate('enrollments', {\n  trackedEntity: 'bmshzEacgxa',\n  orgUnit: 'TSyzvBiovKh',\n  program: 'gZBxv9Ujxg0',\n  enrollmentDate: '2013-09-17',\n  incidentDate: '2013-09-17',\n});```\n**Example:** Create an multiple objects with the Tracker API```js\n create(\"tracker\", {\n  enrollments: [\n    {\n      trackedEntity: \"bmshzEacgxa\",\n      orgUnit: \"TSyzvBiovKh\",\n      program: \"gZBxv9Ujxg0\",\n      enrollmentDate: \"2013-09-17\",\n      incidentDate: \"2013-09-17\",\n    },\n  ],\n  trackedEntities: [\n    {\n      orgUnit: \"TSyzvBiovKh\",\n      trackedEntityType: \"nEenWmSyUEp\",\n      attributes: [\n        {\n          attribute: \"w75KJ2mc4zz\",\n          value: \"Gigiwe\",\n        },\n      ],\n    },\n  ],\n});",
              "metadata": {
                "doc_title": "dhis2",
                "docs_type": "adaptor_functions"
              },
              "score": 0.761193335
            },
            {
              "text": "Both steps should be executed successfully and\nyou should see in the final state `opvDosesGivenCount: 3` added.### Step 3: Map and Load to DHIS2\n\nCreate a third Step after `Count OPV Dose Given` as follows:\n\n- Name: `Map and Load to DHIS2`\n- Adaptor: `dhis2`\n- Version: `v4.0.3`\n- Credential: new `dhis2` credential with the following credential configuration```json\n{\n  \"hostUrl\": \"https://play.dhis2.org/dev\",\n  \"username\": \"admin\",\n  \"password\": \"district\"\n}```\n\nIn this Step, we want to add logic to import `dataValues` to DHIS2 to \"report\"\non the aggregated OPV0 immunization does count calculated in Step 2.\n\nTo do so, open the [Inspector](../build/steps/step-editor.md), add the following\nJob code in the Editor:",
              "metadata": {
                "doc_title": "kobo-to-dhis2",
                "docs_type": "general_docs"
              },
              "score": 0.775979578
            },
            {
              "text": "# DHIS2## App Overview\n\nThe District Health Information Software 2\n([DHIS2](https://www.dhis2.org/about)) is an open source, web-based health\nmanagement information system (HMIS) platform.\n\nToday, DHIS2 is the world's largest HMIS platform, in use by 73 low and\nmiddle-income countries. Approximately 2.4 billion people live in countries\nwhere DHIS2 is used. Including NGO-based programs, DHIS2 is in use in more than\n100 countries.\n\nThe [core DHIS2](https://dhis2.org/overview/) software development is managed by\nthe Health Information Systems Program (HISP) at the University of Oslo\n([UiO](https://www.uio.no/english/)).\n\nHISP is a global network comprised of 13 in-country and regional organizations,\nproviding day-in, day-out direct support to government ministries and local\nimplementers of DHIS2.\n\nDHIS2 exposes its data and service method integration pipeline through a\n[RESTful](https://dhis2.stoplight.io/docs/dhis2) Web Application Programing",
              "metadata": {
                "doc_title": "dhis2",
                "docs_type": "adaptor_docs"
              },
              "score": 0.872971177
            },
            {
              "text": "nia%2C%20and%20Ghana%20%28HISP%20Team%20at%20UIO-2017%29.pdf)\n\n5\n[CRVS Fellowship report SmartVA and DHIS2 integration in Sri Lanka](https://crvsgateway.info/file/17042/3010https://crvsgateway.info/file/17042/3010)## Integration Options\n\n1. Data integration via DHIS2 Web API:\n   https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-235/web-api.html\n\n2. Metadata integration via DHIS2 Web API. OpenFn implementations can leverage\n   the [`DHIS2`](https://github.com/OpenFn/language-dhis2) adaptor.## Integration Examples\n\n1. DHIS2 Demo Implementations: https://github.com/OpenFn/dhis2-demo\n2. Lesotho Integration connecting two DHIS2 instances:\n   https://github.com/OpenFn/lesotho-dhis2",
              "metadata": {
                "doc_title": "dhis2",
                "docs_type": "adaptor_docs"
              },
              "score": 0.8337304
            },
            {
              "text": "In such scenarios, ...\n\n3 DHIS2 Instance Synchronization\n\n- Different DHIS2 instances in a given organisation or government ministry may\n  be deployed on separate servers which places the need for synchronization in  both metadata and data values. DHIS2 provides API endpoints to enable which\n  enable organisations to automate the synchronization process of data/metadata\n  across a cluster of DHIS2 servers.### Further Reading:\n\n1\n[DHIS2 Web API](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-235/web-api.html)\n\n2\n[DHIS2 Integration Concepts](https://docs.dhis2.org/2.28/en/implementer/html/integration.html#:~:text=DHIS2%20is%20often%20used%20as,on%20stocks%20and%20human%20resources.)\n\n3\n[DHIS2 Integration Scenarios](https://docs.dhis2.org/master/en/implementer/html/different-dhis2-integration-scenarios.html)\n\n4\n[Interoperable DHIS2-LMIS in Senegal, Tanzania and Ghana](https://www.childhealthtaskforce.org/sites/default/files/2019-01/Interoperable%20DHIS2-LMIS%20in%20Senegal%2C%20Tanzania%2C%20and%20Ghana%20%28HISP%20Team%20at%20UIO-2017%29.pdf)\n\n5\n[CRVS Fellowship report SmartVA and DHIS2 integration in Sri Lanka](https://crvsgateway.info/file/17042/3010https://crvsgateway.info/file/17042/3010)",
              "metadata": {
                "doc_title": "dhis2",
                "docs_type": "adaptor_docs"
              },
              "score": 0.834647417
            },
            {
              "text": "3\n[DHIS2 Integration Scenarios](https://docs.dhis2.org/master/en/implementer/html/different-dhis2-integration-scenarios.html)\n\n4\n[Interoperable DHIS2-LMIS in Senegal, Tanzania and Ghana](https://www.childhealthtaskforce.org/sites/default/files/2019-01/Interoperable%20DHIS2-LMIS%20in%20Senegal%2C%20Tanzania%2C%20and%20Ghana%20%28HISP%20Team%20at%20UIO-2017%29.pdf)\n\n5\n[CRVS Fellowship report SmartVA and DHIS2 integration in Sri Lanka](https://crvsgateway.info/file/17042/3010https://crvsgateway.info/file/17042/3010)## Integration Options\n\n1. Data integration via DHIS2 Web API:\n   https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-235/web-api.html\n\n2. Metadata integration via DHIS2 Web API. OpenFn implementations can leverage\n   the [`DHIS2`](https://github.com/OpenFn/language-dhis2) adaptor.",
              "metadata": {
                "doc_title": "dhis2",
                "docs_type": "adaptor_docs"
              },
              "score": 0.834550321
            },
            {
              "text": ":::#### Explanation:\n\n- `create('dataValueSets', {...})`: This OpenFn function is used to create a new\n  datavalueset in DHIS2.\n- `dataSet`, `completeDate`, `period`, `orgUnit`: Details of the datavalueset.\n- `dataValues`: An array containing data elements and their corresponding\n  values.#### Testing\n\nSave your changes then navigate to the first step(Get Kobo Form Submission) and\ncreate an empty input `{}` then click `Create New Work Order` button to run the\nworkflow. All steps should be executed successful and you should see the\n`OPV0 doses given` updated in DHIS2. See [Workflow docs](../build/workflows.md)\nif you need help running or testing Workflows.### Conclusion\n\nCongratulations! You've successfully created an OpenFn workflow to automate the\nprocess of fetching form submissions from Kobotoolbox, calculated the aggregated\ncount of OPV doses given to beneficiaries, and reporting this count as\n`dataValues` to DHIS2.\n\n:::tip Are you blocked? Have questions?\n\nWatch this\n[Introduction to Workflows and History tutorial](https://youtu.be/hae8eM0iYnM?si=LGbv1TK0W9L9y12u)\nor post your questions on the [Community](https://community.openfn.org) to get\nhelp!\n\n:::",
              "metadata": {
                "doc_title": "kobo-to-dhis2",
                "docs_type": "general_docs"
              },
              "score": 0.783116162
            },
            {
              "text": "[Configuring report in DHIS2](https://docs.dhis2.org/en/implement/database-design/aggregate-system-design/indicators.html#:~:text=In%20DHIS2%2C%20the%20indicator%20is,do%20not%20have%20a%20denominator.)4. [DHIS2 terminology](https://dhis2-app-course.ifi.uio.no/learn/dhis2/introduction/overview/terminologies/)## Integration Use Cases\n\nDHIS2 has been expanding its reach into many health systems. Starting from its\nfamiliar grounds of aggregate data sets for routine data it has included patient\nrelated data and then data in the areas of HR, finance, logistics and laboratory\nmanagement.\n\nFor several years now, DHIS2 has grown its data management activities\norganically, allowing the actual usage to lead to sometimes unforeseen\nsolutions. However, there are also limits to where leveraging DHIS2 seems\nuseful. In the following sections, special systems will be described.",
              "metadata": {
                "doc_title": "dhis2",
                "docs_type": "adaptor_docs"
              },
              "score": 0.826316357
            },
            {
              "text": "To do so, open the [Inspector](../build/steps/step-editor.md), add the following\nJob code in the Editor:```javascript\n// Import to DHIS2\ncreate('dataValueSets', state => ({\n  dataSet: 'BfMAe6Itzgt', // Child Health\n  period: '202402', // Feb 2024\n  orgUnit: 'DiszpKrYNg8', // Ngelehun CHC\n  dataValues: [\n    {\n      categoryOptionCombo: 'Prlt0C1RF0s', //Fixed <1yr\n      dataElement: 'x3Do5e7g4Qo', // OPV0 doses given\n      value: state.opvDosesGivenCount, //# of OPV0 doses given\n    },\n  ],\n}));\n```\n\n:::tip Need help writing job code? Or modifying this logic?\n\nCheck out the docs on the [\"dhis2\" Adaptor](/adaptors/dhis2),\n[configuring Steps](../build/steps/steps.md), and\n[job-writing](../jobs/job-writing-guide.md).\n\n:::",
              "metadata": {
                "doc_title": "kobo-to-dhis2",
                "docs_type": "general_docs"
              },
              "score": 0.794911861
            },
            {
              "text": "It gives you the\n  ability to do something to the state and return transformed data to state;\n- `opvDosesGivenCount`: Counts the occurrences of 'yes' in the `OPV0_dose_given`\n  field.#### Testing:\n\nSelect the first step `Get Kobo Form Submission` and `Create New Work Order`\nwith an empty input ([see Workflow docs](../build/workflows.md) if you need help\nwith running and testing steps). Both steps should be executed successfully and\nyou should see in the final state `opvDosesGivenCount: 3` added.### Step 3: Map and Load to DHIS2\n\nCreate a third Step after `Count OPV Dose Given` as follows:\n\n- Name: `Map and Load to DHIS2`\n- Adaptor: `dhis2`\n- Version: `v4.0.3`\n- Credential: new `dhis2` credential with the following credential configuration```json\n{\n  \"hostUrl\": \"https://play.dhis2.org/dev\",\n  \"username\": \"admin\",\n  \"password\": \"district\"\n}",
              "metadata": {
                "doc_title": "kobo-to-dhis2",
                "docs_type": "general_docs"
              },
              "score": 0.761901319
            }
          ],
          "search_results_sections": [
            "dhis2",
            "kobo-to-dhis2"
          ],
          "search_queries": [
            {
              "query": "dhis2",
              "doc_type": "adaptor_docs"
            },
            {
              "query": "create datavaluesets in dhis2",
              "doc_type": null
            }
          ],
          "config_version": 1,
          "prompts_version": 1,
          "usage": {
            "needs_docs": {
              "input_tokens": 178,
              "output_tokens": 4,
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 0
            },
            "generate_queries": {
              "input_tokens": 354,
              "output_tokens": 50,
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 0
            }
          }
        }
      }
    }
  },
  {
    "question": "What do I do now?",
    "fullResult": {
      "response": "You've created a basic job using the common adaptor that simply returns the current state. This is a good starting point.\n\nTo build a useful job, you need to decide what you want to achieve:\n\n1. If you want to transform data, use the `fn()` function to manipulate state\n2. If you need to process multiple records, use `each()` to iterate through items\n3. If you need to make HTTP requests, add operations like `get()` or `post()`\n\nHere's a simple example that transforms data:\n\n```js\nfn(state => {\n  // Extract data you need\n  const data = state.data;\n  \n  // Transform it\n  const transformed = {\n    ...data,\n    processed: true,\n    timestamp: new Date().toISOString()\n  };\n  \n  // Return updated state\n  return {...state, data: transformed};\n});\n```\n\nWhat are you trying to accomplish with this job?",
      "history": [
        {
          "role": "user",
          "content": "What do I do now?"
        },
        {
          "role": "assistant",
          "content": "You've created a basic job using the common adaptor that simply returns the current state. This is a good starting point.\n\nTo build a useful job, you need to decide what you want to achieve:\n\n1. If you want to transform data, use the `fn()` function to manipulate state\n2. If you need to process multiple records, use `each()` to iterate through items\n3. If you need to make HTTP requests, add operations like `get()` or `post()`\n\nHere's a simple example that transforms data:\n\n```js\nfn(state => {\n  // Extract data you need\n  const data = state.data;\n  \n  // Transform it\n  const transformed = {\n    ...data,\n    processed: true,\n    timestamp: new Date().toISOString()\n  };\n  \n  // Return updated state\n  return {...state, data: transformed};\n});\n```\n\nWhat are you trying to accomplish with this job?"
        }
      ],
      "usage": {
        "cache_creation_input_tokens": 9702,
        "cache_read_input_tokens": 1323,
        "input_tokens": 531,
        "output_tokens": 267
      },
      "meta": {
        "rag": {
          "search_results": [
            {
              "text": "In the following sections, special systems will be described.#### Example user stories\n\n1 Logistics Management(LMIS)\n\n- LMIS is an area where a multitude of parallel, overlapping or competing\n  software solutions can be found in a single country\n- Although a basic LMIS configuration based on aggregate data can take you very\n  far, in some cases a transactional LMIS is necessary if you need to track such\n  detailed operations as returns, transfer between facilities, barcode reading,\n  batch and expiry managemen\n- In such a situation...\n\n2 Data Sharing for Health and Nutrition, Water Sanitation and Hygiene Projects\n\n- Case management sytsems such as CommCare are widely preffered in collecting\n  case data(or patient level data) due to its dominance in the sector and easy\n  of adoption. In such scenarios, ...\n\n3 DHIS2 Instance Synchronization\n\n- Different DHIS2 instances in a given organisation or government ministry may\n  be deployed on separate servers which places the need for synchronization in",
              "metadata": {
                "doc_title": "dhis2",
                "docs_type": "adaptor_docs"
              },
              "score": 0.755652666
            },
            {
              "text": "---\ntitle: Claude AI Adaptor\n---## About Claude\n\n[Claude](https://claude.ai/) is an AI assistant built by Anthropic. It provides\na family of large language models (LLMs) developed for natural language\nprocessing tasks such as text generation, summarization, and question answering.\n\nClaude models process text input to generate responses but do not have built-in\nmemory or autonomous decision-making. They can be integrated with external tools\nor APIs to execute actions beyond text-based outputs.## Use OpenFn + LLMs for AI-Driven Workflows\n\nWhile LLMs (like Claude or ChatGPT) can generate insights, recommendations, or\nstructured data, they often **lack direct execution capabilities**—meaning they\nneed an automation system to act on their outputs.\n\n**OpenFn workflows fill this gap by orchestrating actions based on LLM-generated\nresponses.**\n\nRemember that LLMs are imperfect. Learn more about your recommended approach to\nAI in our [Responsible AI Policy](https://www.openfn.org/ai).",
              "metadata": {
                "doc_title": "claude",
                "docs_type": "adaptor_docs"
              },
              "score": 0.728132069
            },
            {
              "text": "---\nid: library-intro\ntitle: The Community Job Library\nsidebar_label: Library Examples\nslug: library\n---## A growing knowledge base\n\nThere have been **over 3,000 distinct jobs written** for the OpenFn platform,\ndriving efficiency across the social sector. These jobs have run millions of\ntimes, connecting and automating critical technologies like CommCare, DHIS2,\nSalesforce, Kobo Toolbox, and more.\n\n**90% of at-scale OpenFn customers make their jobs publicly available** so that\nother organizations can learn from their implementations, yet we’re still\nconstantly asked to find examples of jobs that “create DHIS2 entities from\nCommCare cases” or “initiate payments when Kobo submissions arrive”.\n\nThe Job Library is our attempt to make this vast pool of real-world experience\navailable to everyone, automatically collecting and organizing non-sensitive job\nscripts from this diverse community of social sector integration experts to make\ndata integration safer, faster, and more scalable than ever before.",
              "metadata": {
                "doc_title": "library-intro",
                "docs_type": "adaptor_docs"
              },
              "score": 0.747790813
            },
            {
              "text": "---\ntitle: Common Adaptor\n---## About OpenFn \"Common\" Language\n\nUse this adaptor to write JavaScript, or to leverage common expressions and\n[helper functions](/adaptors/packages/common-docs) for OpenFn.\n\nThis adaptor is typically used for transforming data in OpenFn workflows that\nautomate \"ETL\" (extract, transform, load) processes. See below examples.```js\n//use fn() to write your own functions\nfn(state => {\n  // write javascript...\n  // ...to do some things to state\n  console.log(state.data); //or to debug\n  return state;\n});``````js\n//use each() to create 1 account for each form\neach(\n  $.forms,\n  create('Account', {\n    Kobo_ID__c: $.data.id,\n    Name: $.data.customer_name,\n    Phone: $.data.customer_phone,\n  })\n);\n```",
              "metadata": {
                "doc_title": "common",
                "docs_type": "adaptor_docs"
              },
              "score": 0.763494194
            },
            {
              "text": "Learn more about adaptors here: [docs.openfn.org/adaptors](/adaptors/)#### Basic usage:\n\nLet’s use\n[@openfn/language-http](https://www.npmjs.com/package/@openfn/language-http)\nadaptor to fetch a list of forms from\n[https://jsonplaceholder.typicode.com/](https://jsonplaceholder.typicode.com/)#### Tasks:\n\n1. Create a file called `getPosts.js` and write the following code\n\n   ```jsx title=getPosts.js\n   get('https://jsonplaceholder.typicode.com/posts');\n   fn(state => {\n     console.log(state.data[0]);\n     return state;\n   });\n   ```\n\n2. Run the job by running```bash\nopenfn getPosts.js -i -a http -o tmp/output.json```\n\n:::info Understanding CLI arguments\n\nUse `-a` to specify the adaptor; use `-i` to auto-install the necessary adaptor\n\nRun `openfn help` to see the full list of CLI arguments.\n\n:::\n\nSince it is our first time using the `http` adaptor, we are installing the\nadaptor using `-i` argument\n\n\n  3. Expand to see expected CLI logs",
              "metadata": {
                "doc_title": "cli-walkthrough",
                "docs_type": "general_docs"
              },
              "score": 0.757328689
            },
            {
              "text": "Expand to see expected CLI logs```bash\n  [CLI] ✔ Installing packages...\n  [CLI] ✔ Installed @openfn/language-http@4.2.8\n  [CLI] ✔ Installation complete in 14.555s\n  [CLI] ✔ Compiled from getPosts.js\n  [R/T] ♦ Starting job job-1\n  GET request succeeded with 200 ✓\n  [JOB] ℹ {\n    userId: 1,\n    id: 1,\n    title: 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit',\n    body: 'quia et suscipit\\n' +\n      'suscipit recusandae consequuntur expedita et cum\\n' +\n      'reprehenderit molestiae ut ut quas totam\\n' +\n      'nostrum rerum est autem sunt rem eveniet architecto'\n  }\n  [R/T] ✔ Completed job job-1 in 872ms\n  [CLI] ✔ State written to tmp/output.json\n  [CLI] ✔ Finished in 15.518s ✨",
              "metadata": {
                "doc_title": "cli-walkthrough",
                "docs_type": "general_docs"
              },
              "score": 0.76872766
            },
            {
              "text": "---\ntitle: OCL Adaptor\n---## About OCL\n\n[OCL (Open Concept Lab)](https://openconceptlab.org/) is an open-source platform that provides a collaborative environment for creating, managing, and sharing standardized healthcare terminologies, dictionaries, and value sets.\n\nRelationships between concepts are defined in OCL as `mappings`. The API supports searching and editing concepts and mappings, building `sources`, and logically grouping concepts and mappings into `collections`. [See OCL docs](https://docs.openconceptlab.org/en/latest/oclapi/overview.html#overview) to learn more, access the [Swagger API](https://api.openconceptlab.org/swagger/), and to learn more about the cloud instance available at [https://openconceptlab.org](https://openconceptlab.org).",
              "metadata": {
                "doc_title": "ocl",
                "docs_type": "adaptor_docs"
              },
              "score": 0.741265357
            },
            {
              "text": "Expand to see expected CLI logs```bash\n  [CLI] ✔ Installing packages...\n  [CLI] ✔ Installed @openfn/language-http@4.2.8\n  [CLI] ✔ Installation complete in 14.555s\n  [CLI] ✔ Compiled from getPosts.js\n  [R/T] ♦ Starting job job-1\n  GET request succeeded with 200 ✓\n  [JOB] ℹ {\n    userId: 1,\n    id: 1,\n    title: 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit',\n    body: 'quia et suscipit\\n' +\n      'suscipit recusandae consequuntur expedita et cum\\n' +\n      'reprehenderit molestiae ut ut quas totam\\n' +\n      'nostrum rerum est autem sunt rem eveniet architecto'\n  }\n  [R/T] ✔ Completed job job-1 in 872ms\n  [CLI] ✔ State written to tmp/output.json\n  [CLI] ✔ Finished in 15.518s ✨```\n\n\n\n:::warning Placeholder Data\n\nThe data displayed in this CLI logs is generated from a\n[JSONPlaceholder](https://jsonplaceholder.typicode.com/) API and does not\nrepresent real-world information. It is intended for testing and development\npurposes only.\n\nFor accurate testing, consider using real data from your API or service.\n\n:::",
              "metadata": {
                "doc_title": "cli-walkthrough",
                "docs_type": "general_docs"
              },
              "score": 0.763017178
            },
            {
              "text": "There is no specific format for your\nresponse, as users can parse it any way they'd like, extracting relevant dataand then performing other actions—like loading it into a destination system—with\nthat data. See [language-http](https://www.github.com/openfn/language-http) for\ndetails on how users make these generic HTTP requests.### Payload sizing\n\nIf you're using the platform, and you're not planning on using an enterprise\nplan you'll have to consider the size of the data you're sending in each\npayload. Run `state` is typically limited to `10MB` and you should therefore\nkeep your payloads well below that limit.## Receiving data from OpenFn\n\nTo make it easy for users to connect to your application, it's highly\nrecommended that you create a language-package with your required authentication\nand a set of simple, allowable actions nicely abstracted into \"helper\nfunctions\". See [language-dhis2](https://www.github.com/openfn/language-dhis2)\nfor an example of a language-package which creates a simpler interface for a\ntraditional JSON-based REST api. Adaptors are written in Javascript and execute\nin Node. You can convert OpenFn's JSON into XML, or any other format before\nsending it to your application and you may make use of any node modules you'd\nlike. See\n[language-postgresql](https://www.github.com/openfn/language-postgresql) for an\nexample of an adaptor that connects directly to PostgreSQL databases using a\npopular NPM module called \"pg\".\n\nTo receive data from OpenFn's generic `language-http` adaptor, your application\nmust allow either basic, token, or digest authenticated POST, PUT, or GET",
              "metadata": {
                "doc_title": "build-compliant-apps",
                "docs_type": "general_docs"
              },
              "score": 0.753546894
            }
          ],
          "search_results_sections": [
            "claude",
            "library-intro",
            "build-compliant-apps",
            "ocl",
            "dhis2",
            "common",
            "cli-walkthrough"
          ],
          "search_queries": [
            {
              "query": "getting started with language-common",
              "doc_type": null
            },
            {
              "query": "language-common",
              "doc_type": "adaptor_docs"
            }
          ],
          "config_version": 1,
          "prompts_version": 1,
          "usage": {
            "needs_docs": {
              "input_tokens": 154,
              "output_tokens": 4,
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 0
            },
            "generate_queries": {
              "input_tokens": 330,
              "output_tokens": 47,
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 0
            }
          }
        }
      }
    }
  },
  {
    "question": "Can you write a cron code that will trigger at 1am India time?",
    "fullResult": {
      "response": "In OpenFn, you don't write cron code directly in job scripts. Triggers are configured separately in the platform interface.\n\nTo trigger a job at 1am India time (UTC+5:30), you would set up a time trigger in the OpenFn interface with:\n\n```\n30 19 * * *\n```\n\nThis is standard cron format representing 19:30 UTC, which is 1:00am in India time.\n\nWhen setting up the trigger in the OpenFn platform, you'll select \"Timer\" as the trigger type, then enter this cron expression.",
      "history": [
        {
          "role": "user",
          "content": "Can you write a cron code that will trigger at 1am India time?"
        },
        {
          "role": "assistant",
          "content": "In OpenFn, you don't write cron code directly in job scripts. Triggers are configured separately in the platform interface.\n\nTo trigger a job at 1am India time (UTC+5:30), you would set up a time trigger in the OpenFn interface with:\n\n```\n30 19 * * *\n```\n\nThis is standard cron format representing 19:30 UTC, which is 1:00am in India time.\n\nWhen setting up the trigger in the OpenFn platform, you'll select \"Timer\" as the trigger type, then enter this cron expression."
        }
      ],
      "usage": {
        "cache_creation_input_tokens": 7080,
        "cache_read_input_tokens": 1323,
        "input_tokens": 223,
        "output_tokens": 136
      },
      "meta": {
        "rag": {
          "search_results": [],
          "search_results_sections": [],
          "search_queries": [],
          "config_version": 1,
          "prompts_version": 1,
          "usage": {
            "needs_docs": {
              "input_tokens": 165,
              "output_tokens": 4,
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 0
            },
            "generate_queries": {}
          }
        }
      }
    }
  },
  {
    "question": "Who can see these messages?",
    "fullResult": {
      "response": "Only users who have access to this job in the workflow can see these chat messages. Chat sessions are saved to each job, so anyone with permission to view the workflow will see our conversation.",
      "history": [
        {
          "role": "user",
          "content": "Who can see these messages?"
        },
        {
          "role": "assistant",
          "content": "Only users who have access to this job in the workflow can see these chat messages. Chat sessions are saved to each job, so anyone with permission to view the workflow will see our conversation."
        }
      ],
      "usage": {
        "cache_creation_input_tokens": 0,
        "cache_read_input_tokens": 8403,
        "input_tokens": 201,
        "output_tokens": 45
      },
      "meta": {
        "rag": {
          "search_results": [],
          "search_results_sections": [],
          "search_queries": [],
          "config_version": 1,
          "prompts_version": 1,
          "usage": {
            "needs_docs": {
              "input_tokens": 154,
              "output_tokens": 4,
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 0
            },
            "generate_queries": {}
          }
        }
      }
    }
  },
  {
    "question": "What is fhir and how do I use it?",
    "fullResult": {
      "response": "FHIR (Fast Healthcare Interoperability Resources) is a standard for representing and exchanging healthcare data electronically. It's designed to facilitate interoperability between different healthcare systems.\n\nOpenFn provides multiple FHIR-related adaptors:\n- `fhir` - A generic adaptor for basic FHIR operations\n- `fhir-r4` - Specifically for FHIR Release 4\n- `fhir-fr` - A custom adaptor for the France FHIR Implementation Guide\n- `fhir-ndr-et` - A custom adaptor for Ethiopia's HIV Treatment & Care Services\n\nTo use FHIR with OpenFn, you'd need to:\n\n1. Install the appropriate FHIR adaptor for your needs\n2. Set up credentials to connect to your FHIR server\n3. Use the adaptor's operations to interact with FHIR resources\n\nFHIR can be integrated via:\n- REST API for scheduled or bulk synchronizations\n- Webhooks/subscriptions for real-time event-based integration\n\nFor more information and detailed documentation, visit:\n- https://docs.openfn.org/adaptors/fhir\n- https://www.hl7.org/fhir/overview.html",
      "history": [
        {
          "role": "user",
          "content": "What is fhir and how do I use it?"
        },
        {
          "role": "assistant",
          "content": "FHIR (Fast Healthcare Interoperability Resources) is a standard for representing and exchanging healthcare data electronically. It's designed to facilitate interoperability between different healthcare systems.\n\nOpenFn provides multiple FHIR-related adaptors:\n- `fhir` - A generic adaptor for basic FHIR operations\n- `fhir-r4` - Specifically for FHIR Release 4\n- `fhir-fr` - A custom adaptor for the France FHIR Implementation Guide\n- `fhir-ndr-et` - A custom adaptor for Ethiopia's HIV Treatment & Care Services\n\nTo use FHIR with OpenFn, you'd need to:\n\n1. Install the appropriate FHIR adaptor for your needs\n2. Set up credentials to connect to your FHIR server\n3. Use the adaptor's operations to interact with FHIR resources\n\nFHIR can be integrated via:\n- REST API for scheduled or bulk synchronizations\n- Webhooks/subscriptions for real-time event-based integration\n\nFor more information and detailed documentation, visit:\n- https://docs.openfn.org/adaptors/fhir\n- https://www.hl7.org/fhir/overview.html"
        }
      ],
      "usage": {
        "cache_creation_input_tokens": 8405,
        "cache_read_input_tokens": 1323,
        "input_tokens": 549,
        "output_tokens": 325
      },
      "meta": {
        "rag": {
          "search_results": [
            {
              "text": "---\ntitle: FHIR Adaptor\n---## About FHIR\n\n[FHIR](https://www.hl7.org/fhir/overview.html) stands for Fast Healthcare Interoperability Resources. It is a standard for representing and exchanging healthcare data electronically. \n\n\n:::tip About this adaptor and features coming soon! \n\nThis adaptor is very basic and generic, used mostly to integrate demo FHIR servers. It's a work-in-progress, so share questions and feedback on [community.openfn.org](https://community.openfn.org).\n\n**FHIR version-specific adaptors (e.g., `fhir-r4`) with enhanced functionality are coming soon** to fast-track integration setup with more helper functions, templates, and docs than this simple adaptor. See the [Adaptors Wiki](https://github.com/OpenFn/adaptors/wiki/Generating-Fhir-Adaptors) for how to build an adaptor specific to your FHIR Implementation Guide. \n\n:::",
              "metadata": {
                "doc_title": "fhir",
                "docs_type": "adaptor_docs"
              },
              "score": 0.887969553
            },
            {
              "text": "---\ntitle: FHIR-FR IG Adaptor\n---## Custom FHIR Adaptor: fhir-fr\nNote❗: This is a custom adaptor generated from this France FHIR Implementation Guide: https://hl7.fr/ig/fhir/core/2.0.0/index.html\n\nCustom FHIR adaptors generate a suite of helper functions specific to their source Implementation Guides.\n\nSee the generic [fhir adaptor](/adaptors/fhir) and our [docs on standards](/documentation/get-started/standards) for more general guidance on OpenFn + FHIR.## Build your own FHIR Adaptor\nSee the [Adaptors Wiki](https://github.com/OpenFn/adaptors/wiki/Generating-Fhir-Adaptors) to build your own adaptor for _your_ implementation guide by trying out our fhir-adaptor-generator (which is a new tool still in testing). \n\nPlease share any questions or feedback on [community.openfn.org](https://community.openfn.org).",
              "metadata": {
                "doc_title": "fhir-fr",
                "docs_type": "adaptor_docs"
              },
              "score": 0.869400501
            },
            {
              "text": "---\ntitle: FHIR r4 Adaptor\n---\n\nLanguage support for FHIR version 4. This adaptor is compatible with any FHIR R4\ncompliant server.\n\nThe FHIR 4 adaptor is implemented in TypeScript and comes complete with full\nTypeScript definitions.\n\n:::tip\n\nThis adaptor is strictly only compatible with\n[FHIR R4](https://www.hl7.org/fhir/R4). But all versions are supported by our\n[generic fhir](/adaptors/fhir) adaptor!\n\n:::## About FHIR\n\n[FHIR](https://www.hl7.org/fhir/overview.html) stands for Fast Healthcare\nInteroperability Resources. It is a standard for representing and exchanging\nhealthcare data electronically.\n\nLearn more about FHIR and\n[FHIR for heath data exchange](/documentation/get-started/standards#fhir-for-health-data-exchange).",
              "metadata": {
                "doc_title": "fhir-4",
                "docs_type": "adaptor_docs"
              },
              "score": 0.862577438
            },
            {
              "text": ":::## Integration Options\n\n**1. Rest API:** The FHIR specification includes a REST API that enables external services like OpenFn to pull data from the FHIR server, or push data from external apps to FHIR servers. This option is suited for scheduled, bulk syncs or workflows that must update data with external information. See [functions](/adaptors/packages/fhir-docs) for more on how to use this adaptor to work with the API.\n\n**2. Webhook:** The FHIR specification does not inherently define a webhook or data-forwarding mechanism. However, many FHIR implementations and platforms offer extensions or configurations that support similar functionality. This option is suited for real-time, event-based data integration. Check out the FHIR `Subscription` resource [documentation](https://build.fhir.org/subscription-definitions.html) to learn more about one way this might be implemented.",
              "metadata": {
                "doc_title": "fhir",
                "docs_type": "adaptor_docs"
              },
              "score": 0.837116182
            },
            {
              "text": "---\ntitle: FHIR-NDR-ET IG Adaptor\n---## Custom FHIR Adaptor: fhir-ndr-et\nNote❗: This is a custom adaptor generated from this Implementation Guide `Ethiopia FHIR Implementation Guide - HIV Treatment & Care Services` authored by Jembi Health Systems: https://build.fhir.org/ig/jembi/ethiopia-hiv/branches/master/index.html\n\nCustom FHIR adaptors generate a suite of helper functions specific to their source Implementation Guides.\n\nSee the generic [fhir adaptor](/adaptors/fhir) and our [docs on standards](/documentation/get-started/standards) for more general guidance on OpenFn + FHIR.## Build your own FHIR Adaptor\nSee the [Adaptors Wiki](https://github.com/OpenFn/adaptors/wiki/Generating-Fhir-Adaptors) to build your own adaptor for _your_ implementation guide by trying out our fhir-adaptor-generator (which is a new tool still in testing). \n\nPlease share any questions or feedback on [community.openfn.org](https://community.openfn.org).",
              "metadata": {
                "doc_title": "fhir-ndr-et",
                "docs_type": "adaptor_docs"
              },
              "score": 0.850673378
            }
          ],
          "search_results_sections": [
            "fhir-ndr-et",
            "fhir-fr",
            "fhir",
            "fhir-4"
          ],
          "search_queries": [
            {
              "query": "fhir adaptor",
              "doc_type": "adaptor_docs"
            }
          ],
          "config_version": 1,
          "prompts_version": 1,
          "usage": {
            "needs_docs": {
              "input_tokens": 160,
              "output_tokens": 4,
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 0
            },
            "generate_queries": {
              "input_tokens": 336,
              "output_tokens": 29,
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 0
            }
          }
        }
      }
    }
  },
  {
    "question": "How can I generate a UUID for my data?",
    "fullResult": {
      "response": "To generate a UUID in your job, use the `util.uuid()` function:\n\n```js\nfn(state => {\n  const id = util.uuid();\n  console.log(id); // Example: '3f4e254e-8f6f-4f8b-9651-1c1c262cc83f'\n  \n  // Add the UUID to your data if needed\n  return { ...state, data: { ...state.data, id } };\n})\n```\n\nThis will create a standard UUID and add it to your data under the `id` field. You can modify the property name as needed.",
      "history": [
        {
          "role": "user",
          "content": "How can I generate a UUID for my data?"
        },
        {
          "role": "assistant",
          "content": "To generate a UUID in your job, use the `util.uuid()` function:\n\n```js\nfn(state => {\n  const id = util.uuid();\n  console.log(id); // Example: '3f4e254e-8f6f-4f8b-9651-1c1c262cc83f'\n  \n  // Add the UUID to your data if needed\n  return { ...state, data: { ...state.data, id } };\n})\n```\n\nThis will create a standard UUID and add it to your data under the `id` field. You can modify the property name as needed."
        }
      ],
      "usage": {
        "cache_creation_input_tokens": 9977,
        "cache_read_input_tokens": 1323,
        "input_tokens": 543,
        "output_tokens": 194
      },
      "meta": {
        "rag": {
          "search_results": [
            {
              "text": "**Example:** Encode a string```js\nconst encodedString = util.encode('Hello World');\nconsole.log(encoded); // Output: SGVsbG8gV29ybGQ=```\n**Example:** Encode an object```js\nconst encodedObject = util.encode({name: 'Jane Doe' })\nconsole.log(encodedObject); //output eyJuYW1lIjoiSmFuZSBEb2UifQ==```\n**Example:** To skip the JSON stringification step```js\nconst encodedObject = util.encode('Hello World', { parseJson: false })```\n\n* * *### util.uuid {#util_uuid}\n\n\n`uuid() ⇒ string`\n\n\nGenerates a UUID (Universally Unique Identifier)\n\n**Returns**: `string` - - A newly generated UUID  \n**Example:** Generate a UUID```js\nconst id = util.uuid();\nconsole.log(id); // Output:'3f4e254e-8f6f-4f8b-9651-1c1c262cc83f'```\n\n* * *## beta\n\nThese functions belong to the beta namespace.",
              "metadata": {
                "doc_title": "common",
                "docs_type": "adaptor_functions"
              },
              "score": 0.758232355
            },
            {
              "text": "---\nid: library-intro\ntitle: The Community Job Library\nsidebar_label: Library Examples\nslug: library\n---## A growing knowledge base\n\nThere have been **over 3,000 distinct jobs written** for the OpenFn platform,\ndriving efficiency across the social sector. These jobs have run millions of\ntimes, connecting and automating critical technologies like CommCare, DHIS2,\nSalesforce, Kobo Toolbox, and more.\n\n**90% of at-scale OpenFn customers make their jobs publicly available** so that\nother organizations can learn from their implementations, yet we’re still\nconstantly asked to find examples of jobs that “create DHIS2 entities from\nCommCare cases” or “initiate payments when Kobo submissions arrive”.\n\nThe Job Library is our attempt to make this vast pool of real-world experience\navailable to everyone, automatically collecting and organizing non-sensitive job\nscripts from this diverse community of social sector integration experts to make\ndata integration safer, faster, and more scalable than ever before.",
              "metadata": {
                "doc_title": "library-intro",
                "docs_type": "adaptor_docs"
              },
              "score": 0.747790813
            },
            {
              "text": "Expand to see expected CLI logs```bash\n  [CLI] ✔ Installing packages...\n  [CLI] ✔ Installed @openfn/language-http@4.2.8\n  [CLI] ✔ Installation complete in 14.555s\n  [CLI] ✔ Compiled from getPosts.js\n  [R/T] ♦ Starting job job-1\n  GET request succeeded with 200 ✓\n  [JOB] ℹ {\n    userId: 1,\n    id: 1,\n    title: 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit',\n    body: 'quia et suscipit\\n' +\n      'suscipit recusandae consequuntur expedita et cum\\n' +\n      'reprehenderit molestiae ut ut quas totam\\n' +\n      'nostrum rerum est autem sunt rem eveniet architecto'\n  }\n  [R/T] ✔ Completed job job-1 in 872ms\n  [CLI] ✔ State written to tmp/output.json\n  [CLI] ✔ Finished in 15.518s ✨",
              "metadata": {
                "doc_title": "cli-walkthrough",
                "docs_type": "general_docs"
              },
              "score": 0.725316703
            },
            {
              "text": "---\ntitle: OCL Adaptor\n---## About OCL\n\n[OCL (Open Concept Lab)](https://openconceptlab.org/) is an open-source platform that provides a collaborative environment for creating, managing, and sharing standardized healthcare terminologies, dictionaries, and value sets.\n\nRelationships between concepts are defined in OCL as `mappings`. The API supports searching and editing concepts and mappings, building `sources`, and logically grouping concepts and mappings into `collections`. [See OCL docs](https://docs.openconceptlab.org/en/latest/oclapi/overview.html#overview) to learn more, access the [Swagger API](https://api.openconceptlab.org/swagger/), and to learn more about the cloud instance available at [https://openconceptlab.org](https://openconceptlab.org).",
              "metadata": {
                "doc_title": "ocl",
                "docs_type": "adaptor_docs"
              },
              "score": 0.741265357
            },
            {
              "text": "* * *### util.encode {#util_encode}\n\n\n`encode(data) ⇒ string`\n\n\nEncodes a given string into Base64 format.\n\n**Returns**: `string` - - The Base64 encoded string.  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| data | `string` | The string to be encoded. |\n\n**Example:** Encode a string```js\nconst encoded = util.encode('Hello World');\nconsole.log(encoded); // Output: SGVsbG8gV29ybGQ=```\n\n* * *### util.uuid {#util_uuid}\n\n\n`uuid() ⇒ string`\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n**Returns**: `string` - - A newly generated UUID.  \n**Example:** Generate a UUID```js\nconst id = util.uuid();\nconsole.log(id); // Output:'3f4e254e-8f6f-4f8b-9651-1c1c262cc83f'\n```\n\n* * *##  Interfaces### HttpState\n\nState object\n\n**Properties**\n\n| Name | Description |\n| --- | --- |\n| data | the parsed response body |\n| response | the response from the HTTP server, including headers, statusCode, body, etc |\n| references | an array of all previous data objects used in the Job |\n\n\n* * *",
              "metadata": {
                "doc_title": "http",
                "docs_type": "adaptor_functions"
              },
              "score": 0.733525157
            },
            {
              "text": "---\ntitle: Common Adaptor\n---## About OpenFn \"Common\" Language\n\nUse this adaptor to write JavaScript, or to leverage common expressions and\n[helper functions](/adaptors/packages/common-docs) for OpenFn.\n\nThis adaptor is typically used for transforming data in OpenFn workflows that\nautomate \"ETL\" (extract, transform, load) processes. See below examples.```js\n//use fn() to write your own functions\nfn(state => {\n  // write javascript...\n  // ...to do some things to state\n  console.log(state.data); //or to debug\n  return state;\n});``````js\n//use each() to create 1 account for each form\neach(\n  $.forms,\n  create('Account', {\n    Kobo_ID__c: $.data.id,\n    Name: $.data.customer_name,\n    Phone: $.data.customer_phone,\n  })\n);\n```",
              "metadata": {
                "doc_title": "common",
                "docs_type": "adaptor_docs"
              },
              "score": 0.73940438
            },
            {
              "text": "---\ntitle: Claude AI Adaptor\n---## About Claude\n\n[Claude](https://claude.ai/) is an AI assistant built by Anthropic. It provides\na family of large language models (LLMs) developed for natural language\nprocessing tasks such as text generation, summarization, and question answering.\n\nClaude models process text input to generate responses but do not have built-in\nmemory or autonomous decision-making. They can be integrated with external tools\nor APIs to execute actions beyond text-based outputs.## Use OpenFn + LLMs for AI-Driven Workflows\n\nWhile LLMs (like Claude or ChatGPT) can generate insights, recommendations, or\nstructured data, they often **lack direct execution capabilities**—meaning they\nneed an automation system to act on their outputs.\n\n**OpenFn workflows fill this gap by orchestrating actions based on LLM-generated\nresponses.**\n\nRemember that LLMs are imperfect. Learn more about your recommended approach to\nAI in our [Responsible AI Policy](https://www.openfn.org/ai).",
              "metadata": {
                "doc_title": "claude",
                "docs_type": "adaptor_docs"
              },
              "score": 0.728132069
            },
            {
              "text": "In the following sections, special systems will be described.#### Example user stories\n\n1 Logistics Management(LMIS)\n\n- LMIS is an area where a multitude of parallel, overlapping or competing\n  software solutions can be found in a single country\n- Although a basic LMIS configuration based on aggregate data can take you very\n  far, in some cases a transactional LMIS is necessary if you need to track such\n  detailed operations as returns, transfer between facilities, barcode reading,\n  batch and expiry managemen\n- In such a situation...\n\n2 Data Sharing for Health and Nutrition, Water Sanitation and Hygiene Projects\n\n- Case management sytsems such as CommCare are widely preffered in collecting\n  case data(or patient level data) due to its dominance in the sector and easy\n  of adoption. In such scenarios, ...\n\n3 DHIS2 Instance Synchronization\n\n- Different DHIS2 instances in a given organisation or government ministry may\n  be deployed on separate servers which places the need for synchronization in",
              "metadata": {
                "doc_title": "dhis2",
                "docs_type": "adaptor_docs"
              },
              "score": 0.755652666
            },
            {
              "text": "Expand to see expected CLI logs```bash\n  [CLI] ✔ Installing packages...\n  [CLI] ✔ Installed @openfn/language-http@4.2.8\n  [CLI] ✔ Installation complete in 14.555s\n  [CLI] ✔ Compiled from getPosts.js\n  [R/T] ♦ Starting job job-1\n  GET request succeeded with 200 ✓\n  [JOB] ℹ {\n    userId: 1,\n    id: 1,\n    title: 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit',\n    body: 'quia et suscipit\\n' +\n      'suscipit recusandae consequuntur expedita et cum\\n' +\n      'reprehenderit molestiae ut ut quas totam\\n' +\n      'nostrum rerum est autem sunt rem eveniet architecto'\n  }\n  [R/T] ✔ Completed job job-1 in 872ms\n  [CLI] ✔ State written to tmp/output.json\n  [CLI] ✔ Finished in 15.518s ✨```\n\n\n\n:::warning Placeholder Data\n\nThe data displayed in this CLI logs is generated from a\n[JSONPlaceholder](https://jsonplaceholder.typicode.com/) API and does not\nrepresent real-world information. It is intended for testing and development\npurposes only.\n\nFor accurate testing, consider using real data from your API or service.\n\n:::",
              "metadata": {
                "doc_title": "cli-walkthrough",
                "docs_type": "general_docs"
              },
              "score": 0.725670278
            },
            {
              "text": "return state;\n      })\n    adaptor: '@openfn/language-common'\n    trigger: j1-fails\n\ntriggers:\n  trigger-1:\n    criteria: '{\"number\":2}'\n  every-minute:\n    cron: '* * * * *'\n  after-j1:\n    success: job-1\n  j1-fails:\n    failure: job-1# Note that credential keys get copied, but values must be manually entered# after the export is completed.\ncredentials:\n  my-secret-credential:\n    username: '******'\n    password: '******'```## v1\n\nInitial portability proposal```js\nconst project = {\n  async: true,\n  triggers: {\n    uniqueTriggerId: {\n      // trigger properties\n    },\n    otherTrigger: {\n      // other trigger properties\n    },\n  },\n  credentials: {\n    // for now, credentials will not be synced //\n    // secret1: {\n    // username: 'mamadou',\n    // pass: 'shhh',\n  },\n  staticData: {\n    // static objects that can be accessed from any job\n  },\n  jobs: {\n    payHealthWorker: { trigger: 'otherTrigger' },\n    syncToSalesforce: {\n      expression: 'uri://github.com/jobs/expresion.js',\n      trigger: 'uniqueTriggerId',\n      credential: 'secret1',\n    },\n  },\n};\n```",
              "metadata": {
                "doc_title": "portability-versions",
                "docs_type": "general_docs"
              },
              "score": 0.72494179
            }
          ],
          "search_results_sections": [
            "ocl",
            "claude",
            "library-intro",
            "http",
            "dhis2",
            "common",
            "cli-walkthrough",
            "portability-versions"
          ],
          "search_queries": [
            {
              "query": "generate UUID language-common",
              "doc_type": null
            },
            {
              "query": "language-common",
              "doc_type": "adaptor_docs"
            }
          ],
          "config_version": 1,
          "prompts_version": 1,
          "usage": {
            "needs_docs": {
              "input_tokens": 158,
              "output_tokens": 4,
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 0
            },
            "generate_queries": {
              "input_tokens": 334,
              "output_tokens": 46,
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 0
            }
          }
        }
      }
    }
  },
  {
    "question": "I want to download data from a file on sharepoint and upload leads into\nsalesforce. Can you give me an idea how that would work?",
    "fullResult": {
      "response": "This is a common integration scenario. You'll need a workflow with multiple steps:\n\n1. First step - Use the MSGraph adaptor to download the file from SharePoint\n2. Second step - Process the file data (transform it into the format needed for Salesforce)\n3. Third step - Upload the transformed data to Salesforce as leads\n\nHere's a rough outline of how the job code would look:\n\n**Step 1: Download from SharePoint (using MSGraph adaptor)**\n```js\nhttp.get('/sites/{site-id}/drive/items/{file-id}/content');\n```\n\n**Step 2: Transform data (using Common adaptor)**\n```js\nfn(state => {\n  // Parse the file content (if it's CSV/Excel)\n  // Transform the data into Salesforce format\n  const leads = state.data.map(row => ({\n    LastName: row.name,\n    Company: row.company,\n    Email: row.email,\n    // Map other fields as needed\n  }));\n  \n  return { ...state, leads };\n});\n```\n\n**Step 3: Upload to Salesforce (current adaptor)**\n```js\nbulk(\n  \"Lead\",\n  \"insert\",\n  state => state.leads,\n  { failOnError: true }\n);\n```\n\nYou'll need to set up credentials for both MSGraph and Salesforce in your project. The exact SharePoint URL details will depend on your specific SharePoint structure.",
      "history": [
        {
          "role": "user",
          "content": "I want to download data from a file on sharepoint and upload leads into\nsalesforce. Can you give me an idea how that would work?"
        },
        {
          "role": "assistant",
          "content": "This is a common integration scenario. You'll need a workflow with multiple steps:\n\n1. First step - Use the MSGraph adaptor to download the file from SharePoint\n2. Second step - Process the file data (transform it into the format needed for Salesforce)\n3. Third step - Upload the transformed data to Salesforce as leads\n\nHere's a rough outline of how the job code would look:\n\n**Step 1: Download from SharePoint (using MSGraph adaptor)**\n```js\nhttp.get('/sites/{site-id}/drive/items/{file-id}/content');\n```\n\n**Step 2: Transform data (using Common adaptor)**\n```js\nfn(state => {\n  // Parse the file content (if it's CSV/Excel)\n  // Transform the data into Salesforce format\n  const leads = state.data.map(row => ({\n    LastName: row.name,\n    Company: row.company,\n    Email: row.email,\n    // Map other fields as needed\n  }));\n  \n  return { ...state, leads };\n});\n```\n\n**Step 3: Upload to Salesforce (current adaptor)**\n```js\nbulk(\n  \"Lead\",\n  \"insert\",\n  state => state.leads,\n  { failOnError: true }\n);\n```\n\nYou'll need to set up credentials for both MSGraph and Salesforce in your project. The exact SharePoint URL details will depend on your specific SharePoint structure."
        }
      ],
      "usage": {
        "cache_creation_input_tokens": 17301,
        "cache_read_input_tokens": 1323,
        "input_tokens": 605,
        "output_tokens": 414
      },
      "meta": {
        "rag": {
          "search_results": [
            {
              "text": "---\ntitle: MSSQL Adaptor\n---## About MSSQL\n\n[Microsoft SQL Server](https://learn.microsoft.com/en-us/sql/?view=sql-server-ver16) (MSSQL) is a relational database management system (RDBMS) developed by Microsoft. It supports a wide variety of applications, including data warehousing, transaction processing, and business intelligence. It can be accessed and manipulated using SQL to extract or load data.## Integration Options\n\nThe `mssql` adaptor provides direct database connections for accessing data and executing SQL and standard database operations. See [functions](/adaptors/packages/mssql-docs) for more on how to use this adaptor.## Authentication\n\nSee [MSSQL docs](https://learn.microsoft.com/en-us/sql/?view=sql-server-ver16) for the latest on supported authentication methods. When integrating with an MSSQL database via OpenFn, you authenticate via SSH using authorized database credentials. See this adaptor's [Configuration docs](/adaptors/packages/mssql-configuration-schema) for more on the required authentication parameters.\n\nSee platform docs on [managing credentials](/documentation/manage-projects/manage-credentials) for how to configure a credential in OpenFn. If working locally or if using a Raw JSON credential type, then your configuration will look something like this:",
              "metadata": {
                "doc_title": "mssql",
                "docs_type": "adaptor_docs"
              },
              "score": 0.792990386
            },
            {
              "text": "- As a fundraiser at an NGO, I would like to see all donor information tracked\n  in Salesforce so that I can better monitor fundraising activities, nurture\n  relationships with all funders, and manage campaigns.## APIs & Integration Options\n\nSalesforce has a rich ecosystem of developers and ready-made applications. See\nthe [Salesforce App Exchange](https://appexchange.salesforce.com/) for existing\napps and integrations custom-made for Salesforce. If existing applications do\nnot meet your functional or budget requirements, leverage Salesforce's robust\nAPIs to configure a custom integration.\n\n1. **APIs:** Salesforce has a robust set of RESTful APIs that support a wide\n   range of operations. For connecting with these APIs, including the\n   `Bulk API`, OpenFn has developed a robust API adaptor for quicker integration\n   setup - see\n   [`language-salesforce`](https://github.com/OpenFn/language-salesforce).\n2. **Webhook:** By configuring\n   [`Outbound Messages`](https://developer.salesforce.com/docs/atlas.en-us.api.meta/api/sforce_api_om_outboundmessaging_understanding.htm)\n   that can be sent via criteria-based `Workflow Rules`, Salesforce Admins can",
              "metadata": {
                "doc_title": "salesforce",
                "docs_type": "adaptor_docs"
              },
              "score": 0.823579
            },
            {
              "text": "---\ntitle: Dynamics Adaptor\n---## About Microsoft Dynamics\n\n[Microsoft Dynamics](https://www.microsoft.com/en-us/dynamics-365) is a suite of enterprise resource planning (ERP) and customer relationship management (CRM) applications. It helps organizations manage sales, customer service, marketing, operations, and more.## Integration Options\n\n**1. Rest API:** Dynamics offers a REST API that enables external applications to interact with its database and perform bulk operations. This option is ideal for applications requiring scheduled or bulk synchronization with Dynamics. Refer to the Dynamics REST API [documentation](https://learn.microsoft.com/en-us/powerapps/developer/data-platform/webapi/overview) for detailed guidelines on endpoints and payload formats.\n\n**2. Webhook:** Webhook or Data Forwarding to push data from Dynamics to external systems (see [docs](https://learn.microsoft.com/en-us/dynamics365/customer-engagement/developer/webhooks)). This option is suited for real-time, event-based data integration.",
              "metadata": {
                "doc_title": "dynamics",
                "docs_type": "adaptor_docs"
              },
              "score": 0.805806935
            },
            {
              "text": "[See here](https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_limits.htm)\n   for how to query your org's specific limits, and\n   [this article](https://developer.salesforce.com/docs/atlas.en-us.salesforce_app_limits_cheatsheet.meta/salesforce_app_limits_cheatsheet/salesforce_app_limits_platform_api.htm)\n   for how to monitor your API usage.## OpenFn Adaptors\n\nOpenFn supports a robust `salesforce` adaptor\n([see adaptor source code](https://github.com/OpenFn/adaptors/blob/main/packages/salesforce/src/Adaptor.js))\nwith a range of helper functions for common CRUD & upsert operations, and for\naccessing the Salesforce bulk API.## Example Implementations\n\n- MiracleFeet (CommCare-to-Salesforce sync):\n  https://github.com/OpenFn/miracle-feet\n- Lwala (CommCare-Salesforce 2-way sync): https://github.com/OpenFn/lwala\n- GRS CommCare - Salesforce sync: https://github.com/OpenFn/grassroot-soccer\n- MailChimp-Salesforce sync: https://github.com/OpenFn/gife",
              "metadata": {
                "doc_title": "salesforce",
                "docs_type": "adaptor_docs"
              },
              "score": 0.846633136
            },
            {
              "text": "- You can also easily view Salesforce API names via the front-end UI by\n  downloading the Chrome extension  [Salesforce Show API Name](https://chrome.google.com/webstore/detail/salesforce-show-api-name/dcfecmnffjopafbbbaepgopfcphnoham).\n  Follow the instructions for adding it to Chrome and use it to display API\n  names without going to Setup.### Mapping and Design Considerations#### External Identifiers\n\nIndividual fields can be configured as `external identifiers` to search for a\nrecord via a the API/an external app and to help prevent duplicate records from\nbeing created in Salesforce. To enable this setting on an individual field,\nensure `External ID` is checked on the field settings. Learn more about external\nidentifiers in Salesforce at\nhttps://www.infallibletechie.com/2014/11/what-is-external-id-in-salesforce.html\n![image](https://user-images.githubusercontent.com/80456839/128650680-e10fa395-bddb-45bd-bd6c-3a9dda8998f8.png)",
              "metadata": {
                "doc_title": "salesforce",
                "docs_type": "adaptor_docs"
              },
              "score": 0.760592639
            },
            {
              "text": "See below for helpful tips for your next\nSalesforce integration project.### Field API Names\n\nSalesforce **field API names** (unique names for each piece of metadata - e.g.,\n`PatientID__c`) should be referenced in OpenFn integrations, not **field\nlabels** (business-friendly label that the end user sees - e.g., `Patient ID`)\n![image](https://user-images.githubusercontent.com/80456839/128650593-343090da-7f12-468a-aa51-1f87f1cf9f34.png).\n\nTo view the Salesforce API field names, navigate to the Salesforce backend. Via\nthe web app, select `Setup` from the top naviagation menu to browse the\nSalesforce backend settings, metadata configuration, object and field names,\netc.\n\n- In the `Classic` view, search for `Object` in the left-hand `Setup` search box\n  without hitting Enter. From the quick results, select `Create -> Objects`.\n  This takes you to all the custom objects. Select an object and you'll see all\n  the fields and relationships on the object.\n- You can also easily view Salesforce API names via the front-end UI by\n  downloading the Chrome extension",
              "metadata": {
                "doc_title": "salesforce",
                "docs_type": "adaptor_docs"
              },
              "score": 0.760777533
            },
            {
              "text": "---\ntitle: SFTP Adaptor\n---## About SFTP\n\n[SFTP (Secure File Transfer Protocol)](https://www.techtarget.com/searchcontentmanagement/definition/Secure-File-Transfer-Protocol-SSH-File-Transfer-Protocol) is a secure method for transferring files between systems over an encrypted SSH connection. It is widely used for securely uploading, downloading, and managing files on remote servers.\n\nUsing this adaptor, you can read and write files (e.g., `csv`, `xls`, `json` files) saved on a SFTP server.## Integration Options\n\n**Direct File Transfers:** SFTP allows users to manually or programmatically transfer files between a local and remote system. See [functions](/adaptors/packages/sftp-docs) for more on how to use this adaptor to work with an SFTP server.",
              "metadata": {
                "doc_title": "sftp",
                "docs_type": "adaptor_docs"
              },
              "score": 0.791963339
            },
            {
              "text": "Learn more about how data is structured in Salesforce at the links below:\n\n- How data is organized in Salesforce:\n  https://help.salesforce.com/s/articleView?id=sf.basics_organize_data.htm&type=5\n- Salesforce objects: https://www.salesforcetutorial.com/salesforce-objects/## Integration Use Cases\n\nSalesforce may be used to manage an organization's programs, operations,\nfundraising, and more. Therefore integrations with 3rd-party apps is a common\nrequirement.\n\nExample user stories:\n\n- As a program or M&E manager working in areas with limited internet\n  connectivity, I would like to collect data on a mobile applicaiton that\n  supports offline data capture, but then sync the data collected to Salesforce\n  so that I can centrally monitor field activities and analyze data collected to\n  evaluate program impact.\n- As a fundraiser at an NGO, I would like to see all donor information tracked\n  in Salesforce so that I can better monitor fundraising activities, nurture\n  relationships with all funders, and manage campaigns.",
              "metadata": {
                "doc_title": "salesforce",
                "docs_type": "adaptor_docs"
              },
              "score": 0.810154796
            },
            {
              "text": "ng data from CRM systems into Google Sheets for sales\nanalysis. - Updating inventory levels in a Google Sheets spreadsheet from an\ne-commerce platform. - Automatically populating project management data from\ntask tracking systems into Google Sheets for reporting purposes.\n\nA step by step guide is found\n[in this tutorial](https://docs.openfn.org/documentation/tutorials/http-to-googlesheets)\nthat shows us how to get data via a REST API and push it to Google Sheet.### Helpful Resources\n\n- [Google Sheets API Overview](https://developers.google.com/sheets/api/guides/concepts)\n- OpenFn Workflow Tutorial:\n  [HTTP-to-GoogleSheets](https://docs.openfn.org/documentation/tutorials/http-to-googlesheets)",
              "metadata": {
                "doc_title": "googlesheets",
                "docs_type": "adaptor_docs"
              },
              "score": 0.760358453
            },
            {
              "text": "**Multi-Select Picklist fields**: If mapping to a Salesforce\n`multi-select picklist field`, note that multiple values should be formatted as\nsemicolon-separated strings (e.g.,\n`Services__c: 'Food;Counselling;Medical_Aid`).### Salesforce Credentials\n\nUsers have two options to connect to Salesforce, via **Oauth2** and via a\n**security token**. We recommend connecting via Oauth2. If this option isn't\navailable on your OpenFn instance, reach out to the superuser who deployed it\nand ask them to configure a Salesforce Oauth2 client.\n\nFor better auditability and securiy, we recommend creating a dedicated \"openfn\"\nintegration user (rather than using your personal user). Salesforce provides an\nAPI-only user license.\n[See Salesforce documentation](https://help.salesforce.com/s/articleView?id=sf.integration_user.htm&type=5)\nto learn how to configure this. API-only users require an Oauth credential.",
              "metadata": {
                "doc_title": "salesforce",
                "docs_type": "adaptor_docs"
              },
              "score": 0.761771202
            },
            {
              "text": "---\ntitle: OpenSSP Adaptor\n---## About OpenSSP\n\n[OpenSPP (Open Smart Patient Platform)](https://openspp.org/) is an open-source platform designed to support patient-centric workflows in healthcare delivery. It enables healthcare providers to manage patient data, schedule appointments, track health outcomes, and improve service delivery through real-time data insights and integration capabilities.## Integration Options\n\nOpenSPP supports 2 primary integration options with OpenFn:\n\n1. **Rest API:** OpenSPP has a REST API that enables external services like OpenFn to pull data from OpenSPP, or push data from external apps to OpenSPP. This option is suited for scheduled, bulk syncs or workflows that must update data in OpenSPP with external information. See [functions](/adaptors/packages/openspp-docs) for more on how to use this adaptor to work with the API.\n\n2. **Webhook:** Webhook or Data Forwarding to push data from OpenSPP to external systems (see [docs](https://openspp.org/api)). This option is suited for real-time, event-based data integration.",
              "metadata": {
                "doc_title": "openspp",
                "docs_type": "adaptor_docs"
              },
              "score": 0.806324065
            },
            {
              "text": "For example, the MSgraph Adaptor allows users to build OpenFn\nWorkflows to extract documents stored in SharePoint, create or update files, andmanage permissions. Another use case is building a workflow to connect with a\nMicrosoft user's emails, calendar, and contacts to read and manage specific\ninformation directly.### Authentication and Authorization\n\nThis adaptor requires OAuth authorization to connect with the MS Graph. This\nauthorization can be achieved by a user or organization admin consenting to an\nOAuth client to access resources. Users can request authorization via the\ndefault OpenFn Microsoft OAuth client or choose to Add new (generic) OAuth\nclient(s) for their account and projects. To authorize MS Graph for your OpenFn\nworkflows read our documentation on\n[using OAuth credentials](/documentation/build/credentials#use-oauth2-credentials).\n\n:::info\n\nSetting up your own generic OAuth client requires that you have an OAuth\napplication set up. Please refer to Microsoft's documentation to\n[configure an OAuth App](https://learn.microsoft.com/en-us/entra/identity/saas-apps/openidoauth-tutorial)\nvia Microsoft entra app gallery.\n\n:::",
              "metadata": {
                "doc_title": "msgraph",
                "docs_type": "adaptor_docs"
              },
              "score": 0.800252378
            },
            {
              "text": "---\ntitle: OpenMRS Adaptor\n---## About OpenMRS\n\n[OpenMRS (Open Medical Record System)](https://openmrs.org/) is an open-source platform designed to manage electronic medical records (EMRs) in low-resource environments. It provides a framework that allows developers to extend its core functionality through custom modules and APIs.## Integration Options\n\n**1. Rest API:** OpenMRS offers a REST API that enables external applications to interact with its database and perform bulk operations. This option is ideal for applications requiring scheduled or bulk synchronization with OpenMRS. Refer to the OpenMRS REST API [documentation](https://wiki.openmrs.org/) for detailed guidelines on endpoints and payload formats.\n\n**2. Webhook:** OpenMRS does not natively support webhooks as a standard feature. However, the platform is highly extensible and allows for customization through its module system. More details can be found on the OpenMRS [documentation page​](https://wiki.openmrs.org/).",
              "metadata": {
                "doc_title": "openmrs",
                "docs_type": "adaptor_docs"
              },
              "score": 0.791277587
            },
            {
              "text": "---\ntitle: Odoo Adaptor\n---## About Odoo\n\n[Odoo](https://odoo.com/) is a marketing automation platform that allows businesses to design, send, and manage email campaigns. It also provides tools for audience management, analytics, and integrations with other platforms to support marketing efforts.## Integration Options\n\nOdoo supports two primary integration options with OpenFn:\n\n**1. Direct DB Connection:** This is what _this_ adaptor supports to directly connect to your Odoo database. \n\n**2. Rest API:** Odoo offers a REST API that enables external applications to interact with its services, but this is a *paid option/may require an additional plugin*. This option is ideal for applications requiring scheduled or bulk synchronization with Odoo. Refer to the Odoo REST API [documentation](https://www.odoo.com/documentation/16.0/developer/api/external_api.html) for detailed guidelines on endpoints and payload formats.\n\n**3. Webhook:** Webhook or Data Forwarding to push data from Odoo to external systems ([see docs](https://www.odoo.com/documentation/16.0/developer/reference/webhooks.html)). This option is suited for real-time, event-based data integration.",
              "metadata": {
                "doc_title": "odoo",
                "docs_type": "adaptor_docs"
              },
              "score": 0.815926194
            }
          ],
          "search_results_sections": [
            "googlesheets",
            "openspp",
            "dynamics",
            "salesforce",
            "odoo",
            "msgraph",
            "openmrs",
            "sftp",
            "mssql"
          ],
          "search_queries": [
            {
              "query": "sharepoint adaptor",
              "doc_type": "adaptor_docs"
            },
            {
              "query": "salesforce adaptor",
              "doc_type": "adaptor_docs"
            },
            {
              "query": "download file from sharepoint and upload to salesforce",
              "doc_type": null
            }
          ],
          "config_version": 1,
          "prompts_version": 1,
          "usage": {
            "needs_docs": {
              "input_tokens": 179,
              "output_tokens": 4,
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 0
            },
            "generate_queries": {
              "input_tokens": 355,
              "output_tokens": 74,
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 0
            }
          }
        }
      }
    }
  },
  {
    "question": "I want to search for all patients with the name on state.name, and for each one,\nupdate their location to the value on state.newLocation",
    "fullResult": {
      "response": "I'll help you search for patients by name and update their location. Here's how you can do it:\n\n```js\nfn(state => {\n  // Extract the name and new location from state\n  const name = state.name;\n  const newLocation = state.newLocation;\n  \n  if (!name || !newLocation) {\n    throw new Error('Missing required data: name or newLocation');\n  }\n  \n  return { ...state, name, newLocation };\n}),\n\n// Search for patients with the given name\nsearchPatient({ q: state => state.name }),\n\n// Process each patient found in the search results\nfn(state => {\n  // Log how many patients were found\n  console.log(`Found ${state.data.results.length} patients matching the name`);\n  \n  // Return the patients in state for the next operation\n  return { ...state, patients: state.data.results };\n}),\n\n// For each patient, update their location\neach(\n  'patients[*]',\n  update(\n    'person', \n    state => state.uuid, \n    state => ({\n      // Include any required fields for person update\n      uuid: state.uuid,\n      address: {\n        location: state.newLocation\n      }\n    })\n  )\n)\n```\n\nThis job will:\n1. First extract and validate the name and newLocation from state\n2. Search for patients with the given name\n3. Log how many matching patients were found\n4. For each patient in the results, update their location\n\nNote: The exact structure for the location update may need adjustments based on the specific OpenMRS implementation and data model you're working with. The field names (`address.location`) might be different in your system.",
      "history": [
        {
          "role": "user",
          "content": "I want to search for all patients with the name on state.name, and for each one,\nupdate their location to the value on state.newLocation"
        },
        {
          "role": "assistant",
          "content": "I'll help you search for patients by name and update their location. Here's how you can do it:\n\n```js\nfn(state => {\n  // Extract the name and new location from state\n  const name = state.name;\n  const newLocation = state.newLocation;\n  \n  if (!name || !newLocation) {\n    throw new Error('Missing required data: name or newLocation');\n  }\n  \n  return { ...state, name, newLocation };\n}),\n\n// Search for patients with the given name\nsearchPatient({ q: state => state.name }),\n\n// Process each patient found in the search results\nfn(state => {\n  // Log how many patients were found\n  console.log(`Found ${state.data.results.length} patients matching the name`);\n  \n  // Return the patients in state for the next operation\n  return { ...state, patients: state.data.results };\n}),\n\n// For each patient, update their location\neach(\n  'patients[*]',\n  update(\n    'person', \n    state => state.uuid, \n    state => ({\n      // Include any required fields for person update\n      uuid: state.uuid,\n      address: {\n        location: state.newLocation\n      }\n    })\n  )\n)\n```\n\nThis job will:\n1. First extract and validate the name and newLocation from state\n2. Search for patients with the given name\n3. Log how many matching patients were found\n4. For each patient in the results, update their location\n\nNote: The exact structure for the location update may need adjustments based on the specific OpenMRS implementation and data model you're working with. The field names (`address.location`) might be different in your system."
        }
      ],
      "usage": {
        "cache_creation_input_tokens": 15410,
        "cache_read_input_tokens": 1323,
        "input_tokens": 622,
        "output_tokens": 451
      },
      "meta": {
        "rag": {
          "search_results": [
            {
              "text": "---\ntitle: OpenMRS Adaptor\n---## About OpenMRS\n\n[OpenMRS (Open Medical Record System)](https://openmrs.org/) is an open-source platform designed to manage electronic medical records (EMRs) in low-resource environments. It provides a framework that allows developers to extend its core functionality through custom modules and APIs.## Integration Options\n\n**1. Rest API:** OpenMRS offers a REST API that enables external applications to interact with its database and perform bulk operations. This option is ideal for applications requiring scheduled or bulk synchronization with OpenMRS. Refer to the OpenMRS REST API [documentation](https://wiki.openmrs.org/) for detailed guidelines on endpoints and payload formats.\n\n**2. Webhook:** OpenMRS does not natively support webhooks as a standard feature. However, the platform is highly extensible and allows for customization through its module system. More details can be found on the OpenMRS [documentation page​](https://wiki.openmrs.org/).",
              "metadata": {
                "doc_title": "openmrs",
                "docs_type": "adaptor_docs"
              },
              "score": 0.830395401
            },
            {
              "text": "[History Page](/img/history-page-annotated.png)Check out the other pages in this docs section to learn more about inspecting\nRuns, troubleshooting, and rerunning failed Runs.## How Search Works\n\nVia the searchbar on the history page you can find work orders whose _related_\ninput/output dataclips or run logs contain specific text strings. By default,\nthe system will search run logs only but you can select to search any or all of\nthree options:\n\n![Search Options](/img/search-options.png)\n\n1. OpenFn UUIDs for workorders, runs, or steps\n2. Input/Output dataclip bodies\n3. Run logs\n\nIf searching for text within an input/output dataclip or run logs, a `tsvector`\nsearch is applied. This method of searching allows you to find work orders\nquickly and allows for partial string matches across all text in the run logs\nand across the \"keys\" and \"values\" of your dataclips.\n\n:::caution Very large/complex input dataclips may not be indexed\n\nIt's not currently possible to create `ts_vector` indexes larger than 1MB, and\nas a result very large or complex input dataclips may not appear in search\nresults. This typically won't happen until you're nearing 10MB of JSON, but the",
              "metadata": {
                "doc_title": "activity-history",
                "docs_type": "general_docs"
              },
              "score": 0.745651066
            },
            {
              "text": "---\ntitle: OpenIMIS Adaptor\n---## About OpenIMIS\n\n[OpenIMIS (Open Insurance Management Information System)](https://openimis.org/) is an open-source software solution designed to manage health financing schemes such as health insurance, results-based financing, and universal health coverage.## Integration Options\n\nOpenIMIS supports 2 primary integration options with OpenFn:\n\n1. **Rest API:** OpenIMIS has a REST API that enables external services like OpenFn to pull data from OpenIMIS, or push data from external apps to OpenIMIS. This option is suited for scheduled, bulk syncs or workflows that must update data in OpenIMIS with external information. See [functions](/adaptors/packages/openimis-docs) for more on how to use this adaptor to work with the API.\n\n2. **Webhook:** OpenIMIS does not natively support webhooks as a standard feature. However, integrations and custom implementations can enable webhook-like behavior. More details can be found on the OpenMRS [documentation page​](https://wiki.openmrs.org/).",
              "metadata": {
                "doc_title": "openimis",
                "docs_type": "adaptor_docs"
              },
              "score": 0.781510413
            },
            {
              "text": "---\ntitle: OpenLMIS Adaptor\n---## About OpenLMIS\n\n[OpenLMIS (Open Logistics Management Information System)](https://openlmis.org/) is an open-source, electronic logistics management information system designed to improve the management and distribution of health commodities. It enables supply chain management, providing visibility and accuracy in inventory tracking, order management, and reporting.## Integration Options\n\n**Rest API:** OpenLMIS has a REST API that enables external services like OpenFn to pull data from OpenLMIS, or push data from external apps to OpenLMIS. This option is suited for scheduled, bulk syncs or workflows that must update data in OpenLMIS with external information. See [functions](/adaptors/packages/openlmis-docs) for more on how to use this adaptor to work with the API.",
              "metadata": {
                "doc_title": "openlmis",
                "docs_type": "adaptor_docs"
              },
              "score": 0.780211926
            },
            {
              "text": "ocumentation/manage-projects/manage-credentials) for how to configure a credential in OpenFn. If working locally or if using a Raw JSON credential type, then your configuration will look something like this:```\n{\n  \"instanceUrl\": \"http://openmrs.com/instance/url\",\n  \"password\":\"test\",\n  \"username\":\"test\"\n}\n```### Helpful Links\n\n1. [OpenMRS Developer Guide](https://openmrs.atlassian.net/wiki/spaces/docs/pages/25476048/Developer+Guide)\n2. Community Forums: [OpenMRS Talk](https://talk.openmrs.org/)### Implementation Examples\n\n1. OpenFn Prototype for Médecins Sans Frontières (MSF) LIME Project - OpenMRS -> DHIS2 sync: [https://github.com/OpenFn/openfn-lime](https://github.com/OpenFn/openfn-lime)",
              "metadata": {
                "doc_title": "openmrs",
                "docs_type": "adaptor_docs"
              },
              "score": 0.779381871
            },
            {
              "text": "**Example**```js\ngetCase(\n   '3b55-cdf4',\n   { 'where.relationship': { active: true }, where: { firstName: 'Luca'} },\n   state => {\n     console.log(state);\n     return state;\n   }\n);```\n\n* * *### getContact\n\n\n`getContact(id, query, callback) ⇒ Operation`\n\n\nGet one or multiple contacts within an outbreak from a query filter\n\n\n| Param | Type | Description |\n| --- | --- | --- |\n| id | `string` | Outbreak id |\n| query | `object` | An object with a query filter parameter |\n| callback | `function` | (Optional) Callback function |\n\n**Example**```js\ngetContact(\"343d-dc3e\", {\"where\":{\"firstName\": \"Luca\"}}, state => {\n   console.log(state.data);\n   return state;\n });```\n\n* * *### getLocation\n\n\n`getLocation(query, callback) ⇒ Operation`\n\n\nGet one or multiple locations from a query filter\n\n\n| Param | Type | Description |\n| --- | --- | --- |\n| query | `object` | An object with a query filter parameter |\n| callback | `function` | (Optional) Callback function |\n\n**Example**",
              "metadata": {
                "doc_title": "godata",
                "docs_type": "adaptor_functions"
              },
              "score": 0.746049702
            },
            {
              "text": "More details can be found on the OpenMRS [documentation page​](https://wiki.openmrs.org/).## Authentication\n\nWhen integrating with OpenMRS via OpenFn, **Basic Authentication** is supported. See this adaptor's [Configuration docs](/adaptors/packages/openmrs-configuration-schema) for more on the required authentication parameters.\n\nSee platform docs on [managing credentials](documentation/manage-projects/manage-credentials) for how to configure a credential in OpenFn. If working locally or if using a Raw JSON credential type, then your configuration will look something like this:```\n{\n  \"instanceUrl\": \"http://openmrs.com/instance/url\",\n  \"password\":\"test\",\n  \"username\":\"test\"\n}\n```### Helpful Links\n\n1. [OpenMRS Developer Guide](https://openmrs.atlassian.net/wiki/spaces/docs/pages/25476048/Developer+Guide)\n2. Community Forums: [OpenMRS Talk](https://talk.openmrs.org/)",
              "metadata": {
                "doc_title": "openmrs",
                "docs_type": "adaptor_docs"
              },
              "score": 0.774473608
            },
            {
              "text": "This typically won't happen until you're nearing 10MB of JSON, but thenumber of distinct lexemes & positions in your JSON will impact the final index\nsize.\n\nMore at the Postgres\n[\"text search limitations\" docs page](https://www.postgresql.org/docs/current/textsearch-limitations.html).\n\n:::\n\nPartial string matching works best at the start of words, so if you're looking\nfor items matching `\"newPatient\"` it's better to search for `\"newPat\"` than for\n`\"tient\"`. (When in doubt, whole words or IDs produce the best results.)## Search & Filter Results\n\nEven though you can search for text strings that appear in specific run logs or\ndataclips, it's important to remember that the results returned are still **work\norders**. If the output dataclips of the third step in the first run of work\norder \"123\" matches your text search, you'll see work order \"123\" in your\nresults.",
              "metadata": {
                "doc_title": "activity-history",
                "docs_type": "general_docs"
              },
              "score": 0.743211806
            },
            {
              "text": "ists using a unique identifier…\n    - If yes, update the record.\n    - If not, insert a new record.\n4. __Don’t forget to consider data volumes. Depending on whether you need to handle 1, 10000, or 1M+ records, your workflow approach may need change.__\n    - Estimate the file size of the data to be extracted \n    - Consider API limits (records returned per page, request rate limits)    - Consider bulk operations & batching requests\n\n\nCheck out the technical workflow diagram below for syncing forms submissions from KoboToolBox to DHIS2. The original functional diagram can be found [here](/documentation/design/discovery#workflow-requirements-gathering). \n\n![Workflow](/img/technical_example.png)",
              "metadata": {
                "doc_title": "api-discovery",
                "docs_type": "general_docs"
              },
              "score": 0.738020241
            },
            {
              "text": "[add_credential_postgres](/img/postgresql-cred.gif)4. **Writing the step:** For this step we will use the upsert operation to\ninsert/update records in the destination `patient` table and use `patient_id` as\nthe primary key. An `upsert` will update an existing row if a specified value\nalready exists in a table, and insert a new row if the specified value doesn't\nalready exist.```js\nupsert('patient', 'ON CONSTRAINT patient_pk', {\n  patient_id: dataValue('data.patient_name'),\n  patient_name: dataValue('data.patient_name'),\n  village_name: dataValue('data.village_name'),\n  last_menstrual_period: dataValue('data.last_menstrual_period'),\n  expected_delivery_date: dataValue('data.expected_delivery_date'),\n  children_alive: dataValue('data.children_alive'),\n  living_children: dataValue('data.living_children'),\n  feeling_sick: dataValue('data.feeling_sick'),\n  total_children: dataValue('data.Total_children'),\n  risk_level: dataValue('data.Risk_level'),\n});\n```\n\nFeel free to modify the code above to reflect your CommCare and database\nconfiguration according to your mapping specifications. \n\n![create-job](/img/create_job_db.gif)",
              "metadata": {
                "doc_title": "commcare-to-db",
                "docs_type": "general_docs"
              },
              "score": 0.754470885
            }
          ],
          "search_results_sections": [
            "godata",
            "commcare-to-db",
            "openlmis",
            "api-discovery",
            "openmrs",
            "openimis",
            "activity-history"
          ],
          "search_queries": [
            {
              "query": "openmrs",
              "doc_type": "adaptor_docs"
            },
            {
              "query": "search patients by name and update location",
              "doc_type": null
            }
          ],
          "config_version": 1,
          "prompts_version": 1,
          "usage": {
            "needs_docs": {
              "input_tokens": 185,
              "output_tokens": 4,
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 0
            },
            "generate_queries": {
              "input_tokens": 361,
              "output_tokens": 48,
              "cache_creation_input_tokens": 0,
              "cache_read_input_tokens": 0
            }
          }
        }
      }
    }
  }
]