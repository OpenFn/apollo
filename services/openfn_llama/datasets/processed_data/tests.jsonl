{"messages": [{"role": "system", "content": "You are a helpful Javascript code assistant."}, {"role": "user", "content": "Below is a Javascript Implementation with JsDoc that performs a task. Write an appropriate and extensive test.\n\n/* Implementation */\nimport {\n    expandReferences,\n    http,\n} from '@openfn/language-common';\n\n/**\n * Make a DELETE request\n * @public\n * @example\n *  del(`/myendpoint/${state => state.data.id}`, {\n *    headers: {'content-type': 'application/json'}\n *  })\n * @function\n * @param {string} path - Path to resource\n * @param {object} params - Body, Query, Headers and Auth parameters\n * @param {function} callback - (Optional) Callback function\n * @returns {Operation}\n */\nexport function del(path, params, callback) {\n    return state => {\n        const resolvedPath = expandReferences(path)(state);\n        const resolvedParams = http.expandRequestReferences(params)(state);\n\n        const url = setUrl(state.configuration, resolvedPath);\n\n        const auth = setAuth(\n            state.configuration,\n            resolvedParams?.authentication ?? resolvedParams.auth\n        );\n\n        const config = mapToAxiosConfig({ ...resolvedParams, url, auth });\n\n        return http\n            .delete(config)(state)\n            .then(response => handleResponse(state, response))\n            .then(nextState => handleCallback(nextState, callback));\n    };\n}\n\n"}, {"role": "assistant", "content": "/* Test */\nimport {\\n    del,\\n} from './del.js';\\nimport { each } from '@openfn/language-common';\\nimport { expect } from 'chai';\\nimport nock from 'nock';\\n\\nconst testServer = nock('https://www.example.com');\\n\\ndescribe('delete', () => {\\n    before(() => {\\n        testServer.delete('/api/fake-del-items/6').reply(204, function (url, body) {\\n            return { ...body };\\n        });\\n    });\\n\\n    it('sends a delete request', async () => {\\n        const state = {\\n            configuration: {},\\n            data: {},\\n        };\\n        const finalState = await execute(\\n            del('https://www.example.com/api/fake-del-items/6', {\\n                options: {\\n                    successCodes: [204],\\n                },\\n            })\\n        )(state);\\n\\n        expect(finalState.data).to.eql({});\\n    });\\n\\n    it('can be called inside an each block', async () => {\\n        nock('https://www.repeat.com')\\n            .delete('/api/fake-json')\\n            .times(3)\\n            .reply(200, function (url, body) {\\n                return body;\\n            });\\n\\n        const state = {\\n            configuration: {},\\n            things: [\\n                { name: 'a', age: 42 },\\n                { name: 'b', age: 83 },\\n                { name: 'c', age: 112 },\\n            ],\\n            replies: [],\\n        };\\n\\n        const finalState = await execute(\\n            each(\\n                '$.things[*]',\\n                del(\\n                    'https://www.repeat.com/api/fake-json',\\n                    {\\n                        body: state => state.data,\\n                    },\\n                    next => {\\n                        next.replies.push(next.response.config.data);\\n                        return next;\\n                    }\\n                )\\n            )\\n        )(state);\\n\\n        console.log(finalState.replies);\\n\\n        expect(finalState.replies).to.eql([\\n            '{\\\"name\\\":\\\"a\\\",\\\"age\\\":42}',\\n            '{\\\"name\\\":\\\"b\\\",\\\"age\\\":83}',\\n            '{\\\"name\\\":\\\"c\\\",\\\"age\\\":112}',\\n        ]);\\n    });\\n});\n\n/* Mock Agent */\n\n"}]}
{"messages": [{"role": "system", "content": "You are a helpful Javascript code assistant."}, {"role": "user", "content": "Below is a Javascript Implementation with JsDoc that performs a task. Write an appropriate and extensive test.\n\n/* Implementation */\nimport {\n    expandReferences,\n    http,\n} from '@openfn/language-common';\n\n/**\n * Make a POST request\n * @public\n * @example\n *  post('/myEndpoint', {\n *    body: {'foo': 'bar'},\n *    headers: {'content-type': 'application/json'},\n *    authentication: {username: 'user', password: 'pass'}\n *  })\n * @function\n * @param {string} path - Path to resource\n * @param {object} params - Body, Query, Headers and Authentication parameters\n * @param {function} callback - (Optional) Callback function\n * @returns {operation}\n */\nexport function post(path, params, callback) {\n    return state => {\n        const resolvedPath = expandReferences(path)(state);\n        const resolvedParams = http.expandRequestReferences(params)(state);\n\n        const url = setUrl(state.configuration, resolvedPath);\n\n        const auth = setAuth(\n            state.configuration,\n            resolvedParams?.authentication ?? resolvedParams?.auth\n        );\n\n        const config = mapToAxiosConfig({ ...resolvedParams, url, auth });\n\n        return http\n            .post(config)(state)\n            .then(response => handleResponse(state, response))\n            .then(nextState => handleCallback(nextState, callback));\n    };\n}\n\n"}, {"role": "assistant", "content": "/* Test */\nimport {\\n    post,\\n} from './post.js';\\nimport { each } from '@openfn/language-common';\\nimport { expect } from 'chai';\\nimport nock from 'nock';\\n\\nconst testServer = nock('https://www.example.com');\\n\\ndescribe('post', () => {\\n    before(() => {\\n        testServer.post('/api/fake-json').reply(200, function (url, body) {\\n            return body;\\n        });\\n\\n        testServer.post('/api/fake-form').reply(200, function (url, body) {\\n            return body;\\n        });\\n\\n        testServer.post('/api/fake-formData').reply(200, function (url, body) {\\n            return body;\\n        });\\n\\n        testServer\\n            .post('/api/csv-reader')\\n            .times(3)\\n            .reply(200, function (url, body) {\\n                return body;\\n            });\\n\\n        testServer\\n            .post('/api/fake-custom-success-codes')\\n            .reply(302, function (url, body) {\\n                return { ...body, statusCode: 302 };\\n            });\\n    });\\n\\n    it('should make an http request from inside the parseCSV callback', async function () {\\n        const csv = 'id,name\\\\n1,taylor\\\\n2,mtuchi\\\\n3,joe\\\\n4,stu\\\\n5,elias';\\n        const state = { references: [], data: [], apiResponses: [] };\\n\\n        const resultingState = await parseCsv(\\n            csv,\\n            { chunkSize: 2 },\\n            (state, rows) =>\\n                post(\\n                    'https://www.example.com/api/csv-reader',\\n                    {\\n                        body: rows,\\n                    },\\n                    state => {\\n                        state.apiResponses.push(...state.response.data);\\n                        return state;\\n                    }\\n                )(state)\\n        )(state);\\n\\n        expect(resultingState.apiResponses).to.eql([\\n            { id: '1', name: 'taylor' },\\n            { id: '2', name: 'mtuchi' },\\n            { id: '3', name: 'joe' },\\n            { id: '4', name: 'stu' },\\n            { id: '5', name: 'elias' },\\n        ]);\\n    });\\n\\n    it('can set JSON on the request body', async () => {\\n        const state = {\\n            configuration: {},\\n            data: { name: 'test', age: 24 },\\n        };\\n\\n        const finalState = await execute(\\n            post('https://www.example.com/api/fake-json', { body: state.data })\\n        )(state);\\n        expect(finalState.data).to.eql({ name: 'test', age: 24 });\\n    });\\n\\n    it('can set data via Form param on the request body', async () => {\\n        let form = {\\n            username: 'fake',\\n            password: 'fake_pass',\\n        };\\n        const state = {\\n            configuration: {},\\n            data: form,\\n        };\\n\\n        const finalState = await execute(\\n            post('https://www.example.com/api/fake-form', {\\n                form: state => state.data,\\n            })\\n        )(state);\\n\\n        expect(finalState.data.body).to.contain(\\n            'Content-Disposition: form-data; name=\\\"username\\\"\\\\r\\\\n\\\\r\\\\nfake'\\n        );\\n        expect(finalState.data.body).to.contain(\\n            'Content-Disposition: form-data; name=\\\"password\\\"\\\\r\\\\n\\\\r\\\\nfake_pass'\\n        );\\n    });\\n\\n    it('can set FormData on the request body', async () => {\\n        let formData = {\\n            id: 'fake_id',\\n            parent: 'fake_parent',\\n            mobile_phone: 'fake_phone',\\n        };\\n\\n        const state = {\\n            configuration: {},\\n            data: formData,\\n        };\\n\\n        const finalState = await execute(\\n            post('https://www.example.com/api/fake-formData', {\\n                formData: state => {\\n                    return state.data;\\n                },\\n            })\\n        )(state);\\n\\n        expect(finalState.data.body).to.contain(\\n            'Content-Disposition: form-data; name=\\\"id\\\"\\\\r\\\\n\\\\r\\\\nfake_id'\\n        );\\n        expect(finalState.data.body).to.contain(\\n            'Content-Disposition: form-data; name=\\\"parent\\\"\\\\r\\\\n\\\\r\\\\nfake_parent'\\n        );\\n        expect(finalState.data.body).to.contain(\\n            'Content-Disposition: form-data; name=\\\"mobile_phone\\\"\\\\r\\\\n\\\\r\\\\nfake_phone'\\n        );\\n    });\\n\\n    it('can be called inside an each block', async () => {\\n        nock('https://www.repeat.com')\\n            .post('/api/fake-json')\\n            .times(3)\\n            .reply(200, function (url, body) {\\n                return body;\\n            });\\n\\n        const state = {\\n            configuration: {},\\n            things: [\\n                { name: 'a', age: 42 },\\n                { name: 'b', age: 83 },\\n                { name: 'c', age: 112 },\\n            ],\\n            replies: [],\\n        };\\n\\n        const finalState = await execute(\\n            each(\\n                '$.things[*]',\\n                post(\\n                    'https://www.repeat.com/api/fake-json',\\n                    {\\n                        body: state => state.data,\\n                    },\\n                    next => {\\n                        next.replies.push(next.response.config.data);\\n                        return next;\\n                    }\\n                )\\n            )\\n        )(state);\\n\\n        expect(finalState.replies).to.eql([\\n            '{\\\"name\\\":\\\"a\\\",\\\"age\\\":42}',\\n            '{\\\"name\\\":\\\"b\\\",\\\"age\\\":83}',\\n            '{\\\"name\\\":\\\"c\\\",\\\"age\\\":112}',\\n        ]);\\n    });\\n\\n    it('can be called inside an each with old \\\"json\\\" request config', async () => {\\n        nock('https://www.repeat.com')\\n            .post('/api/fake-json')\\n            .times(3)\\n            .reply(200, function (url, body) {\\n                return body;\\n            });\\n\\n        const state = {\\n            configuration: {},\\n            things: [\\n                { name: 'a', age: 42 },\\n                { name: 'b', age: 83 },\\n                { name: 'c', age: 112 },\\n            ],\\n            replies: [],\\n        };\\n\\n        const finalState = await execute(\\n            each(\\n                '$.things[*]',\\n                post(\\n                    'https://www.repeat.com/api/fake-json',\\n                    {\\n                        json: state => state.data,\\n                    },\\n                    next => {\\n                        next.replies.push(next.response.config.data);\\n                        return next;\\n                    }\\n                )\\n            )\\n        )(state);\\n\\n        expect(finalState.replies).to.eql([\\n            '{\\\"name\\\":\\\"a\\\",\\\"age\\\":42}',\\n            '{\\\"name\\\":\\\"b\\\",\\\"age\\\":83}',\\n            '{\\\"name\\\":\\\"c\\\",\\\"age\\\":112}',\\n        ]);\\n    });\\n\\n    it('can set successCodes on the request', async () => {\\n        let data = {\\n            id: 'fake_id',\\n            parent: 'fake_parent',\\n            mobile_phone: 'fake_phone',\\n        };\\n        const state = {\\n            configuration: {},\\n            data,\\n        };\\n        const finalState = await execute(\\n            post('https://www.example.com/api/fake-custom-success-codes', {\\n                data: state => {\\n                    return state.data;\\n                },\\n                options: { successCodes: [302] },\\n            })\\n        )(state);\\n\\n        expect(finalState.data.statusCode).to.eq(302);\\n    });\\n});\\n\n\n/* Mock Agent */\n\n"}]}
{"messages": [{"role": "system", "content": "You are a helpful Javascript code assistant."}, {"role": "user", "content": "Below is a Javascript Implementation with JsDoc that performs a task. Write an appropriate and extensive test.\n\n/* Implementation */\nimport {\n    expandReferences,\n    http,\n  } from '@openfn/language-common';\n\n/**\n * Make a GET request\n * @public\n * @example\n *  get('/myEndpoint', {\n *    query: {foo: 'bar', a: 1},\n *    headers: {'content-type': 'application/json'},\n *    authentication: {username: 'user', password: 'pass'}\n *  })\n * @function\n * @param {string} path - Path to resource\n * @param {object} params - Query, Headers and Authentication parameters\n * @param {function} callback - (Optional) Callback function\n * @returns {Operation}\n */\nexport function get(path, params, callback) {\n    return state => {\n      const resolvedPath = expandReferences(path)(state);\n      const resolvedParams = http.expandRequestReferences(params)(state);\n  \n      const url = setUrl(state.configuration, resolvedPath);\n  \n      const auth = setAuth(\n        state.configuration,\n        resolvedParams?.authentication ?? resolvedParams?.auth\n      );\n  \n      const config = mapToAxiosConfig({ ...resolvedParams, url, auth });\n  \n      return http\n        .get(config)(state)\n        .then(response => handleResponse(state, response))\n        .then(nextState => handleCallback(nextState, callback));\n    };\n  }\n\n"}, {"role": "assistant", "content": "/* Test */\nimport {\\n    get,\\n    alterState,\\n} from './get.js';\\nimport { each } from '@openfn/language-common';\\nimport { expect } from 'chai';\\nimport nock from 'nock';\\n\\nfunction stdGet(state) {\\n    return execute(get('https://www.example.com/api/fake', {}))(state).then(\\n        nextState => {\\n            const { data, references } = nextState;\\n            expect(data).to.haveOwnProperty('httpStatus', 'OK');\\n            expect(data).to.haveOwnProperty('message', 'the response');\\n\\n            expect(references).to.eql([{ triggering: 'event' }]);\\n        }\\n    );\\n}\\n\\nconst testServer = nock('https://www.example.com');\\n\\ndescribe('get()', () => {\\n    before(() => {\\n        testServer.get('/api/fake').times(4).reply(200, {\\n            httpStatus: 'OK',\\n            message: 'the response',\\n        });\\n\\n        testServer\\n            .get('/api/showMeMyHeaders')\\n            .times(3)\\n            .reply(200, function (url, body) {\\n                return [url, this.req.headers];\\n            });\\n\\n        testServer\\n            .get('/api/showMeMyHeaders?id=1')\\n            .reply(200, function (url, body) {\\n                return [url, this.req.headers];\\n            });\\n\\n        testServer\\n            .get('/api/fake-endpoint')\\n            .matchHeader('followAllRedirects', true)\\n            .reply(301, undefined, {\\n                Location: 'https://www.example.com/api/fake-endpoint-2',\\n            })\\n            .get('/api/fake-endpoint-2')\\n            .reply(302, undefined, {\\n                Location: 'https://www.example.com/api/fake-endpoint-3',\\n            })\\n            .get('/api/fake-endpoint-3')\\n            .reply(200, function (url, body) {\\n                return { url };\\n            });\\n\\n        testServer.get('/api/fake-cookies').reply(\\n            200,\\n            function (url, body) {\\n                return { url };\\n            },\\n            { 'Set-Cookie': ['tasty_cookie=choco'] }\\n        );\\n\\n        testServer.get('/api/fake-callback').reply(200, function (url, body) {\\n            return { url, id: 3 };\\n        });\\n\\n        testServer.get('/api/fake-promise').reply(200, function (url, body) {\\n            return new Promise((resolve, reject) => {\\n                resolve({ url, id: 3 });\\n            });\\n        });\\n\\n        testServer.get('/api/badAuth').times(2).reply(404);\\n        testServer.get('/api/crashDummy').times(2).reply(500);\\n    });\\n\\n    it('prepares nextState properly', () => {\\n        let state = {\\n            configuration: {\\n                username: 'hello',\\n                password: 'there',\\n                baseUrl: 'https://www.example.com',\\n            },\\n            data: {\\n                triggering: 'event',\\n            },\\n        };\\n\\n        return execute(\\n            alterState(state => {\\n                state.counter = 1;\\n                return state;\\n            }),\\n            get('/api/fake', {}),\\n            alterState(state => {\\n                state.counter = 2;\\n                return state;\\n            })\\n        )(state).then(nextState => {\\n            const { data, references, counter } = nextState;\\n            expect(data).to.haveOwnProperty('httpStatus', 'OK');\\n            expect(data).to.haveOwnProperty('message', 'the response');\\n            expect(references).to.eql([{ triggering: 'event' }]);\\n            expect(counter).to.eql(2);\\n        });\\n    });\\n\\n    it('works without a baseUrl', () => {\\n        let state = {\\n            configuration: {\\n                username: 'hello',\\n                password: 'there',\\n            },\\n            data: { triggering: 'event' },\\n        };\\n        return stdGet(state);\\n    });\\n\\n    it('works with an empty set of credentials', () => {\\n        let state = {\\n            configuration: {},\\n            data: { triggering: 'event' },\\n        };\\n        return stdGet(state);\\n    });\\n\\n    it('works with no credentials (null)', () => {\\n        let state = {\\n            configuration: null,\\n            data: {\\n                triggering: 'event',\\n            },\\n        };\\n        return stdGet(state);\\n    });\\n\\n    it('accepts headers', async () => {\\n        const state = {\\n            configuration: {\\n                username: 'hello',\\n                password: 'there',\\n            },\\n            data: { triggering: 'event' },\\n        };\\n\\n        const finalState = await execute(\\n            get('https://www.example.com/api/showMeMyHeaders', {\\n                headers: { 'x-openfn': 'testing' },\\n            })\\n        )(state);\\n\\n        expect(finalState.data[0]).to.eql('/api/showMeMyHeaders');\\n\\n        expect(finalState.data[1]).to.haveOwnProperty('x-openfn', 'testing');\\n\\n        expect(finalState.data[1]).to.haveOwnProperty(\\n            'authorization',\\n            'Basic aGVsbG86dGhlcmU='\\n        );\\n\\n        expect(finalState.data[1]).to.haveOwnProperty('host', 'www.example.com');\\n\\n        expect(finalState.references).to.eql([{ triggering: 'event' }]);\\n    });\\n\\n    it('accepts authentication for http basic auth', async () => {\\n        const state = {\\n            configuration: {\\n                username: 'hello',\\n                password: 'there',\\n            },\\n            data: { triggering: 'event' },\\n        };\\n\\n        const finalState = await execute(\\n            get('https://www.example.com/api/showMeMyHeaders')\\n        )(state);\\n        expect(finalState.data[0]).to.eql('/api/showMeMyHeaders');\\n        expect(finalState.data[1]).to.haveOwnProperty(\\n            'authorization',\\n            'Basic aGVsbG86dGhlcmU='\\n        );\\n        expect(finalState.data[1]).to.haveOwnProperty('host', 'www.example.com');\\n    });\\n\\n    it('can enable gzip', async () => {\\n        const state = {\\n            configuration: {},\\n            data: {},\\n        };\\n\\n        const finalState = await execute(\\n            get('https://www.example.com/api/showMeMyHeaders', { gzip: true })\\n        )(state);\\n\\n        expect(finalState.data[0]).to.eql('/api/showMeMyHeaders');\\n\\n        expect(finalState.data[1]).to.haveOwnProperty(\\n            'accept-encoding',\\n            'gzip, deflate'\\n        );\\n\\n        expect(finalState.data[1]).to.haveOwnProperty('host', 'www.example.com');\\n    });\\n\\n    it('allows query strings to be set', async () => {\\n        const state = {\\n            configuration: {},\\n            data: {},\\n        };\\n\\n        const finalState = await execute(\\n            get('https://www.example.com/api/showMeMyHeaders', { query: { id: 1 } })\\n        )(state);\\n\\n        expect(finalState.data[0]).to.eql('/api/showMeMyHeaders?id=1');\\n\\n        expect(finalState.data[1]).to.haveOwnProperty('host', 'www.example.com');\\n    });\\n\\n    it('can follow redirects', async () => {\\n        const state = {\\n            configuration: {},\\n            data: {},\\n        };\\n\\n        const finalState = await execute(\\n            get('https://www.example.com/api/fake-endpoint', {\\n                headers: { followAllRedirects: true },\\n            })\\n        )(state);\\n        expect(finalState.data.url).to.eql('/api/fake-endpoint-3');\\n    });\\n\\n    it('can keep and reuse cookies', async () => {\\n        const state = {\\n            configuration: {},\\n            data: {},\\n        };\\n\\n        const finalState = await execute(\\n            get('https://www.example.com/api/fake-cookies', {\\n                keepCookie: true,\\n            })\\n        )(state);\\n\\n        expect(finalState.data.__cookie).to.eql('tasty_cookie=choco');\\n    });\\n\\n    it('accepts callbacks and calls them with nextState', async () => {\\n        const state = {\\n            configuration: {},\\n            data: {},\\n        };\\n\\n        const finalState = await execute(\\n            get('https://www.example.com/api/fake-callback', {}, state => {\\n                return state;\\n            })\\n        )(state);\\n\\n        expect(finalState.data.id).to.eql(3);\\n    });\\n\\n    it('returns a promise that contains nextState', async () => {\\n        const state = {\\n            configuration: {},\\n            data: {},\\n        };\\n\\n        const finalState = await execute(\\n            get('https://www.example.com/api/fake-promise', {})\\n        )(state).then(state => state);\\n        expect(finalState.data.id).to.eql(3);\\n    });\\n\\n    it('allows successCodes to be specified via options', async () => {\\n        const state = {\\n            configuration: {},\\n            data: {},\\n        };\\n\\n        const finalState = await execute(\\n            get('https://www.example.com/api/badAuth', {\\n                options: { successCodes: [404] },\\n            })\\n        )(state);\\n\\n        expect(finalState.response.status).to.eql(404);\\n    });\\n\\n    it('throws an error for a non-2XX response', async () => {\\n        const state = {\\n            configuration: {},\\n            data: {},\\n        };\\n\\n        const error = await execute(get('https://www.example.com/api/crashDummy'))(\\n            state\\n        ).catch(error => error);\\n\\n        expect(error.response.status).to.eql(500);\\n    });\\n\\n    it('can be called inside an each block', async () => {\\n        nock('https://www.repeat.com')\\n            .get('/api/fake-json')\\n            .times(3)\\n            .reply(200, function (url, body) {\\n                return body;\\n            });\\n\\n        const state = {\\n            configuration: {},\\n            things: [\\n                { name: 'a', age: 42 },\\n                { name: 'b', age: 83 },\\n                { name: 'c', age: 112 },\\n            ],\\n            replies: [],\\n        };\\n\\n        const finalState = await execute(\\n            each(\\n                '$.things[*]',\\n                get(\\n                    'https://www.repeat.com/api/fake-json',\\n                    {\\n                        body: state => state.data,\\n                    },\\n                    next => {\\n                        next.replies.push(next.response.config.data);\\n                        return next;\\n                    }\\n                )\\n            )\\n        )(state);\\n\\n        console.log(finalState.replies);\\n\\n        expect(finalState.replies).to.eql([\\n            '{\\\"name\\\":\\\"a\\\",\\\"age\\\":42}',\\n            '{\\\"name\\\":\\\"b\\\",\\\"age\\\":83}',\\n            '{\\\"name\\\":\\\"c\\\",\\\"age\\\":112}',\\n        ]);\\n    });\\n});\n\n/* Mock Agent */\n\n"}]}
{"messages": [{"role": "system", "content": "You are a helpful Javascript code assistant."}, {"role": "user", "content": "Below is a Javascript Implementation with JsDoc that performs a task. Write an appropriate and extensive test.\n\n/* Implementation */\nimport { expandReferences } from '@openfn/language-common/util';\n\n/**\n * Get a Drive or SharePoint document library. The drive metadata will be written\n * to state.drives, where it can be used by other adaptor functions.\n * Pass { id } to get a drive by id or { id, owner } to get default drive for\n * some parent resource, like a group\n * @public\n * @example <caption>Get a drive by ID</caption>\n * getDrive({ id: \"YXzpkoLwR06bxC8tNdg71m\" })\n * @example <caption>Get the default drive for a site</caption>\n * getDrive({ id: \"openfn.sharepoint.com\", owner: \"sites\" })\n * @param specifier {Object} - A definition of the drive to retrieve\n *    - id {string} - The ID of the resource or owner.\n *    - owner {string} - The type of drive owner (e.g. sites, groups).\n * @param {string} name - The local name of the drive used to write to state.drives, ie, state.drives[name]\n * @param {function} [callback = s => s] (Optional) Callback function\n * @return {Operation}\n */\nexport function getDrive(specifier, name = 'default', callback = s => s) {\n    return state => {\n        const { accessToken, apiVersion } = state.configuration;\n        const [resolvedSpecifier, resolvedName] = expandReferences(\n            state,\n            specifier,\n            name\n        );\n\n        const { id, owner = 'drive' } = resolvedSpecifier;\n\n        let resource;\n        if (owner === 'drive') {\n            resource = `drives/${id}`;\n        } else {\n            resource = `${owner}/${id}/drive`;\n        }\n\n        const url = setUrl(resource, apiVersion);\n\n        return request(url, { accessToken }).then(response => {\n            state.drives[resolvedName] = response;\n            return callback(state);\n        });\n    };\n}\n\n"}, {"role": "assistant", "content": "/* Test */\nimport { getDrive } from './getDrive.js';\\nimport { MockAgent, fixtures } from './mockAgent.js';\\nimport { expect } from 'chai';\\nimport { setGlobalDispatcher } from 'undici';\\n\\nsetGlobalDispatcher(MockAgent);\\n\\ndescribe('getDrive', () => {\\n    it('should get a drive by id and set it to state', async () => {\\n      const state = {\\n        configuration: {\\n          accessToken: fixtures.accessToken,\\n        },\\n      };\\n  \\n      const finalState = await execute(\\n        getDrive({ id: 'b!YXzpkoLwR06bxC8tNdg71m_' }, undefined, state => {\\n          // write the drives object back to state before it gets cleaned up\\n          state.result = state.drives;\\n          return state;\\n        })\\n      )(state);\\n  \\n      expect(finalState.result.default).to.eql(fixtures.driveResponse);\\n    });\\n  \\n    it('should get a named drive by id and set it to state', async () => {\\n      const state = {\\n        configuration: {\\n          accessToken: fixtures.accessToken,\\n        },\\n      };\\n  \\n      const finalState = await execute(\\n        getDrive({ id: 'b!YXzpkoLwR06bxC8tNdg71m_' }, 'mydrive', state => {\\n          // write the drives object back to state before it gets cleaned up\\n          state.result = state.drives;\\n          return state;\\n        })\\n      )(state);\\n  \\n      expect(finalState.result.mydrive).to.eql(fixtures.driveResponse);\\n    });\\n  \\n    it('should get the default drive for a site', async () => {\\n      const state = {\\n        configuration: {\\n          accessToken: fixtures.accessToken,\\n        },\\n      };\\n  \\n      const finalState = await execute(\\n        getDrive(\\n          { id: 'openfn.sharepoint.com', owner: 'sites' },\\n          undefined,\\n          state => {\\n            // write the drives object back to state before it gets cleaned up\\n            state.result = state.drives;\\n            return state;\\n          }\\n        )\\n      )(state);\\n  \\n      expect(finalState.result.default).to.eql(fixtures.driveResponse);\\n    });\\n    it('should throws 400 error', async () => {\\n      const state = {\\n        configuration: {\\n          accessToken: fixtures.accessToken,\\n        },\\n      };\\n  \\n      await execute(\\n        getDrive({ id: 'noAccess', owner: 'sites' })(state).catch(e => {\\n          expect(e.message).to.contain(\\n            fixtures.invalidRequestResponse.error.message\\n          );\\n        })\\n      )(state);\\n    });\\n  \\n    it('throws 401 error with invalidToken message', async () => {\\n      const state = {\\n        configuration: {\\n          accessToken: fixtures.invalidToken,\\n        },\\n      };\\n  \\n      await execute(\\n        getDrive({ id: 'openfn.sharepoint.com', owner: 'sites' })(state).catch(\\n          e => {\\n            expect(e.message).to.contain(\\n              fixtures.invalidTokenResponse.error.message\\n            );\\n          }\\n        )\\n      )(state);\\n    });\\n  \\n    it('should throws 401 error with expiredToken message', async () => {\\n      const state = {\\n        configuration: {\\n          accessToken: fixtures.expiredToken,\\n        },\\n      };\\n  \\n      await execute(\\n        getDrive({ id: 'openfn.sharepoint.com', owner: 'sites' })(state).catch(\\n          e => {\\n            expect(e.message).to.contain(\\n              fixtures.expiredTokenResponse.error.message\\n            );\\n          }\\n        )\\n      )(state);\\n    });\\n  });\n\n/* Mock Agent */import { MockAgent } from 'undici';\n\nconst driveResponse = {\n    '@odata.context': 'https://graph.microsoft.com/v1.0/$metadata#drives/$entity',\n    createdDateTime: '2022-10-23T05:09:11Z',\n    description: '',\n    id: 'b!YXzpkoLwR06bxC8tNdg71m_',\n    lastModifiedDateTime: '2023-06-16T09:19:53Z',\n    name: 'Documents',\n    webUrl: 'https://openfn.sharepoint.com/Shared%20Documents',\n    driveType: 'documentLibrary',\n    createdBy: {\n        user: {\n            displayName: 'System Account',\n        },\n    },\n    lastModifiedBy: {\n        user: {\n            email: 'adaptors@openfn.org',\n            id: 'dcebd58e-c28c-449d-b02c-ba2ce7f1ae2a',\n            displayName: 'adaptors',\n        },\n    },\n    owner: {\n        group: {\n            id: '528c63a4-0690-4a57-9d80-bf847dfde47f',\n            displayName: 'Company Administrator',\n        },\n    },\n    quota: {},\n};\n\nconst fixtures = {\n    accessToken: 'validAccessToken=',\n    expiredToken: 'expiredAccessToken',\n    invalidToken: 'invalidAccessToken',\n    driveResponse: driveResponse,\n    invalidRequestResponse: {\n        // 400\n        error: {\n            code: 'invalidRequest',\n            message: 'Invalid hostname for this tenancy',\n            innerError: {\n                date: '2023-06-27T15:38:19',\n                'request-id': '18d9a4da-c897-4c07-b203-4d06f0490a65',\n                'client-request-id': '672385d5-3ea8-f201-a4cb-a087f11d90e1',\n            },\n        },\n    },\n    invalidTokenResponse: {\n        error: {\n            code: 'InvalidAuthenticationToken',\n            message: 'CompactToken parsing failed with error code: 80049217',\n            innerError: {\n                date: '2023-06-27T22:17:01',\n                'request-id': '93fa1d83-8450-4fc4-a94f-e9d14991462d',\n                'client-request-id': '93fa1d83-8450-4fc4-a94f-e9d14991462d',\n            },\n        },\n    },\n    expiredTokenResponse: {\n        //401\n        error: {\n            code: 'InvalidAuthenticationToken',\n            message: 'Access token has expired or is not yet valid.',\n            innerError: {\n                date: '2023-06-27T22:14:17',\n                'request-id': 'd0e595aa-6b8a-4473-956a-9f889783460a',\n                'client-request-id': 'd0e595aa-6b8a-4473-956a-9f889783460a',\n            },\n        },\n    },\n};\n\nconst mockAgent = new MockAgent();\n\nconst mockPool = mockAgent.get('https://graph.microsoft.com');\n\nconst jsonResponse = {\n    headers: {\n        'Content-Type': 'application/json',\n    },\n};\n\nconst headers = {\n    'Content-Type': 'application/json',\n    Authorization: `Bearer ${fixtures.accessToken}`,\n};\n\nconst headersWithExpiredToken = {\n    'Content-Type': 'application/json',\n    Authorization: `Bearer ${fixtures.expiredToken}`,\n};\n\n\n\n// MockPool for getDrive()\nmockPool\n    .intercept({\n        path: '/v1.0/sites/openfn.sharepoint.com/drive',\n        method: 'GET',\n        headers: headersWithExpiredToken,\n    })\n    .reply(401, fixtures.expiredTokenResponse);\n\nmockPool\n    .intercept({\n        path: '/v1.0/sites/noAccess/drive',\n        method: 'GET',\n        headers: headers,\n    })\n    .reply(400, fixtures.invalidRequestResponse);\n\nmockPool\n    .intercept({\n        path: '/v1.0/sites/openfn.sharepoint.com/drive',\n        method: 'GET',\n        headers: headers,\n    })\n    .reply(200, fixtures.driveResponse, jsonResponse)\n    .persist();\n\nmockPool\n    .intercept({\n        path: '/v1.0/drives/b!YXzpkoLwR06bxC8tNdg71m_',\n        method: 'GET',\n        headers: headers,\n    })\n    .reply(200, fixtures.driveResponse, jsonResponse)\n    .persist();\n\n"}]}