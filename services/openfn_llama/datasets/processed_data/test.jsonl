{"messages": [{"role": "system", "content": "You are a helpful Javascript code assistant."}, {"role": "user", "content": "Below is a TypeScript Declaration with JsDoc that describes a tasks. Write a Javascript Implementation that approriately answers the task.\n/* TypeScript Declaration with JsDoc */\n/**\n * Update customer billing information.\n * Endpoint: PUT /customer/billing\n * @param {object} billingInfo - Object containing updated billing information.\n * @param {function} callback - Callback function to handle the response.\n * @returns {Promise<void>}\n */\ndeclare function updateCustomerBilling(billingInfo: object, callback: (response: any) => void): Promise<void>;\n// Generate the JS Implementation code that corresponds to the above TypeScript declaration."}, {"role": "assistant", "content": "/* JavaScript Implementation */\nimport { http, expandReferences } from '@openfn/language-http';\n\n/**\n * Update customer billing information.\n * @param {object} billingInfo - Object containing updated billing information.\n * @param {function} callback - Callback function to handle the response.\n */\nexport function updateCustomerBilling(billingInfo, callback) {\n  return async (state) => {\n    const url = state.configuration.apiUrl + '/customer/billing';\n    const data = expandReferences(billingInfo)(state);\n    try {\n      const response = await http.put({ url, data });\n      console.log('Customer billing information updated:', response);\n      callback(response);\n    } catch (error) {\n      console.error('Failed to update customer billing information:', error);\n      throw error;\n    }\n  };\n}\n"}]}
{"messages": [{"role": "system", "content": "You are a helpful Javascript code assistant."}, {"role": "user", "content": "Below is a TypeScript Declaration with JsDoc that describes a tasks. Write a Javascript Implementation that approriately answers the task.\n/* TypeScript Declaration with JsDoc */\n/**\n * Execute a sequence of operations.\n * Wraps `@openfn/language-common/execute`, and prepends initial state for khanacademy.\n * @example\n * execute(\n *   create('foo'),\n *   delete('bar')\n * )(state)\n * @private\n * @param {Operations} operations - Operations to be performed.\n * @returns {Operation}\n */\nexport function execute(...operations: Operations): Operation;"}, {"role": "assistant", "content": "/* JavaScript Implementation */\nimport {\n  execute as commonExecute,\n} from '@openfn/language-common';\n\n/**\n * Execute a sequence of operations.\n * Wraps `@openfn/language-common/execute`, and prepends initial state for khanacademy.\n * @example\n * execute(\n *   create('foo'),\n *   delete('bar')\n * )(state)\n * @private\n * @param {Operations} operations - Operations to be performed.\n * @returns {Operation}\n */\nexport function execute(...operations) {\n  const initialState = {\n    references: [],\n    data: null,\n  };\n\n  return state => {\n    return commonExecute(...operations)({ ...initialState, ...state });\n  };\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful Javascript code assistant."}, {"role": "user", "content": "Below is a TypeScript Declaration with JsDoc that describes a tasks. Write a Javascript Implementation that approriately answers the task.\n/* TypeScript Declaration with JsDoc */\n/**\n * Upsert outbreak to godata\n * @public\n * @example\n *  upsertOutbreak({externalId: \"3dec33-ede3\", data: {...}})\n * @function\n * @param {object} outbreak - an object with an externalId and some outbreak data.\n * @param {function} callback - (Optional) Callback function\n * @returns {Operation}\n */\nexport function upsertOutbreak(outbreak: object, callback: Function): Operation;"}, {"role": "assistant", "content": "/* JavaScript Implementation */\nimport {\n    composeNextState,\n    expandReferences,\n} from '@openfn/language-common';\nimport axios from 'axios';\n\n/**\n * Upsert outbreak to godata\n * @public\n * @example\n *  upsertOutbreak({externalId: \"3dec33-ede3\", data: {...}})\n * @function\n * @param {object} outbreak - an object with an externalId and some outbreak data.\n * @param {function} callback - (Optional) Callback function\n * @returns {Operation}\n */\nexport function upsertOutbreak(outbreak, callback) {\n    return state => {\n        const { apiUrl, access_token } = state.configuration;\n\n        const { externalId, data } = expandReferences(outbreak)(state);\n\n        const filter = JSON.stringify({ where: { id: externalId } });\n\n        return axios({\n            method: 'GET',\n            baseURL: apiUrl,\n            url: '/outbreaks',\n            params: {\n                filter,\n                access_token,\n            },\n        })\n            .then(response => {\n                if (response.data.length > 0) {\n                    console.log('Outbreak found. Performing update.');\n                    const outbreakId = response.data[0].id;\n                    return axios({\n                        method: 'PUT',\n                        baseURL: apiUrl,\n                        url: `/outbreaks/${outbreakId}`,\n                        params: {\n                            access_token,\n                        },\n                        data,\n                    })\n                        .then(response => {\n                            const nextState = composeNextState(state, response.data);\n                            if (callback) return callback(nextState);\n                            return nextState;\n                        })\n                        .catch(error => {\n                            return error;\n                        });\n                } else {\n                    console.log('No outbreak found. Performing create.');\n                    return axios({\n                        method: 'POST',\n                        baseURL: apiUrl,\n                        url: '/outbreaks',\n                        params: {\n                            access_token,\n                        },\n                        data,\n                    })\n                        .then(response => {\n                            const nextState = composeNextState(state, response.data);\n                            if (callback) return callback(nextState);\n                            return nextState;\n                        })\n                        .catch(error => {\n                            return error;\n                        });\n                }\n            })\n            .catch(error => {\n                return error;\n            });\n    };\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful Javascript code assistant."}, {"role": "user", "content": "Below is a TypeScript Declaration with JsDoc that describes a tasks. Write a Javascript Implementation that approriately answers the task.\n/* TypeScript Declaration with JsDoc */\n/**\n * Fetch supplier details.\n * Endpoint: GET /supplier/details\n * @param {string} supplier_id - The ID of the supplier to fetch details for.\n * @param {function} callback - Callback function to process the supplier details data.\n * @returns {Promise<void>}\n */\ndeclare function getSupplierDetails(supplier_id: string, callback: (details: any) => void): Promise<void>;\n// Generate the JS Implementation code that corresponds to the above TypeScript declaration."}, {"role": "assistant", "content": "/* JavaScript Implementation */\nimport { http } from '@openfn/language-http';\n\n/**\n * Fetch supplier details.\n * @param {string} supplier_id - The ID of the supplier to fetch details for.\n * @param {function} callback - Callback function to process the supplier details data.\n */\nexport function getSupplierDetails(supplier_id, callback) {\n  return async (state) => {\n    const url = `${state.configuration.apiUrl}/supplier/details?supplier_id=${supplier_id}`;\n    try {\n      const response = await http.get({ url });\n      console.log('Supplier details fetched:', response);\n      callback(response.data);\n    } catch (error) {\n      console.error('Failed to fetch supplier details:', error);\n      throw error;\n    }\n  };\n}\n"}]}
{"messages": [{"role": "system", "content": "You are a helpful Javascript code assistant."}, {"role": "user", "content": "Below is a TypeScript Declaration with JsDoc that describes a tasks. Write a Javascript Implementation that approriately answers the task.\n/* TypeScript Declaration with JsDoc */\n/**\n * Create some resource in Google Cloud Healthcare\n * @public\n * @example\n * createFhirResource(\n *   {\n *     cloudRegion: \"us-central1\",\n *     projectId: \"adjective-noun-123\",\n *     datasetId: \"my-dataset\",\n *     fhirStoreId: \"my-fhir-store\",\n *   },\n *   {\n *     resourceType: \"Patient\",\n *     name: [{ use: \"official\", family: \"Smith\", given: [\"Darcy\"] }],\n *     gender: \"female\",\n *     birthDate: \"1970-01-01\",\n *   }\n * );\n * @example\n * createFhirResource(\n *   {\n *     cloudRegion: \"us-central1\",\n *     projectId: \"adjective-noun-123\",\n *     datasetId: \"my-dataset\",\n *     fhirStoreId: \"my-fhir-store\",\n *   },\n *   (state) => ({\n *     resourceType: \"Encounter\",\n *     status: \"finished\",\n *     class: {\n *       system: \"http://hl7.org/fhir/v3/ActCode\",\n *       code: \"IMP\",\n *       display: \"inpatient encounter\",\n *     },\n *     reasonCode: [\n *       {\n *         text: \"The patient had an abnormal heart rate. She was concerned about this.\",\n *       },\n *     ],\n *     subject: {\n *       reference: `Patient/${state.data.id}`,\n *     },\n *   })\n * );\n *\n * @function\n * @param {{cloudRegion: string, projectId: string, datasetId: string, fhirStoreId: string}} [fhirStore] - The FHIR store information.\n *    - `cloudRegion` (string): The cloud region where the FHIR store is located.\n *    - `projectId` (string): The ID of the project that contains the FHIR store.\n *    - `datasetId` (string): The ID of the dataset that contains the FHIR store.\n *    - `fhirStoreId` (string): The ID of the FHIR store.\n * @param {object} resource - The FHIR resource data to be created\n * @param {function} callback - An optional callback function\n * @returns {Operation}\n */\nexport function createFhirResource(fhirStore?: {\n    cloudRegion: string;\n    projectId: string;\n    datasetId: string;\n    fhirStoreId: string;\n}, resource: object, callback: Function): Operation;"}, {"role": "assistant", "content": "/* JavaScript Implementation */\nimport {\n  composeNextState,\n} from '@openfn/language-common';\nimport {\n  expandReferences\n} from '@openfn/language-common/util';\n\n\nexport function buildUrl({\n  apiVersion,\n  projectId,\n  cloudRegion,\n  datasetId,\n  fhirStoreId,\n  resourceType,\n}) {\n  const setApiVersion = apiVersion ? apiVersion : 'v1';\n  const baseUrl = `https://healthcare.googleapis.com/${setApiVersion}`;\n\n  return `${baseUrl}/projects/${projectId}/locations/${cloudRegion}/datasets/${datasetId}/fhirStores/${fhirStoreId}/fhir/${resourceType}`;\n}\n\nexport const request = async (url, params = {}, method = 'GET') => {\n  const { auth } = params;\n  delete params.auth;\n\n  const options = {\n    method,\n    body: JSON.stringify(params),\n    headers: {\n      'Content-Type': 'application/fhir+json',\n      Authorization: `Bearer ${auth.accessToken}`,\n    },\n  };\n\n  if (method == 'GET') delete options.body;\n\n  const resolvedUrl =\n    method == 'GET' ? `${url}?${new URLSearchParams(params).toString()}` : url;\n\n  const response = await fetch(resolvedUrl, options);\n  const data = await response.json();\n\n  handleResponseError(response, data, method);\n\n  return data;\n};\n\n/**\n * Create some resource in Google Cloud Healthcare\n * @public\n * @example\n * createFhirResource(\n *   {\n *     cloudRegion: \"us-central1\",\n *     projectId: \"adjective-noun-123\",\n *     datasetId: \"my-dataset\",\n *     fhirStoreId: \"my-fhir-store\",\n *   },\n *   {\n *     resourceType: \"Patient\",\n *     name: [{ use: \"official\", family: \"Smith\", given: [\"Darcy\"] }],\n *     gender: \"female\",\n *     birthDate: \"1970-01-01\",\n *   }\n * );\n * @example\n * createFhirResource(\n *   {\n *     cloudRegion: \"us-central1\",\n *     projectId: \"adjective-noun-123\",\n *     datasetId: \"my-dataset\",\n *     fhirStoreId: \"my-fhir-store\",\n *   },\n *   (state) => ({\n *     resourceType: \"Encounter\",\n *     status: \"finished\",\n *     class: {\n *       system: \"http://hl7.org/fhir/v3/ActCode\",\n *       code: \"IMP\",\n *       display: \"inpatient encounter\",\n *     },\n *     reasonCode: [\n *       {\n *         text: \"The patient had an abnormal heart rate. She was concerned about this.\",\n *       },\n *     ],\n *     subject: {\n *       reference: `Patient/${state.data.id}`,\n *     },\n *   })\n * );\n *\n * @function\n * @param {{cloudRegion: string, projectId: string, datasetId: string, fhirStoreId: string}} [fhirStore] - The FHIR store information.\n *    - `cloudRegion` (string): The cloud region where the FHIR store is located.\n *    - `projectId` (string): The ID of the project that contains the FHIR store.\n *    - `datasetId` (string): The ID of the dataset that contains the FHIR store.\n *    - `fhirStoreId` (string): The ID of the FHIR store.\n * @param {object} resource - The FHIR resource data to be created\n * @param {function} callback - An optional callback function\n * @returns {Operation}\n */\nexport function createFhirResource(fhirStore, resource, callback) {\n  return async state => {\n    const { apiVersion, accessToken } = state.configuration;\n\n    const [resolvedFhirStore, resolvedResource] = expandReferences(\n      state,\n      fhirStore,\n      resource\n    );\n    const { resourceType } = resolvedResource;\n    const { cloudRegion, projectId, datasetId, fhirStoreId } =\n      resolvedFhirStore;\n\n    const requiredKeys = [\n      'cloudRegion',\n      'projectId',\n      'datasetId',\n      'fhirStoreId',\n    ];\n\n    const missingKeys = requiredKeys.filter(key => !(key in resolvedFhirStore));\n\n    if (missingKeys.length > 0) {\n      throw new Error(`Missing key(s) in fhirStore: ${missingKeys.join(', ')}`);\n    }\n\n    const url = buildUrl({\n      apiVersion,\n      projectId,\n      cloudRegion,\n      datasetId,\n      fhirStoreId,\n      resourceType,\n    });\n\n    const payload = {\n      auth: { accessToken },\n      ...resolvedResource,\n    };\n\n    return request(url, payload, 'POST').then(response => {\n      console.log(\n        `Created FHIR ${resourceType} resource with ID ${response.id}`\n      );\n      const nextState = {\n        ...composeNextState(state, response),\n        response,\n      };\n      if (callback) return callback(nextState);\n      return nextState;\n    });\n  };\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful Javascript code assistant."}, {"role": "user", "content": "Below is a TypeScript Declaration with JsDoc that describes a tasks. Write a Javascript Implementation that approriately answers the task.\n/* TypeScript Declaration with JsDoc */\n/**\n * Fetch all non-retired persons that match any specified parameters\n * @example\n * searchPerson({ q: Sarah })\n * @function\n * @param {object} query - object with query for the person\n * @param {function} [callback] - Optional callback to handle the response\n * @returns {Operation}\n */\nexport function searchPerson(query: object, callback?: Function): Operation;"}, {"role": "assistant", "content": "/* JavaScript Implementation */\nimport {\n  expandReferences,\n  composeNextState,\n} from '@openfn/language-common';\n\nlet agent = null;\n/**\n * Logs in to OpenMRS, gets a session token.\n * Agent used in main function\n * @example\n *  login(state)\n * @private\n * @param {State} state - Runtime state.\n * @returns {State}\n */\nasync function login(state) {\n  const { instanceUrl, username, password } = state.configuration;\n  agent = request.agent();\n  await agent.get(`${instanceUrl}/ws/rest/v1/session`).auth(username, password);\n\n  return state;\n}\n\nexport const Log = {\n  success: message => console.log(`\u2713 Success at ${new Date()}:\\n\u221f ${message}`),\n  warn: message => console.log(`\u26a0 Warning at ${new Date()}:\\n\u221f ${message}`),\n  error: message => console.log(`\u2717 Error at ${new Date()}:\\n\u221f ${message}`),\n  info: message => console.log(`\u2139 Info at ${new Date()}:\\n\u221f ${message}`),\n};\n\nexport function handleError(error) {\n  if (error.response) {\n    const { method, path } = error.response.req;\n    const { status } = error.response;\n    if (Object.keys(error.response.body).length === 0) {\n      throw new Error(\n        `Server responded with:  \\n${JSON.stringify(error.response, null, 2)}`\n      );\n    }\n\n    const errorString = [\n      `Request: ${method} ${path}`,\n      `Got: ${status}`,\n      'Body:',\n      JSON.stringify(error.response.body, null, 2),\n    ].join('\\n');\n\n    throw new Error(errorString);\n  } else {\n    throw error;\n  }\n}\n\nexport function handleResponse(response, state, callback) {\n  const { body } = response;\n  const nextState = composeNextState(state, { body });\n  if (callback) return callback(nextState);\n  return nextState;\n}\n\n/**\n * Fetch all non-retired persons that match any specified parameters\n * @example\n * searchPerson({ q: Sarah })\n * @function\n * @param {object} query - object with query for the person\n * @param {function} [callback] - Optional callback to handle the response\n * @returns {Operation}\n */\nexport function searchPerson(query, callback = false) {\n  return state => {\n    const qs = expandReferences(query)(state);\n    Log.info(`Searching for person with name: ${qs.q}`);\n\n    const { instanceUrl } = state.configuration;\n\n    const url = `${instanceUrl}/ws/rest/v1/person`;\n\n    return agent\n      .get(url)\n      .accept('json')\n      .query(qs)\n      .then(response => {\n        const data = response.body;\n        const count = data.results.length;\n\n        if (count > 0) {\n          Log.success(\n            `Search successful. Returned ${count} person${count > 1 ? 's' : ''\n            }.`\n          );\n          return handleResponse(response, state, callback);\n        } else {\n          Log.warn(`${count} records were found.`);\n        }\n      })\n      .catch(handleError);\n  };\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful Javascript code assistant."}, {"role": "user", "content": "Below is a TypeScript Declaration with JsDoc that describes a tasks. Write a Javascript Implementation that approriately answers the task.\n/* TypeScript Declaration with JsDoc */\n/**\n * Get the list of tasks for a given project.\n * @public\n * @example\n * getTasks(\"projectGid\",\n *  {\n *    opt_fields: \"name,notes,assignee\"\n *  })\n * @function\n * @param {string} projectGid - Globally unique identifier for the project\n * @param {object} params - Query params to include.\n * @param {function} callback - (Optional) callback function\n * @returns {Operation}\n */\nexport function getTasks(projectGid: string, params: object, callback: Function): Operation;"}, {"role": "assistant", "content": "/* JavaScript Implementation */\nimport { composeNextState, expandReferences, http } from '@openfn/language-common';\n\n/**\n * Get the list of tasks for a given project.\n * @public\n * @param {string} projectGid - Globally unique identifier for the project\n * @param {object} params - Query params to include.\n * @param {function} callback - (Optional) callback function\n * @returns {Operation}\n */\nexport function getTasks(projectGid, params, callback) {\n    return state => {\n        const resolvedProjectGid = expandReferences(projectGid)(state);\n        const { opt_fields } = expandReferences(params)(state);\n\n        const { apiVersion, token } = state.configuration;\n\n        const url = `https://app.asana.com/api/${apiVersion}/projects/${resolvedProjectGid}/tasks`;\n\n        const config = {\n            url,\n            headers: { Authorization: `Bearer ${token}` },\n            params: {\n                opt_fields,\n            },\n        };\n\n        return http\n            .get(config)(state)\n            .then(response => {\n                const nextState = {\n                    ...composeNextState(state, response.data),\n                    response,\n                };\n                if (callback) return callback(nextState);\n                return nextState;\n            });\n    };\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful Javascript code assistant."}, {"role": "user", "content": "Below is a TypeScript Declaration with JsDoc that describes a tasks. Write a Javascript Implementation that approriately answers the task.\n/* TypeScript Declaration with JsDoc */\n/**\n * Sends a message to a list of contacts and/or URNs\n * @public\n * @example\n * sendBroadcast({\n *   text: \"Hello world\",\n *   urns: [\"twitter:sirmixalot\"],\n *   contacts: [\"a052b00c-15b3-48e6-9771-edbaa277a353\"]\n * });\n * @function\n * @param {object} params - data to create the new resource\n * @param {function} callback - (Optional) callback function\n * @returns {Operation}\n */\nexport function sendBroadcast(params: object, callback: Function): Operation;"}, {"role": "assistant", "content": "/* JavaScript Implementation */\nimport {\n  composeNextState,\n  expandReferences,\n  http,\n} from '@openfn/language-common';\n\n/**\n * Sends a message to a list of contacts and/or URNs\n * @public\n * @example\n * sendBroadcast({\n *   text: \"Hello world\",\n *   urns: [\"twitter:sirmixalot\"],\n *   contacts: [\"a052b00c-15b3-48e6-9771-edbaa277a353\"]\n * });\n * @function\n * @param {object} params - data to create the new resource\n * @param {function} callback - (Optional) callback function\n * @returns {Operation}\n */\nexport function sendBroadcast(params, callback) {\n  return state => {\n    const resolvedParams = expandReferences(params)(state);\n\n    const { host, apiVersion, token } = state.configuration;\n\n    const url = `${host}/api/${apiVersion || 'v2'}/broadcasts.json`;\n\n    const config = {\n      url,\n      data: resolvedParams,\n      headers: {\n        Authorization: `Token ${token}`,\n        'Content-Type': 'application/json',\n      },\n    };\n\n    return http\n      .post(config)(state)\n      .catch(error => {\n        console.log(error.response);\n        throw 'That was an error from RapidPro.';\n      })\n      .then(response => {\n        console.log('Broadcast queued:', response.data);\n        const nextState = {\n          ...composeNextState(state, response.data),\n          response,\n        };\n        if (callback) return callback(nextState);\n        return nextState;\n      });\n  };\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful Javascript code assistant."}, {"role": "user", "content": "Below is a TypeScript Declaration with JsDoc that describes a tasks. Write a Javascript Implementation that approriately answers the task.\n/* TypeScript Declaration with JsDoc */\n/**\n * Update product details.\n * Endpoint: PUT /product/details\n * @param {object} productData - Object containing updated product details.\n * @param {function} callback - Callback function to handle the response.\n * @returns {Promise<void>}\n */\ndeclare function updateProductDetails(productData: object, callback: (response: any) => void): Promise<void>;\n// Generate the JS Implementation code that corresponds to the above TypeScript declaration."}, {"role": "assistant", "content": "/* JavaScript Implementation */\nimport { http, expandReferences } from '@openfn/language-http';\n\n/**\n * Update product details.\n * @param {object} productData - Object containing updated product details.\n * @param {function} callback - Callback function to handle the response.\n */\nexport function updateProductDetails(productData, callback) {\n  return async (state) => {\n    const url = state.configuration.apiUrl + '/product/details';\n    const data = expandReferences(productData)(state);\n    try {\n      const response = await http.put({ url, data });\n      console.log('Product details updated:', response);\n      callback(response);\n    } catch (error) {\n      console.error('Failed to update product details:', error);\n      throw error;\n    }\n  };\n}\n"}]}
{"messages": [{"role": "system", "content": "You are a helpful Javascript code assistant."}, {"role": "user", "content": "Below is a TypeScript Declaration with JsDoc that describes a tasks. Write a Javascript Implementation that approriately answers the task.\n/* TypeScript Declaration with JsDoc */\n/**\n * Fetch the latest blog posts.\n * Endpoint: GET /blog/latest\n * @param {number} limit - The maximum number of blog posts to fetch.\n * @param {function} callback - Callback function to process the blog posts data.\n * @returns {Promise<void>}\n */\ndeclare function getLatestBlogPosts(limit: number, callback: (posts: any[]) => void): Promise<void>;\n// Generate the JS Implementation code that corresponds to the above TypeScript declaration."}, {"role": "assistant", "content": "/* JavaScript Implementation */\nimport { http } from '@openfn/language-http';\n\n/**\n * Fetch the latest blog posts.\n * @param {number} limit - The maximum number of blog posts to fetch.\n * @param {function} callback - Callback function to process the blog posts data.\n */\nexport function getLatestBlogPosts(limit, callback) {\n  return async (state) => {\n    const url = `${state.configuration.apiUrl}/blog/latest?limit=${limit}`;\n    try {\n      const response = await http.get({ url });\n      console.log('Latest blog posts fetched:', response);\n      callback(response.data);\n    } catch (error) {\n      console.error('Failed to fetch latest blog posts:', error);\n      throw error;\n    }\n  };\n}\n"}]}
{"messages": [{"role": "system", "content": "You are a helpful Javascript code assistant."}, {"role": "user", "content": "Below is a TypeScript Declaration with JsDoc that describes a tasks. Write a Javascript Implementation that approriately answers the task.\n/* TypeScript Declaration with JsDoc */\n/**\n * Fetch product details.\n * Endpoint: GET /product/details\n * @param {string} product_id - The ID of the product to fetch details for.\n * @param {function} callback - Callback function to process the product details data.\n * @returns {Promise<void>}\n */\ndeclare function getProductDetails(product_id: string, callback: (details: any) => void): Promise<void>;\n// Generate the JS Implementation code that corresponds to the above TypeScript declaration."}, {"role": "assistant", "content": "/* JavaScript Implementation */\nimport { http } from '@openfn/language-http';\n\n/**\n * Fetch product details.\n * @param {string} product_id - The ID of the product to fetch details for.\n * @param {function} callback - Callback function to process the product details data.\n */\nexport function getProductDetails(product_id, callback) {\n  return async (state) => {\n    const url = `${state.configuration.apiUrl}/product/details?product_id=${product_id}`;\n    try {\n      const response = await http.get({ url });\n      console.log('Product details fetched:', response);\n      callback(response.data);\n    } catch (error) {\n      console.error('Failed to fetch product details:', error);\n      throw error;\n    }\n  };\n}\n"}]}
{"messages": [{"role": "system", "content": "You are a helpful Javascript code assistant."}, {"role": "user", "content": "Below is a TypeScript Declaration with JsDoc that describes a tasks. Write a Javascript Implementation that approriately answers the task.\n/* TypeScript Declaration with JsDoc */\n/**\n * Get a Drive or SharePoint document library. The drive metadata will be written\n * to state.drives, where it can be used by other adaptor functions.\n * Pass { id } to get a drive by id or { id, owner } to get default drive for\n * some parent resource, like a group\n * @public\n * @example <caption>Get a drive by ID</caption>\n * getDrive({ id: \"YXzpkoLwR06bxC8tNdg71m\" })\n * @example <caption>Get the default drive for a site</caption>\n * getDrive({ id: \"openfn.sharepoint.com\", owner: \"sites\" })\n * @param specifier {Object} - A definition of the drive to retrieve\n *    - id {string} - The ID of the resource or owner.\n *    - owner {string} - The type of drive owner (e.g. sites, groups).\n * @param {string} name - The local name of the drive used to write to state.drives, ie, state.drives[name]\n * @param {function} [callback = s => s] (Optional) Callback function\n * @return {Operation}\n */\nexport function getDrive(specifier: any, name?: string, callback?: Function): Operation;"}, {"role": "assistant", "content": "/* JavaScript Implementation */\nimport { expandReferences } from '@openfn/language-common/util';\n\n\nexport function setUrl(resource, apiVersion) {\n  if (isValidHttpUrl(resource)) return resource;\n\n  const pathSuffix = apiVersion\n    ? `${apiVersion}/${resource}`\n    : `v1.0/${resource}`;\n  return `https://graph.microsoft.com/${pathSuffix}`;\n}\n\n/**\n * This is an asynchronous function that sends a request to a specified URL with optional parameters\n * and headers, and returns the response data in JSON format.\n * @param {string} url - The URL of the API endpoint that the request is being made to.\n * @param {object} [options] - An object containing any additional parameters to be sent with the request, such\n * as query parameters or request body data. It is an optional parameter and defaults to an empty\n * object if not provided.\n * @returns The `request` function is returning the parsed JSON data from the response of the HTTP\n * request made to the specified `url` with the given `params` and `method`. If there is an error in\n * the response, the function will throw an error.\n */\nexport const request = async (path, params) => {\n  let url = path;\n  const options = { ...defaultOptions, ...params };\n  const { parseAs, query, method, accessToken } = options;\n  delete options.parseAs;\n  delete options.accessToken;\n\n  options.headers['Authorization'] = makeAuthHeader(accessToken);\n\n  if (method === 'GET' && query) {\n    url = `${path}?${new URLSearchParams(query).toString()}`;\n  }\n\n  const response = await fetch(url, options);\n  const contentType = response.headers.get('Content-Type');\n\n  // If not json then return a stream\n  let data;\n  if (parseAs) {\n    if (parseAs === 'json') data = await response.json();\n    if (parseAs === 'text') data = await response.text();\n  } else {\n    data = contentType?.includes('application/json')\n      ? await response.json()\n      : response.body;\n  }\n\n  handleResponseError(response, data, method);\n\n  return data;\n};\n\nexport function handleResponseError(response, data, method) {\n  const { status, statusText, url } = response;\n\n  if (!response.ok) {\n    const errorString = [\n      `Message: ${statusText}`,\n      `Request: ${method} ${url}`,\n      `Status: ${status}`,\n      `Body: ${JSON.stringify(data, null, 2).replace(/\\n/g, '\\n\\t  ')}`,\n    ].join('\\n\\t\u221f ');\n    throw new Error(errorString);\n  }\n}\n\n/**\n * Get a Drive or SharePoint document library. The drive metadata will be written\n * to state.drives, where it can be used by other adaptor functions.\n * Pass { id } to get a drive by id or { id, owner } to get default drive for\n * some parent resource, like a group\n * @public\n * @example <caption>Get a drive by ID</caption>\n * getDrive({ id: \"YXzpkoLwR06bxC8tNdg71m\" })\n * @example <caption>Get the default drive for a site</caption>\n * getDrive({ id: \"openfn.sharepoint.com\", owner: \"sites\" })\n * @param specifier {Object} - A definition of the drive to retrieve\n *    - id {string} - The ID of the resource or owner.\n *    - owner {string} - The type of drive owner (e.g. sites, groups).\n * @param {string} name - The local name of the drive used to write to state.drives, ie, state.drives[name]\n * @param {function} [callback = s => s] (Optional) Callback function\n * @return {Operation}\n */\nexport function getDrive(specifier, name = 'default', callback = s => s) {\n  return state => {\n    const { accessToken, apiVersion } = state.configuration;\n    const [resolvedSpecifier, resolvedName] = expandReferences(\n      state,\n      specifier,\n      name\n    );\n\n    const { id, owner = 'drive' } = resolvedSpecifier;\n\n    let resource;\n    if (owner === 'drive') {\n      resource = `drives/${id}`;\n    } else {\n      resource = `${owner}/${id}/drive`;\n    }\n\n    const url = setUrl(resource, apiVersion);\n\n    return request(url, { accessToken }).then(response => {\n      state.drives[resolvedName] = response;\n      return callback(state);\n    });\n  };\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful Javascript code assistant."}, {"role": "user", "content": "Below is a TypeScript Declaration with JsDoc that describes a tasks. Write a Javascript Implementation that approriately answers the task.\n/* TypeScript Declaration with JsDoc */\n/**\n * Create a contact\n * @example\n * execute(\n *   createContact(data)\n * )(state)\n * @function\n * @param {object} data - Payload data for the contact\n * @returns {Operation}\n */\nexport function createContact(data: object): Operation;"}, {"role": "assistant", "content": "/* JavaScript Implementation */\nimport { resolve as resolveUrl } from 'url';\nimport { expandReferences } from '@openfn/language-common';\nimport request from 'superagent'\n\n/**\n * Create a contact\n * @example\n * execute(\n *   createContact(data)\n * )(state)\n * @function\n * @param {object} data - Payload data for the contact\n * @returns {Operation}\n */\nexport function createContact(data) {\n    return state => {\n        const body = expandReferences(data)(state);\n\n        const { apiUrl, apiToken } = state.configuration;\n\n        const url = resolveUrl(apiUrl + '/', 'contacts');\n\n        console.log('Posting contact:');\n        console.log(body);\n\n        return new Promise((resolve, reject) => {\n            request.post(url)\n                .type('json')\n                .accept('json')\n                .set('Authorization', `Token ${apiToken}`)\n                .send(JSON.stringify(body))\n                .end((error, res) => {\n                    if (!!error || !res.ok) {\n                        reject(error)\n                    }\n\n                    resolve(res)\n                })\n        }).then(result => {\n            console.log('Success:', result);\n            return { ...state, references: [result, ...state.references] };\n        });\n    };\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful Javascript code assistant."}, {"role": "user", "content": "Below is a TypeScript Declaration with JsDoc that describes a tasks. Write a Javascript Implementation that approriately answers the task.\n/* TypeScript Declaration with JsDoc */\n/**\n * Get one or multiple reference data from a query filter\n * @public\n * @example\n *  getReferenceData({\"where\":{\"categoryId\": \"LNG_REFERENCE_DATA_CATEGORY_CENTRE_NAME\"}}, state => {\n *    console.log(state.data);\n *    return state;\n *  });\n * @function\n * @param {object} query - An object with a query filter parameter\n * @param {function} callback - (Optional) Callback function\n * @returns {Operation}\n */\nexport function getReferenceData(query: object, callback: Function): Operation;"}, {"role": "assistant", "content": "/* JavaScript Implementation */\nimport {\n    composeNextState,\n} from '@openfn/language-common';\nimport axios from 'axios';\n\n/**\n * Get one or multiple reference data from a query filter\n * @public\n * @example\n *  getReferenceData({\"where\":{\"categoryId\": \"LNG_REFERENCE_DATA_CATEGORY_CENTRE_NAME\"}}, state => {\n *    console.log(state.data);\n *    return state;\n *  });\n * @function\n * @param {object} query - An object with a query filter parameter\n * @param {function} callback - (Optional) Callback function\n * @returns {Operation}\n */\nexport function getReferenceData(query, callback) {\n    return state => {\n        const { apiUrl, access_token } = state.configuration;\n\n        const filter = JSON.stringify(query);\n\n        return axios({\n            method: 'GET',\n            baseURL: apiUrl,\n            url: '/reference-data',\n            params: {\n                filter,\n                access_token,\n            },\n        })\n            .then(response => {\n                const nextState = composeNextState(state, response.data);\n                if (callback) return callback(nextState);\n                return nextState;\n            })\n            .catch(error => {\n                return error;\n            });\n    };\n}"}]}
