[
    {
        "prompt": "Given the following OpenFn instruction:\n\n### Instruction:\nCreate an OpenFn function that updates a patient's information based on the provided data.\n\nProvide the implementation code that corresponds to the following OpenFn signature. Ensure that all imports are from '@openfn/':\n\n### Signature:\n```javascript\n/**\n * Update a patient's information based on the provided data.\n * @example\n * updatePatient('patient123', { name: 'John Doe', age: 30 })\n * @function\n * @param {string} patientId - The ID of the patient to be updated.\n * @param {object} data - Object containing the updated information for the patient.\n * @returns {Operation}\n */\nexport function updatePatient(patientId: string, data: object): Operation;\n```\n\n### Implementation:\n```javascript\nimport {\n  execute as commonExecute,\n  expandReferences,\n} from '@openfn/language-common';\nimport http from '@openfn/language-http';\n\n/**\n * Update a patient's information based on the provided data.\n * @example\n * updatePatient('patient123', { name: 'John Doe', age: 30 })\n * @function\n * @param {string} patientId - The ID of the patient to be updated.\n * @param {object} data - Object containing the updated information for the patient.\n * @returns {Operation}\n */\nexport function updatePatient(patientId, data) {\n  return state => {\n    const updatedData = expandReferences(data)(state);\n    const { instanceUrl } = state.configuration;\n    const url = `${instanceUrl}/ws/rest/v1/patient/${patientId}`;\n    const request = http.put(url, { data: updatedData });\n    return commonExecute(request)(state);\n  };\n}\n```\n"
    },
    {
        "prompt": "Given the following OpenFn instruction:\n\n### Instruction:\nCreate an OpenFn function that fetches all non-retired patients that match specified parameters\n\nProvide the implementation code that corresponds to the following OpenFn signature. Ensure that all imports are from '@openfn/':\n\n### Signature:\n```javascript\n/**\n * Fetch all non-retired patients that match any specified parameters\n * @example\n * searchPatient({ q: 'Sarah' })\n * @function\n * @param {object} query - Object with query for the patient\n * @returns {Operation}\n */\nexport function searchPatient(query: object): Operation;\n```\n\n### Implementation:\n```javascript\nimport {\n  execute as commonExecute,\n  expandReferences,\n} from '@openfn/language-common';\nimport http from '@openfn/language-http';\n\n/**\n * Fetch all non-retired patients that match any specified parameters\n * @example\n * searchPatient({ q: 'Sarah' })\n * @function\n * @param {object} query - Object with query for the patient\n * @returns {Operation}\n */\nexport function searchPatient(query) {\n  return state => {\n    const qs = expandReferences(query)(state);\n    const { instanceUrl } = state.configuration;\n    const url = `${instanceUrl}/ws/rest/v1/patient`;\n    const request = http.get(url, { query: qs });\n    return commonExecute(request)(state);\n  };\n}\n```\n"
    },
    {
        "prompt": "Given the following OpenFn instruction:\n\n### Instruction:\nCreate an OpenFn function that updates a facility's information based on the provided data\n\nProvide the implementation code that corresponds to the following OpenFn signature. Ensure that all imports are from '@openfn/':\n\n### Signature:\n```javascript\n/**\n * Update a facility's information based on the provided data.\n * @example\n * updateFacility('facility123', { name: 'New Facility Name', location: 'City' })\n * @function\n * @param {string} facilityId - The ID of the facility to be updated.\n * @param {object} data - Object containing the updated information for the facility.\n * @returns {Operation}\n */\nexport function updateFacility(facilityId: string, data: object): Operation;\n```\n\n### Implementation:\n```javascript\nimport {\n  execute as commonExecute,\n  expandReferences,\n} from '@openfn/language-common';\nimport http from '@openfn/language-http';\n\n/**\n * Update a facility's information based on the provided data.\n * @example\n * updateFacility('facility123', { name: 'New Facility Name', location: 'City' })\n * @function\n * @param {string} facilityId - The ID of the facility to be updated.\n * @param {object} data - Object containing the updated information for the facility.\n * @returns {Operation}\n */\nexport function updateFacility(facilityId, data) {\n  return state => {\n    const updatedData = expandReferences(data)(state);\n    const { instanceUrl } = state.configuration;\n    const url = `${instanceUrl}/ws/rest/v1/facility/${facilityId}`;\n    const request = http.put(url, { data: updatedData });\n    return commonExecute(request)(state);\n  };\n}\n```\n"
    },
    {
        "prompt": "Given the following OpenFn instruction:\n\n### Instruction:\nCreate an OpenFn function that retrieves the details of a specific appointment\n\nProvide the implementation code that corresponds to the following OpenFn signature. Ensure that all imports are from '@openfn/':\n\n### Signature:\n```javascript\n/**\n * Retrieve the details of a specific appointment.\n * @example\n * getAppointmentDetails('appointment123')\n * @function\n * @param {string} appointmentId - The ID of the appointment to retrieve details for.\n * @returns {Operation}\n */\nexport function getAppointmentDetails(appointmentId: string): Operation;\n```\n\n### Implementation:\n```javascript\nimport {\n  execute as commonExecute,\n  expandReferences,\n} from '@openfn/language-common';\nimport http from '@openfn/language-http';\n\n/**\n * Retrieve the details of a specific appointment.\n * @example\n * getAppointmentDetails('appointment123')\n * @function\n * @param {string} appointmentId - The ID of the appointment to retrieve details for.\n * @returns {Operation}\n */\nexport function getAppointmentDetails(appointmentId) {\n  return state => {\n    const { instanceUrl } = state.configuration;\n    const url = `${instanceUrl}/ws/rest/v1/appointment/${appointmentId}`;\n    const request = http.get(url);\n    return commonExecute(request)(state);\n  };\n}\n```\n"
    },
    {
        "prompt": "Given the following OpenFn instruction:\n\n### Instruction:\nCreate an OpenFn function that creates a new household record based on the provided data\n\nProvide the implementation code that corresponds to the following OpenFn signature. Ensure that all imports are from '@openfn/':\n\n### Signature:\n```javascript\n/**\n * Create a new household record based on the provided data.\n * @example\n * createHousehold({ name: 'Smith Household', location: 'City' })\n * @function\n * @param {object} data - Object containing the data for the new household record.\n * @returns {Operation}\n */\nexport function createHousehold(data: object): Operation;\n```\n\n### Implementation:\n```javascript\nimport {\n  execute as commonExecute,\n  expandReferences,\n} from '@openfn/language-common';\nimport http from '@openfn/language-http';\n\n/**\n * Create a new household record based on the provided data.\n * @example\n * createHousehold({ name: 'Smith Household', location: 'City' })\n * @function\n * @param {object} data - Object containing the data for the new household record.\n * @returns {Operation}\n */\nexport function createHousehold(data) {\n  return state => {\n    const requestData = expandReferences(data)(state);\n    const { instanceUrl } = state.configuration;\n    const url = `${instanceUrl}/ws/rest/v1/household`;\n    const request = http.post(url, { data: requestData });\n    return commonExecute(request)(state);\n  };\n}\n```\n"
    },
    {
        "prompt": "Given the following OpenFn instruction:\n\n### Instruction:\nCreate an OpenFn function that fetches all non-retired patients that match specified parameters\n\nProvide the implementation code that corresponds to the following OpenFn signature. Ensure that all imports are from '@openfn/':\n\n### Signature:\n```javascript\n/**\n * Fetch all non-retired patients that match any specified parameters\n * @example\n * searchPatient({ q: 'Sarah' })\n * @function\n * @param {object} query - Object with query for the patient\n * @returns {Operation}\n */\nexport function searchPatient(query: object): Operation;\n```\n\n### Implementation:\n```javascript\nimport {\n  execute as commonExecute,\n  expandReferences,\n} from '@openfn/language-common';\nimport http from '@openfn/language-http';\n\n/**\n * Fetch all non-retired patients that match any specified parameters\n * @example\n * searchPatient({ q: 'Sarah' })\n * @function\n * @param {object} query - Object with query for the patient\n * @returns {Operation}\n */\nexport function searchPatient(query) {\n  return state => {\n    const qs = expandReferences(query)(state);\n    const { instanceUrl } = state.configuration;\n    const url = `${instanceUrl}/ws/rest/v1/patient`;\n    const request = http.get(url, { query: qs });\n    return commonExecute(request)(state);\n  };\n}\n```"
    },
    {
        "prompt": "Given the following OpenFn instruction:\n\n### Instruction:\nCreate an OpenFn function that updates a facility's information based on the provided data\n\nProvide the implementation code that corresponds to the following OpenFn signature. Ensure that all imports are from '@openfn/':\n\n### Signature:\n```javascript\n/**\n * Update a facility's information based on the provided data.\n * @example\n * updateFacility('facility123', { name: 'New Facility Name', location: 'City' })\n * @function\n * @param {string} facilityId - The ID of the facility to be updated.\n * @param {object} data - Object containing the updated information for the facility.\n * @returns {Operation}\n */\nexport function updateFacility(facilityId: string, data: object): Operation;\n```\n\n### Implementation:\n```javascript\nimport {\n  execute as commonExecute,\n  expandReferences,\n} from '@openfn/language-common';\nimport http from '@openfn/language-http';\n\n/**\n * Update a facility's information based on the provided data.\n * @example\n * updateFacility('facility123', { name: 'New Facility Name', location: 'City' })\n * @function\n * @param {string} facilityId - The ID of the facility to be updated.\n * @param {object} data - Object containing the updated information for the facility.\n * @returns {Operation}\n */\nexport function updateFacility(facilityId, data) {\n  return state => {\n    const updatedData = expandReferences(data)(state);\n    const { instanceUrl } = state.configuration;\n    const url = `${instanceUrl}/ws/rest/v1/facility/${facilityId}`;\n    const request = http.put(url, { data: updatedData });\n    return commonExecute(request)(state);\n  };\n}\n```"
    }
]